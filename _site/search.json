[
  {
    "objectID": "takehome/ex3/takehome3.html",
    "href": "takehome/ex3/takehome3.html",
    "title": "Takehome 3",
    "section": "",
    "text": "Data Collection:\nWe gathered data on schools in Jakarta, including their location, type, and status. We also collected information on property prices and boundaries for administrative regions in Jakarta.\nGeospatial Analysis:\n\nSpatial Point Patterns Analysis for School Locations (Provincial and City level)\nLISA and HCSA Analysis of Schools (District level)\nGeographically weighted regression for education levels versus availability and accessibility of schools (Sub-district level)\n\nFor my team, I’ll be covering a deeper dive into (3), which is GWR regression."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#project-methodology",
    "href": "takehome/ex3/takehome3.html#project-methodology",
    "title": "Takehome 3",
    "section": "",
    "text": "Data Collection:\nWe gathered data on schools in Jakarta, including their location, type, and status. We also collected information on property prices and boundaries for administrative regions in Jakarta.\nGeospatial Analysis:\n\nSpatial Point Patterns Analysis for School Locations (Provincial and City level)\nLISA and HCSA Analysis of Schools (District level)\nGeographically weighted regression for education levels versus availability and accessibility of schools (Sub-district level)\n\nFor my team, I’ll be covering a deeper dive into (3), which is GWR regression."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#loading-packages",
    "href": "takehome/ex3/takehome3.html#loading-packages",
    "title": "Takehome 3",
    "section": "Loading Packages",
    "text": "Loading Packages\n\npacman::p_load(sf, tidyverse, knitr, viridis, patchwork, gridExtra, kableExtra, sfdep, tmap, tmaptools, patchwork, scales, spdep, ggrepel, spatstat, GWmodel, gtsummary, olsrr, ClustGeo, corrplot, ggpubr)"
  },
  {
    "objectID": "takehome/ex3/takehome3.html#dataset-preparation",
    "href": "takehome/ex3/takehome3.html#dataset-preparation",
    "title": "Takehome 3",
    "section": "Dataset Preparation",
    "text": "Dataset Preparation\nThere are 3 datasets we will be using:\n\ncomplete_data.csv: Contains information about schools in Indonesia, including their location, type, and status.\ngeoBoundaries-IDN-ADM2_simplified: Contains simplified boundaries for administrative level 2 (ADM2) in Indonesia.\nBATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA: Contains detailed boundaries for villages (desa) in Jakarta."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#spatial-points-pattern-analysis-of-school-distribution-at-the-provincial-and-city-level",
    "href": "takehome/ex3/takehome3.html#spatial-points-pattern-analysis-of-school-distribution-at-the-provincial-and-city-level",
    "title": "Takehome 3",
    "section": "1.0 Spatial Points Pattern Analysis of School Distribution at the Provincial and City Level",
    "text": "1.0 Spatial Points Pattern Analysis of School Distribution at the Provincial and City Level\n\n1.1 Data Preprocessing\n\nindo_schools_kaggle &lt;- read_csv(\"data/aspatial/complete_data.csv\")\n\nRows: 215371 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): province_name, city_name, district_name, school_name, stage, status\ndbl (5): lat, long, province_area, total_population, total_education_age_pop...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhead(indo_schools_kaggle, n=20)\n\n# A tibble: 20 × 11\n   province_name city_name    district_name school_name stage status   lat  long\n   &lt;chr&gt;         &lt;chr&gt;        &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1 PAPUA         Kab. Tolika… Kec. Gilungb… SMP SATAP … SMP   N      -3.42  138.\n 2 PAPUA         Kab. Tolika… Kec. Wunin    SD YPPGI W… SD    S      -3.48  139.\n 3 PAPUA         Kab. Tolika… Kec. Bokondi… SMAN BOKON… SMA   N      -3.53  139.\n 4 PAPUA         Kab. Tolika… Kec. Kuari    SD INPRES … SD    N      -3.52  139.\n 5 PAPUA         Kab. Tolika… Kec. Karubaga SMAS YPPGI… SMA   S      -3.45  139.\n 6 PAPUA         Kab. Tolika… Kec. Wunin    SD NEGERI … SD    N      -3.49  139.\n 7 PAPUA         Kab. Tolika… Kec. Wina     SD INPRES … SD    N      -3.42  138.\n 8 PAPUA         Kab. Lanny … Kec. Tiomneri SD Negeri … SD    N      -3.86  138.\n 9 PAPUA         Kab. Lanny … Kec. Pirime   SMP YPPGI … SMP   S      -3.93  138.\n10 PAPUA         Kab. Lanny … Kec. Tiomneri SD INPRES … SD    N      -3.89  138.\n11 PAPUA         Kab. Lanny … Kec. Tiom     SD NEGERI … SD    N      -3.92  138.\n12 PAPUA         Kab. Lanny … Kec. Dimba    SMP NEGERI… SMP   N      -3.86  139.\n13 PAPUA         Kab. Lanny … Kec. Balingga SD Negeri … SD    N      -4.08  138.\n14 PAPUA         Kab. Lanny … Kec. Gamelia  SD YPPGI Y… SD    S      -3.94  139.\n15 PAPUA         Kab. Lanny … Kec. Gamelia  SD INPRES … SD    N      -3.87  139.\n16 PAPUA         Kab. Lanny … Kec. Tiom     SMP NEGERI… SMP   N      -3.92  138.\n17 PAPUA         Kab. Lanny … Kec. Makki    SMAN 1 MAK… SMA   N      -3.94  139.\n18 PAPUA         Kab. Lanny … Kec. Pirime   SMP NEGERI… SMP   N      -3.86  138.\n19 PAPUA         Kab. Lanny … Kec. Pirime   SMP NEGERI… SMP   N      -3.88  138.\n20 PAPUA         Kab. Lanny … Kec. Pirime   SD INPRES … SD    N      -3.89  139.\n# ℹ 3 more variables: province_area &lt;dbl&gt;, total_population &lt;dbl&gt;,\n#   total_education_age_population &lt;dbl&gt;\n\n\nWe do some filtering and data manipulation here to restrict our data to jakarta only.\n\njakarta_schools &lt;- indo_schools_kaggle %&gt;% \n  filter(province_name == \"DKI JAKARTA\",\n         city_name != \"Kab. Kepulauan Seribu\") %&gt;%\n  filter(!is.na(long) & !is.na(lat)) %&gt;%\n  st_as_sf(coords = c(\"long\", \"lat\"), crs = 4326) %&gt;%\n  mutate(\n      school_level = case_when(\n        stage %in% c(\"SD\", \"SDLB\") ~ \"Elementary\",\n        stage %in% c(\"SMP\", \"SMPLB\") ~ \"Junior High\",\n        stage %in% c(\"SMA\", \"SMK\", \"SMLB\") ~ \"Senior High\",\n        TRUE ~ \"Special Education\"\n      ),\n      school_type = if_else(status == \"N\", \"Public\", \"Private\")\n    )\n\n\nhead(jakarta_schools)\n\nSimple feature collection with 6 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 106.8139 ymin: -6.1992 xmax: 106.8642 ymax: -6.1462\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 12\n  province_name city_name   district_name school_name stage status province_area\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;          &lt;dbl&gt;\n1 DKI JAKARTA   Kota Jakar… Kec. Tanah A… SD NEGERI … SD    N                664\n2 DKI JAKARTA   Kota Jakar… Kec. Senen    SDN Kenari… SD    N                664\n3 DKI JAKARTA   Kota Jakar… Kec. Johar B… SD NEGERI … SD    N                664\n4 DKI JAKARTA   Kota Jakar… Kec. Menteng  SMAS PSKD … SMA   S                664\n5 DKI JAKARTA   Kota Jakar… Kec. Sawah B… SMKS STRAD… SMK   S                664\n6 DKI JAKARTA   Kota Jakar… Kec. Cempaka… SDN Cempak… SD    N                664\n# ℹ 5 more variables: total_population &lt;dbl&gt;,\n#   total_education_age_population &lt;dbl&gt;, geometry &lt;POINT [°]&gt;,\n#   school_level &lt;chr&gt;, school_type &lt;chr&gt;\n\n\n\nadm2 &lt;- st_read(\"data/geospatial\", layer = \"geoBoundaries-IDN-ADM2_simplified\") %&gt;%\n  filter(shapeName %in% c(\n      \"Kota Jakarta Barat\", \"Kota Jakarta Pusat\",\n      \"Kota Jakarta Selatan\", \"Kota Jakarta Timur\",\n      \"Kota Jakarta Utara\"\n    ))\n\nReading layer `geoBoundaries-IDN-ADM2_simplified' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 519 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 95.01115 ymin: -11.00762 xmax: 141.0194 ymax: 6.07693\nGeodetic CRS:  WGS 84\n\n\n\nbatas &lt;- st_read(\"data/geospatial\", layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")  %&gt;%\n    select(OBJECT_ID, PROVINSI, KAB_KOTA, KECAMATAN, DESA_KELUR, \n         JUMLAH_PEN, JUMLAH_KK, LUAS_WILAY, KEPADATAN, geometry) %&gt;%\n    rename(\n    province = PROVINSI,\n    city = KAB_KOTA,\n    district = KECAMATAN,\n    subdistrict = DESA_KELUR,\n    population = JUMLAH_PEN,\n    total_families = JUMLAH_KK,\n    area_size = LUAS_WILAY,\n    popn_density = KEPADATAN\n    ) %&gt;%\n    filter(!is.na(city) & city != \"KEPULAUAN SERIBU\") %&gt;%\n    mutate(city = case_when(\n      city == \"JAKARTA BARAT\" ~ \"Kota Jakarta Barat\",\n      city == \"JAKARTA PUSAT\" ~ \"Kota Jakarta Pusat\",\n      city == \"JAKARTA SELATAN\" ~ \"Kota Jakarta Selatan\",\n      city == \"JAKARTA TIMUR\" ~ \"Kota Jakarta Timur\",\n      city == \"JAKARTA UTARA\" ~ \"Kota Jakarta Utara\",\n      TRUE ~ city\n    ))\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\n\nhead(batas)\n\nSimple feature collection with 6 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.8105 ymin: -6.17575 xmax: 106.8711 ymax: -6.141043\nGeodetic CRS:  WGS 84\n  OBJECT_ID    province               city    district   subdistrict population\n1     25477 DKI JAKARTA Kota Jakarta Barat  TAMAN SARI     KEAGUNGAN      21609\n2     25478 DKI JAKARTA Kota Jakarta Barat  TAMAN SARI        GLODOK       9069\n3     25397 DKI JAKARTA Kota Jakarta Pusat   KEMAYORAN HARAPAN MULIA      29085\n4     25400 DKI JAKARTA Kota Jakarta Pusat   KEMAYORAN  CEMPAKA BARU      41913\n5     25390 DKI JAKARTA Kota Jakarta Pusat SAWAH BESAR    PASAR BARU      15793\n6     25391 DKI JAKARTA Kota Jakarta Pusat SAWAH BESAR  KARANG ANYAR      33383\n  total_families area_size popn_density                       geometry\n1           7255      0.36        60504 MULTIPOLYGON (((106.8164 -6...\n2           3273      0.37        24527 MULTIPOLYGON (((106.8148 -6...\n3           9217      0.53        54465 MULTIPOLYGON (((106.8576 -6...\n4          13766      0.97        42993 MULTIPOLYGON (((106.8631 -6...\n5           5599      1.76         8971 MULTIPOLYGON (((106.8369 -6...\n6          11276      0.47        71628 MULTIPOLYGON (((106.8316 -6...\n\n\nWe map our districts here manually.\n\ndistrict_mapping &lt;- c(\n    \"TAMAN SARI\" = \"Kec. Taman Sari\",\n    \"KEMAYORAN\" = \"Kec. Kemayoran\",\n    \"SAWAH BESAR\" = \"Kec. Sawah Besar\",\n    \"GAMBIR\" = \"Kec. Gambir\",\n    \"SENEN\" = \"Kec. Senen\",\n    \"CEMPAKA PUTIH\" = \"Kec. Cempaka Putih\",\n    \"MENTENG\" = \"Kec. Menteng\",\n    \"TANAH ABANG\" = \"Kec. Tanah Abang\",\n    \"JOHAR BARU\" = \"Kec. Johar Baru\",\n    \"KOJA\" = \"Kec. Koja\",\n    \"PENJARINGAN\" = \"Kec. Penjaringan\",\n    \"TANJUNG PRIOK\" = \"Kec. Tanjung Priok\",\n    \"CILINCING\" = \"Kec. Cilincing\",\n    \"GROGOL PETAMBURAN\" = \"Kec. Grogol Petamburan\",\n    \"PADEMANGAN\" = \"Kec. Pademangan\",\n    \"KELAPA GADING\" = \"Kec. Kelapa Gading\",\n    \"CENGKARENG\" = \"Kec. Cengkareng\",\n    \"TAMBORA\" = \"Kec. Tambora\",\n    \"KEBON JERUK\" = \"Kec. Kebon Jeruk\",\n    \"KALIDERES\" = \"Kec. Kali Deres\",\n    \"PAL MERAH\" = \"Kec. Palmerah\",\n    \"JATINEGARA\" = \"Kec. Jatinegara\",\n    \"KEMBANGAN\" = \"Kec. Kembangan\",\n    \"TEBET\" = \"Kec. Tebet\",\n    \"SETIABUDI\" = \"Kec. Setia Budi\",\n    \"MAMPANG PRAPATAN\" = \"Kec. Mampang Prapatan\",\n    \"PASAR MINGGU\" = \"Kec. Pasar Minggu\",\n    \"KEBAYORAN LAMA\" = \"Kec. Kebayoran Lama\",\n    \"KEBAYORAN BARU\" = \"Kec. Kebayoran Baru\",\n    \"CILANDAK\" = \"Kec. Cilandak\",\n    \"PESANGGRAHAN\" = \"Kec. Pesanggrahan\",\n    \"PANCORAN\" = \"Kec. Pancoran\",\n    \"JAGAKARSA\" = \"Kec. Jagakarsa\",\n    \"MATRAMAN\" = \"Kec. Matraman\",\n    \"PULOGADUNG\" = \"Kec. Pulo Gadung\",\n    \"KRAMATJATI\" = \"Kec. Kramat Jati\",\n    \"PASAR REBO\" = \"Kec. Pasar Rebo\",\n    \"DUREN SAWIT\" = \"Kec. Duren Sawit\",\n    \"MAKASAR\" = \"Kec. Makasar\",\n    \"CIRACAS\" = \"Kec. Ciracas\",\n    \"CIPAYUNG\" = \"Kec. Cipayung\",\n    \"CAKUNG\" = \"Kec. Cakung\"\n)\n\nbatas &lt;- batas %&gt;%\n  mutate(district = district_mapping[district])\n\n\n\n1.1 EDA at the Provincial Level\n\n1.1.1 Overall Distribution of Schools\n\nggplot(data = jakarta_schools) +\n  geom_bar(aes(x = city_name, fill = city_name)) +\n  scale_fill_viridis_d(option = \"plasma\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(size = 12, face = \"bold\"),\n    legend.position = \"none\"\n  ) +\n  labs(\n    title = \"Distribution of Schools Across Jakarta\",\n    x = \"City\",\n    y = \"Number of Schools\"\n  )\n\n\n\n\n\n\n\n\nKey Observations:\n\nThe plot reveals significant disparity in school distribution across Jakarta\nEast Jakarta (Timur) has the highest number of schools, followed by West Jakarta (Barat) then South Jakarta (Selatan). This is consistent with the population density distribution in Jakarta.\n\n\n\n1.1.2 Distribution of School Levels\n\nggplot(data = jakarta_schools) +\n  geom_bar(aes(x = city_name, fill = school_level)) +\n  scale_fill_viridis_d(option = \"plasma\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(size = 12, face = \"bold\")\n  ) +\n  labs(\n    title = \"Distribution of School Levels Across Jakarta\",\n    x = \"City\",\n    y = \"Number of Schools\",\n    fill = \"School Level\"\n  )\n\n\n\n\n\n\n\n\nKey Observations:\n\nAcross all municipalities, elementary schools are the most common\nThere is a relatively consistent proportion of Junior and Senior High Schools\nSpecial Education schools are less common but present in all municipalities\nWhile total numbers differ, the proportional distribution of school levels remains fairly consistent across cities, suggesting planned distribution rather than random clustering\n\n\n\n1.1.3 School Density Across Jakarta\n\nggplot() +\n  geom_sf(data = adm2, aes(fill = lengths(st_intersects(adm2, jakarta_schools)))) +\n  scale_fill_viridis_c(option = \"plasma\") +\n  theme_minimal() +\n  labs(\n    title = \"School Density Across Jakarta\",\n    fill = \"Number of\\nSchools\"\n  )\n\n\n\n\n\n\n\n\n\n1.1.4 Population Density in Jakarta\n\nggplot() +\n  geom_sf(data = batas, aes(fill = popn_density)) +\n  scale_fill_viridis_c(\n    option = \"plasma\",\n    labels = scales::comma_format()\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Population Density in Jakarta\",\n    fill = \"Population\\nDensity\\n(per km²)\"\n  )\n\n\n\n\n\n\n\n\nKey Observations:\n\nThe density map reveals high population clusters in central Jakarta (yellow/orange areas)\nThere is an interesting mismatch with school density in some areas\nSeveral high-density pockets are scattered across Jakarta\n\n\n\n\n1.5 Summary\n\nOur preliminary EDA at the provincial level is too macro to provide detailed insights, but necessary to understand the overall distribution of schools in Jakarta"
  },
  {
    "objectID": "takehome/ex3/takehome3.html#additional-eda",
    "href": "takehome/ex3/takehome3.html#additional-eda",
    "title": "Takehome 3",
    "section": "2.0 Additional EDA",
    "text": "2.0 Additional EDA\nWe note that Jakarta uses\n\n# Convert coordinate systems for accurate distance measurement \n# UTM Zone 48S (EPSG:32748) is appropriate for Jakarta \njakarta_schools_utm &lt;- st_transform(jakarta_schools, 32748) \nadm2_utm &lt;- st_transform(adm2, 32748)\nbatas_utm &lt;- st_transform(batas, 32748)\n\n\n# For jakarta_schools_utm\nglimpse(jakarta_schools_utm)\n\nRows: 4,762\nColumns: 12\n$ province_name                  &lt;chr&gt; \"DKI JAKARTA\", \"DKI JAKARTA\", \"DKI JAKA…\n$ city_name                      &lt;chr&gt; \"Kota Jakarta Pusat\", \"Kota Jakarta Pus…\n$ district_name                  &lt;chr&gt; \"Kec. Tanah Abang\", \"Kec. Senen\", \"Kec.…\n$ school_name                    &lt;chr&gt; \"SD NEGERI KEBON MELATI 01 PG\", \"SDN Ke…\n$ stage                          &lt;chr&gt; \"SD\", \"SD\", \"SD\", \"SMA\", \"SMK\", \"SD\", \"…\n$ status                         &lt;chr&gt; \"N\", \"N\", \"N\", \"S\", \"S\", \"N\", \"S\", \"N\",…\n$ province_area                  &lt;dbl&gt; 664, 664, 664, 664, 664, 664, 664, 664,…\n$ total_population               &lt;dbl&gt; 10679951, 10679951, 10679951, 10679951,…\n$ total_education_age_population &lt;dbl&gt; 3235408, 3235408, 3235408, 3235408, 323…\n$ geometry                       &lt;POINT [m]&gt; POINT (700704.4 9315085), POINT (…\n$ school_level                   &lt;chr&gt; \"Elementary\", \"Elementary\", \"Elementary…\n$ school_type                    &lt;chr&gt; \"Public\", \"Public\", \"Public\", \"Private\"…\n\n# For batas_utm\nglimpse(batas_utm)\n\nRows: 261\nColumns: 10\n$ OBJECT_ID      &lt;dbl&gt; 25477, 25478, 25397, 25400, 25390, 25391, 25394, 25386,…\n$ province       &lt;chr&gt; \"DKI JAKARTA\", \"DKI JAKARTA\", \"DKI JAKARTA\", \"DKI JAKAR…\n$ city           &lt;chr&gt; \"Kota Jakarta Barat\", \"Kota Jakarta Barat\", \"Kota Jakar…\n$ district       &lt;chr&gt; \"Kec. Taman Sari\", \"Kec. Taman Sari\", \"Kec. Kemayoran\",…\n$ subdistrict    &lt;chr&gt; \"KEAGUNGAN\", \"GLODOK\", \"HARAPAN MULIA\", \"CEMPAKA BARU\",…\n$ population     &lt;dbl&gt; 21609, 9069, 29085, 41913, 15793, 33383, 35906, 21828, …\n$ total_families &lt;dbl&gt; 7255, 3273, 9217, 13766, 5599, 11276, 12817, 7328, 3049…\n$ area_size      &lt;dbl&gt; 0.36, 0.37, 0.53, 0.97, 1.76, 0.47, 1.31, 1.14, 0.82, 0…\n$ popn_density   &lt;dbl&gt; 60504, 24527, 54465, 42993, 8971, 71628, 27463, 19144, …\n$ geometry       &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((700997 9320..., MULTIPOLYG…\n\n# For column names\nnames(jakarta_schools_utm)\n\n [1] \"province_name\"                  \"city_name\"                     \n [3] \"district_name\"                  \"school_name\"                   \n [5] \"stage\"                          \"status\"                        \n [7] \"province_area\"                  \"total_population\"              \n [9] \"total_education_age_population\" \"geometry\"                      \n[11] \"school_level\"                   \"school_type\"                   \n\nnames(batas_utm)\n\n [1] \"OBJECT_ID\"      \"province\"       \"city\"           \"district\"      \n [5] \"subdistrict\"    \"population\"     \"total_families\" \"area_size\"     \n [9] \"popn_density\"   \"geometry\"      \n\n# For dimensions\ndim(jakarta_schools_utm)\n\n[1] 4762   12\n\ndim(batas_utm)\n\n[1] 261  10\n\n\nWe’ll now look at school density per subdistrict:\n\n# Calculate school density per subdistrict\n# Join school counts with batas dataset\nschool_counts &lt;- st_join(batas_utm, jakarta_schools_utm) %&gt;%\n  group_by(OBJECT_ID) %&gt;%\n  summarise(\n    total_schools = n(),\n    elementary_schools = sum(school_level == \"Elementary\"),\n    junior_schools = sum(school_level == \"Junior High\"),\n    senior_schools = sum(school_level == \"Senior High\"),\n    public_schools = sum(school_type == \"Public\"),\n    private_schools = sum(school_type == \"Private\")\n  )\n\n# Visualize school density metrics\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(school_counts) +\n  tm_fill(\"total_schools\", \n          style = \"quantile\",\n          palette = \"viridis\") +\n  tm_borders() +\n  tm_layout(title = \"School Density by Subdistrict\")\n\n\n\n\n\n\n\n\nAs we can see, there are some spots (in the middle and the north of Jakarta where there seems to be sparse coverage of schools. Let’s cross reference our school accessibility index for more info:\n\n# Calculate centroids\ncentroids &lt;- st_centroid(batas_utm)\n\nWarning: st_centroid assumes attributes are constant over geometries\n\n# Create distance matrix\ndist_matrix &lt;- st_distance(centroids, jakarta_schools_utm)\n\n# Find minimum distance for each centroid\nmin_distances &lt;- apply(dist_matrix, 1, min)\n\n# Add to batas\nbatas_utm$nearest_school_dist &lt;- min_distances\n\n# Visualize\ntm_shape(batas_utm) +\n  tm_fill(\"nearest_school_dist\", \n          style = \"quantile\",\n          palette = \"viridis\",\n          title = \"Distance (m)\") +\n  tm_borders() +\n  tm_layout(title = \"Distance to Nearest School\")\n\n\n\n\n\n\n\n\n\nKey Observations:\n\nSpatial Distribution Patterns:\nCentral Jakarta shows high school density (8-14 schools) but very short distances to nearest schools (4-97m)\nOuter regions, particularly in the east and west, have higher numbers of schools (26-65) but longer distances (294-1,014m)\nSome subdistricts show an interesting mismatch: high school counts but relatively long distances, suggesting uneven distribution within the subdistrict\n\n\n\nAccessibility implications\n\nThe central areas demonstrate better accessibility (darker purple in distance map)\nPeripheral areas (yellow) show reduced accessibility despite sometimes having more schools\nThis suggests that school placement might not be optimally aligned with population distribution."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#clustering-eda",
    "href": "takehome/ex3/takehome3.html#clustering-eda",
    "title": "Takehome 3",
    "section": "3.0 Clustering EDA",
    "text": "3.0 Clustering EDA\nWe’ll start by using hierarchical clustering. Hierarchical clustering provides a systematic, data-driven approach to identify groups of subdistricts with similar educational characteristics. This helps us select representative areas for detailed GWR analysis while ensuring we capture the full range of educational patterns in Jakarta.\n\n# First, create a normalized dataset with relevant variables\nclustering_data &lt;- school_counts %&gt;%\n  st_drop_geometry() %&gt;%  # Remove geometry for numerical calculations\n  mutate(\n    school_density = as.numeric(total_schools),\n    elementary_ratio = as.numeric(elementary_schools / total_schools),\n    junior_ratio = as.numeric(junior_schools / total_schools),\n    senior_ratio = as.numeric(senior_schools / total_schools),\n    public_ratio = as.numeric(public_schools / total_schools)\n  ) %&gt;%\n  # Select only numeric columns for clustering\n  select(school_density, elementary_ratio, junior_ratio, \n         senior_ratio, public_ratio)\n\nsummary(clustering_data)\n\n school_density  elementary_ratio  junior_ratio     senior_ratio   \n Min.   : 1.00   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:10.00   1st Qu.:0.4615   1st Qu.:0.1429   1st Qu.:0.1429  \n Median :16.00   Median :0.5600   Median :0.2000   Median :0.2000  \n Mean   :18.14   Mean   :0.5650   Mean   :0.2085   Mean   :0.2100  \n 3rd Qu.:24.00   3rd Qu.:0.6667   3rd Qu.:0.2688   3rd Qu.:0.2778  \n Max.   :65.00   Max.   :1.0000   Max.   :0.4444   Max.   :1.0000  \n                 NA's   :2        NA's   :2        NA's   :2       \n  public_ratio   \n Min.   :0.0000  \n 1st Qu.:0.3604  \n Median :0.4800  \n Mean   :0.4888  \n 3rd Qu.:0.6250  \n Max.   :1.0000  \n NA's   :2       \n\nstr(clustering_data)\n\ntibble [261 × 5] (S3: tbl_df/tbl/data.frame)\n $ school_density  : num [1:261] 3 10 30 7 5 14 28 15 4 16 ...\n $ elementary_ratio: num [1:261] 0.333 0.7 0.333 0.714 0.6 ...\n $ junior_ratio    : num [1:261] 0 0.2 0.3 0.143 0.2 ...\n $ senior_ratio    : num [1:261] 0.667 0.1 0.367 0.143 0.2 ...\n $ public_ratio    : num [1:261] 1 0.7 0.267 0.857 0.2 ...\n\n\nWe now prepare our distance matrix.\n\n# Normalize the data\nnormalized_data &lt;- scale(clustering_data)\n\n\nfeature_dist &lt;- dist(normalized_data)\n\n\n# 4. Perform hierarchical clustering\nhc &lt;- hclust(feature_dist, method = \"ward.D2\")\n\nGreat! let’s now plot the dendrogram.\n\n# 5. Plot dendrogram\nplot(hc, main = \"Hierarchical Clustering of Jakarta Subdistricts\",\n     xlab = \"Subdistricts\", ylab = \"Height\")\n\n\n\n\n\n\n\n\n\n# 6. Cut tree to get 5 clusters\nhc_clusters &lt;- cutree(hc, k = 5)\n\n\n# 7. Add clusters back to spatial data\nschool_counts$hc_cluster &lt;- as.factor(hc_clusters)\n\n\n# 8. Visualize clusters spatially\ntm_shape(school_counts) +\n  tm_fill(\"hc_cluster\", \n          palette = \"Set3\",\n          title = \"Hierarchical Clusters\") +\n  tm_borders() +\n  tm_layout(title = \"Traditional Hierarchical Clustering\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor hclust, we use Ward’s method, also called Ward’s minimum variance method, is a criterion used in hierarchical clustering that focuses on minimizing the total within-cluster variance. The “D2” variant specifically refers to the squared Euclidean distance implementation. It’s good for finding spatial clusters that represent similar administrative or functional areas."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#skater-clustering",
    "href": "takehome/ex3/takehome3.html#skater-clustering",
    "title": "Takehome 3",
    "section": "4.0 Skater Clustering",
    "text": "4.0 Skater Clustering\nWe’ll now use Skater to take a glance from a MST (Minimum Spanning Tree) approach. Although we will probably use skater to define our local GWR later, and set up bandwidth parameters, we’ll still be considering our previous hclust.\n\n4.1.1 Create neighborhood\n\nclustering_data &lt;- school_counts %&gt;%\n  st_drop_geometry() %&gt;%\n  mutate(\n    school_density = as.numeric(total_schools),\n    elementary_ratio = elementary_schools/total_schools,\n    junior_ratio = junior_schools/total_schools,\n    senior_ratio = senior_schools/total_schools,\n    public_ratio = public_schools/total_schools\n  ) %&gt;%\n  select(school_density, elementary_ratio, junior_ratio, \n         senior_ratio, public_ratio) %&gt;%\n  as.data.frame()\n\nAfter the neighbour is done, we construct the queens matrix/spatial weights with costs.\n\njakarta_nb &lt;- poly2nb(school_counts, queen=TRUE)\n# 2. Calculate edge costs using the neighborhood structure\nlcosts &lt;- nbcosts(jakarta_nb, clustering_data)\n\n# 3. Create spatial weights with costs\njakarta.w &lt;- nb2listw(jakarta_nb, \n                     lcosts, \n                     style=\"B\")\n\n# 4. Create minimum spanning tree\njakarta.mst &lt;- mstree(jakarta.w)\n\n\n# 5. Get coordinates for plotting\ncoords &lt;- st_coordinates(st_centroid(school_counts))\n\nWarning: st_centroid assumes attributes are constant over geometries\n\n# 6. Plot the MST\nplot(st_geometry(school_counts), \n     border=gray(.5))\nplot.mst(jakarta.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n# 7. Compute SKATER clusters\nclust5 &lt;- skater(edges = jakarta.mst[,1:2], \n                 data = as.matrix(clustering_data), \n                 method = \"euclidean\", \n                 ncuts = 4)  # This will give 5 clusters\n\n# 8. Add clusters to spatial data\nschool_counts$skater_cluster &lt;- as.factor(clust5$groups)\n\n\n# 9. Visualize final clusters\ntm_shape(school_counts) +\n    tm_fill(\"skater_cluster\", \n            palette = \"Set3\",\n            title = \"SKATER Clusters\") +\n    tm_borders() +\n    tm_layout(title = \"School Clusters in Jakarta\")\n\n\n\n\n\n\n\n\n\n# 10. Check cluster sizes\nprint(\"Number of schools in each cluster:\")\n\n[1] \"Number of schools in each cluster:\"\n\nprint(table(clust5$groups))\n\n\n  1   2   3   4   5 \n204   6  20  23   8 \n\n\n\n# 11. Create cluster summary\ncluster_summary &lt;- school_counts %&gt;%\n    st_drop_geometry() %&gt;%\n    group_by(skater_cluster) %&gt;%\n    summarise(\n        n_areas = n(),\n        avg_schools = mean(total_schools),\n        avg_elementary = mean(elementary_schools),\n        avg_junior = mean(junior_schools),\n        avg_senior = mean(senior_schools)\n    )\n\nprint(\"Cluster Summary:\")\n\n[1] \"Cluster Summary:\"\n\nprint(cluster_summary)\n\n# A tibble: 5 × 6\n  skater_cluster n_areas avg_schools avg_elementary avg_junior avg_senior\n  &lt;fct&gt;            &lt;int&gt;       &lt;dbl&gt;          &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1 1                  204        15.2           8.29       3.26       3.35\n2 2                    6         2.5          NA         NA         NA   \n3 3                   20        34.3          18.0        8.6        7.35\n4 4                   23        29.3          16.4        5.61       6.74\n5 5                    8        32.6          18.5        7.25       6.62\n\n\nKey Takeaways:\n\nClear spatial inequality in school distribution\nCluster 3 appears to be best-served educationally\nMost areas fall into Cluster 1, suggesting this is the “standard” level of service\nSecondary school availability is consistently lower than elementary\n\n\n\n4.1.2 Takeaways from hclust vs Skater\nSKATER has a more uneven distribution with one dominant cluster (turquoise) covering most of Jakarta, compared to hierarchical clustering with a more fragmented clustering."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#gwr-for-education-level",
    "href": "takehome/ex3/takehome3.html#gwr-for-education-level",
    "title": "Takehome 3",
    "section": "5.0 GWR for Education level",
    "text": "5.0 GWR for Education level\nWe’ll first extract the education levels from our initial batas dataset.\n\n# First read the original file with all columns \nbatas_full &lt;- st_read(\"data/geospatial\", layer = \"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\")\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\nbatas_full_utm &lt;- st_transform(batas_full, 32748)\n\n# Create education metrics with original column names then rename\nbatas_edu_levels &lt;- batas_full_utm %&gt;%\n  mutate(\n    # Higher education ratio (diploma and above)\n    higher_ed_ratio = (DIPLOMA_I + DIPLOMA_II + DIPLOMA_IV + \n                      STRATA_II + STRATA_III) / JUMLAH_PEN,\n    # Basic education completion ratio\n    basic_ed_ratio = (TAMAT_SD + SLTP + SLTA) / JUMLAH_PEN,\n    # No education ratio \n    no_ed_ratio = (TIDAK_BELU + BELUM_TAMA) / JUMLAH_PEN\n  ) %&gt;%\n  # Select and rename columns\n  select(\n    PROVINSI, KAB_KOTA, KECAMATAN, DESA_KELUR,\n    JUMLAH_PEN, higher_ed_ratio, basic_ed_ratio, \n    no_ed_ratio, geometry\n  ) %&gt;%\n  rename(\n    province = PROVINSI,\n    city = KAB_KOTA,\n    district = KECAMATAN,\n    subdistrict = DESA_KELUR,\n    population = JUMLAH_PEN\n  ) %&gt;%\n  # Filter and standardize city names\n  filter(!is.na(city) & city != \"KEPULAUAN SERIBU\") %&gt;%\n  mutate(city = case_when(\n    city == \"JAKARTA BARAT\" ~ \"Kota Jakarta Barat\",\n    city == \"JAKARTA PUSAT\" ~ \"Kota Jakarta Pusat\",\n    city == \"JAKARTA SELATAN\" ~ \"Kota Jakarta Selatan\",\n    city == \"JAKARTA TIMUR\" ~ \"Kota Jakarta Timur\",\n    city == \"JAKARTA UTARA\" ~ \"Kota Jakarta Utara\",\n    TRUE ~ city\n  ))\n\n\n# Now proceed with the cluster analysis\neast_cluster_edu &lt;- batas_edu_levels %&gt;%\n  filter(city == \"Kota Jakarta Timur\")\n\n\ncentral_cluster_edu &lt;- batas_edu_levels %&gt;%\n  filter(city == \"Kota Jakarta Pusat\")\n\n\n5.1.1 Cluster data prep\nNow that we have our filtered education levels for our clusters, let’s begin.\n\n\n5.1.1 Education pattern visualization\n\n# 3. Visualize education patterns\nedu_map &lt;- tm_shape(batas_edu_levels) +\n tm_polygons(alpha = 0.1) +\n tm_shape(east_cluster_edu) +\n tm_fill(col = \"higher_ed_ratio\", \n         palette = \"Reds\",\n         title = \"Higher Education Ratio\") +\n tm_shape(central_cluster_edu) +\n tm_fill(col = \"higher_ed_ratio\",\n         palette = \"Blues\",\n         title = \"Higher Education Ratio\") +\n tm_layout(title = \"Education Levels: East vs Central Jakarta\")\n\nprint(edu_map)\n\n\n\n\n\n\n\n\nIt seems central Jakarta trends more educated overall, with a more uniform distribution of education in central compared to East Jakarta. There seems to also be clustering of high education rates, suggesting possible neighborhood effects.\n\n\n5.1.2 Building GWR model\n\ndistrict_boundaries &lt;- batas_utm %&gt;%\n  group_by(city, district) %&gt;%\n  summarise(\n    total_population = sum(population),\n    total_area = sum(area_size),\n    popn_density = total_population / total_area,\n    do_union = TRUE,\n    .groups = 'drop'\n  )\n\n# Then do your school density analysis at district level\nschool_density_analysis &lt;- district_boundaries %&gt;%\n  mutate(\n    total_schools = lengths(st_intersects(., jakarta_schools_utm)),\n    elementary_schools = lengths(st_intersects(., \n                               jakarta_schools_utm[jakarta_schools_utm$school_level == \"Elementary\",])),\n    junior_schools = lengths(st_intersects(., \n                           jakarta_schools_utm[jakarta_schools_utm$school_level == \"Junior High\",])),\n    senior_schools = lengths(st_intersects(., \n                           jakarta_schools_utm[jakarta_schools_utm$school_level == \"Senior High\",])),\n    special_schools = lengths(st_intersects(., \n                            jakarta_schools_utm[jakarta_schools_utm$school_level == \"Special Education\",])),\n    # Calculate school density (schools per square km)\n    school_density = total_schools / total_area,\n    elementary_density = elementary_schools / total_area,\n    junior_high_density = junior_schools / total_area,\n    senior_high_density = senior_schools / total_area,\n    special_ed_density = special_schools / total_area\n  )\n\n\nhead(school_density_analysis)\n\nSimple feature collection with 6 features and 15 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 686587.9 ymin: 9311572 xmax: 700349.5 ymax: 9325980\nProjected CRS: WGS 84 / UTM zone 48S\n# A tibble: 6 × 16\n  city               district           total_population total_area popn_density\n  &lt;chr&gt;              &lt;chr&gt;                         &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n1 Kota Jakarta Barat Kec. Cengkareng              562072      26.5        21178.\n2 Kota Jakarta Barat Kec. Grogol Petam…           239565      11.0        21878.\n3 Kota Jakarta Barat Kec. Kali Deres              435837      28.8        15144.\n4 Kota Jakarta Barat Kec. Kebon Jeruk             355830      17.4        20497.\n5 Kota Jakarta Barat Kec. Kembangan               296004      25.5        11617.\n6 Kota Jakarta Barat Kec. Palmerah                231232       7.44       31080.\n# ℹ 11 more variables: geometry &lt;POLYGON [m]&gt;, total_schools &lt;int&gt;,\n#   elementary_schools &lt;int&gt;, junior_schools &lt;int&gt;, senior_schools &lt;int&gt;,\n#   special_schools &lt;int&gt;, school_density &lt;dbl&gt;, elementary_density &lt;dbl&gt;,\n#   junior_high_density &lt;dbl&gt;, senior_high_density &lt;dbl&gt;,\n#   special_ed_density &lt;dbl&gt;\n\n\n\n# 1. Basic correlation analysis\nanalysis_data &lt;- data.frame(\n  # Education ratios\n  higher_ed_ratio = batas_edu_levels$higher_ed_ratio,\n  basic_ed_ratio = batas_edu_levels$basic_ed_ratio,\n  no_ed_ratio = batas_edu_levels$no_ed_ratio,\n  \n  # School accessibility metrics\n  school_density = clustering_data$school_density,\n  elementary_ratio = clustering_data$elementary_ratio,\n  junior_ratio = clustering_data$junior_ratio,\n  senior_ratio = clustering_data$senior_ratio,\n  public_ratio = clustering_data$public_ratio,\n  nearest_school_dist = batas_utm$nearest_school_dist\n)\n\n\n# Create correlation matrix\ncorrelation_matrix &lt;- cor(analysis_data, use = \"complete.obs\")\n\n# Visualize correlations\ncorrplot(correlation_matrix, \n         method = \"color\", \n         type = \"upper\",\n         addCoef.col = \"black\", \n         number.cex = 0.7,\n         tl.cex = 0.7,\n         title = \"Correlation Matrix: Education Levels and School Accessibility\")\n\n\n\n\n\n\n\n\n\n# Create scatter plots for key relationships\np1 &lt;- ggplot(analysis_data, aes(x = school_density, y = higher_ed_ratio)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  labs(title = \"Higher Education vs School Density\",\n       x = \"School Density\",\n       y = \"Higher Education Ratio\") +\n  theme_minimal()\n\np2 &lt;- ggplot(analysis_data, aes(x = nearest_school_dist, y = higher_ed_ratio)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  labs(title = \"Higher Education vs Distance to Nearest School\",\n       x = \"Distance to Nearest School\",\n       y = \"Higher Education Ratio\") +\n  theme_minimal()\n\np3 &lt;- ggplot(analysis_data, aes(x = senior_ratio, y = higher_ed_ratio)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  labs(title = \"Higher Education vs Senior School Ratio\",\n       x = \"Senior School Ratio\",\n       y = \"Higher Education Ratio\") +\n  theme_minimal()\n\n# Arrange plots\ngrid.arrange(p1, p2, p3, ncol = 2)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n# Fit multiple regression model\nmodel &lt;- lm(higher_ed_ratio ~ school_density + nearest_school_dist + \n            elementary_ratio + junior_ratio + senior_ratio + public_ratio,\n            data = analysis_data)\n\n# Model diagnostics\nsummary(model)\n\n\nCall:\nlm(formula = higher_ed_ratio ~ school_density + nearest_school_dist + \n    elementary_ratio + junior_ratio + senior_ratio + public_ratio, \n    data = analysis_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.14810 -0.05414 -0.00542  0.03036  0.32091 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(&gt;|t|)  \n(Intercept)          2.971e-01  1.313e-01   2.263   0.0245 *\nschool_density       7.974e-04  4.377e-04   1.822   0.0696 .\nnearest_school_dist  1.361e-05  3.077e-05   0.442   0.6587  \nelementary_ratio    -1.444e-01  1.315e-01  -1.099   0.2730  \njunior_ratio        -1.464e-01  1.407e-01  -1.041   0.2990  \nsenior_ratio        -2.078e-01  1.353e-01  -1.535   0.1259  \npublic_ratio         1.610e-03  2.695e-02   0.060   0.9524  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.076 on 252 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.0269,    Adjusted R-squared:  0.003728 \nF-statistic: 1.161 on 6 and 252 DF,  p-value: 0.3278\n\nols_vif_tol(model)\n\n            Variables  Tolerance       VIF\n1      school_density 0.95295384  1.049369\n2 nearest_school_dist 0.97602641  1.024562\n3    elementary_ratio 0.05078453 19.691034\n4        junior_ratio 0.12818234  7.801387\n5        senior_ratio 0.08188472 12.212291\n6        public_ratio 0.76809224  1.301927\n\n\n\n\n5.1.3 Analysis\n\nThe very low R-squared (0.02692) and adjusted R-squared (0.003747) suggest that:\n\nThe global model explains very little of the variation in higher education ratios\nGWR might be more appropriate since it can capture local variations that this global model misses\n\nVariable selection for GWR:\n\nOnly school_density shows marginal significance (p = 0.0697)\nnearest_school_dist has very low significance (p = 0.6549)\nThe ratio variables all have relatively high p-values\n\n\nWe will now compare simple and complex models."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#its-time-for-gwr",
    "href": "takehome/ex3/takehome3.html#its-time-for-gwr",
    "title": "Takehome 3",
    "section": "6.0 It’s time for GWR",
    "text": "6.0 It’s time for GWR\nOur analysis employs both fixed and adaptive bandwidth GWR to examine how school density affects higher education attainment across Jakarta. This dual approach provides complementary insights:\n\nSpatial Variation in Relationships:\n\n\nFixed bandwidth GWR reveals the base relationship between school accessibility and education levels at a consistent spatial scale\nAdaptive bandwidth GWR accounts for Jakarta’s varying urban density, providing more localized insights in densely populated areas\n\n\nPolicy Implications:\n\n\nAreas with strong positive relationships between school density and education levels might benefit most from new schools\nRegions where the relationship is weak may need different interventions beyond improving school accessibility\nLocal context matters: what works in one district may not work in another.\n\nWe thus embark being using some centroids to calculate logical centers for regions in order to extrapolate our relevant data to build both models. Afterwards, we can compare them in order to derive some insights on how the factors have implications on education levels, both locally and globally.\n\n# First identify complete cases\ncomplete_indices &lt;- which(!is.na(clustering_data$senior_ratio))\n\n# Calculate centroids first, explicitly handling the warning\ncentroids &lt;- st_centroid(batas_edu_levels, of_largest_polygon = TRUE)\n\nWarning: st_centroid assumes attributes are constant over geometries\n\ncentroid_coords &lt;- st_coordinates(centroids)[complete_indices,]\n\n# Create spatial dataframes with modern CRS syntax\nsimple_gwr_data &lt;- SpatialPointsDataFrame(\n  coords = centroid_coords,\n  data = data.frame(\n    higher_ed_ratio = batas_edu_levels$higher_ed_ratio[complete_indices],\n    school_density = clustering_data$school_density[complete_indices]\n  ),\n  proj4string = CRS(\"EPSG:32748\")  # Modern syntax for UTM Zone 48S\n)\n\nselected_gwr_data &lt;- SpatialPointsDataFrame(\n  coords = centroid_coords,\n  data = data.frame(\n    higher_ed_ratio = batas_edu_levels$higher_ed_ratio[complete_indices],\n    school_density = clustering_data$school_density[complete_indices],\n    senior_ratio = clustering_data$senior_ratio[complete_indices]\n  ),\n  proj4string = CRS(\"EPSG:32748\")  # Modern syntax for UTM Zone 48S\n)\n\n# Since the data is already in UTM Zone 48S, we don't need to transform it\nsimple_gwr_data_proj &lt;- simple_gwr_data\nselected_gwr_data_proj &lt;- selected_gwr_data\n\nCool. Let’s now do other variables.\n\nbw.fixed &lt;- bw.gwr(\n  formula = higher_ed_ratio ~ school_density, \n  data = simple_gwr_data_proj,\n  approach = \"CV\",\n  kernel = \"gaussian\",\n  adaptive = FALSE,\n  longlat = FALSE)\n\nFixed bandwidth: 22400.97 CV score: 1.482623 \nFixed bandwidth: 13847.33 CV score: 1.446493 \nFixed bandwidth: 8560.89 CV score: 1.365928 \nFixed bandwidth: 5293.689 CV score: 1.229182 \nFixed bandwidth: 3274.449 CV score: 1.11576 \nFixed bandwidth: 2026.489 CV score: 1.05054 \nFixed bandwidth: 1255.208 CV score: 1.046343 \nFixed bandwidth: 778.5296 CV score: 1.416962 \nFixed bandwidth: 1549.811 CV score: 1.033807 \nFixed bandwidth: 1731.886 CV score: 1.037553 \nFixed bandwidth: 1437.283 CV score: 1.034906 \nFixed bandwidth: 1619.357 CV score: 1.034602 \nFixed bandwidth: 1506.829 CV score: 1.033832 \n\n# Run fixed bandwidth GWR\ngwr.fixed &lt;- gwr.basic(\n  formula = higher_ed_ratio ~ school_density,\n  data = simple_gwr_data_proj,\n  bw = bw.fixed,\n  kernel = \"gaussian\",\n  adaptive = FALSE,\n  longlat = FALSE)\n\nbw.adaptive &lt;- bw.gwr(\n  formula = higher_ed_ratio ~ school_density,\n  data = simple_gwr_data_proj,\n  approach = \"CV\",\n  kernel = \"gaussian\",\n  adaptive = TRUE,\n  longlat = FALSE)\n\nAdaptive bandwidth: 167 CV score: 1.429762 \nAdaptive bandwidth: 111 CV score: 1.38874 \nAdaptive bandwidth: 75 CV score: 1.341174 \nAdaptive bandwidth: 54 CV score: 1.297753 \nAdaptive bandwidth: 40 CV score: 1.256997 \nAdaptive bandwidth: 32 CV score: 1.229152 \nAdaptive bandwidth: 26 CV score: 1.20383 \nAdaptive bandwidth: 23 CV score: 1.184859 \nAdaptive bandwidth: 20 CV score: 1.168994 \nAdaptive bandwidth: 19 CV score: 1.160711 \nAdaptive bandwidth: 18 CV score: 1.157655 \nAdaptive bandwidth: 17 CV score: 1.152698 \nAdaptive bandwidth: 17 CV score: 1.152698 \n\n# Run adaptive bandwidth GWR\ngwr.adaptive &lt;- gwr.basic(\n  formula = higher_ed_ratio ~ school_density,\n  data = simple_gwr_data_proj,\n  bw = bw.adaptive,\n  kernel = \"gaussian\",\n  adaptive = TRUE,\n  longlat = FALSE)\n\n\n# Convert SDF into sf data.frame\ngwr.sf.fixed &lt;- st_as_sf(gwr.fixed$SDF) %&gt;%\n  st_transform(st_crs(batas_edu_levels))\n\ngwr.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(st_crs(batas_edu_levels))\n\n# Compare models\nmodel_comparison &lt;- data.frame(\n  Model = c(\"Fixed\", \"Adaptive\"),\n  Bandwidth = c(bw.fixed, bw.adaptive),\n  AICc = c(gwr.fixed$GW.diagnostic$AICc,\n           gwr.adaptive$GW.diagnostic$AICc),\n  R2 = c(gwr.fixed$GW.diagnostic$gw.R2,\n         gwr.adaptive$GW.diagnostic$gw.R2),\n  Adj_R2 = c(gwr.fixed$GW.diagnostic$gwR2.adj,\n             gwr.adaptive$GW.diagnostic$gwR2.adj)\n)\n\nprint(\"Model Diagnostics:\")\n\n[1] \"Model Diagnostics:\"\n\nprint(model_comparison)\n\n     Model Bandwidth      AICc        R2    Adj_R2\n1    Fixed  1549.811 -631.6885 0.5947280 0.3526755\n2 Adaptive    17.000 -665.0109 0.3251825 0.2586090\n\n\nAs we can see, our Fixed GWR has a higher R2, vs the adapative. This means in our fixed model the factors used have a higher relevancy to the education level compared to our adaptive model.\nAlthough AICC for selected (we drop accessibility in this case) is lower, it’s more complex than the simple GWR. thus we should probably stick to the simple GWR so it’s easier to compute and interpret.\nBelow are some pretty plots to help us understand the implications of our model(s), as well as a sweet summary.\n\nfixed_r2_map &lt;- tm_shape(batas_edu_levels) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr.sf.fixed) +  \n  tm_dots(col = \"Local_R2\",\n          size = 0.1,\n          border.col = \"gray60\",\n          border.lwd = 1,\n          palette = \"viridis\",\n          title = \"Local R² (Fixed)\") +\n  tm_layout(main.title = \"Fixed Bandwidth GWR\",\n            main.title.size = 1)\n\nadaptive_r2_map &lt;- tm_shape(batas_edu_levels) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          size = 0.1,\n          border.col = \"gray60\",\n          border.lwd = 1,\n          palette = \"viridis\",\n          title = \"Local R² (Adaptive)\") +\n  tm_layout(main.title = \"Adaptive Bandwidth GWR\",\n            main.title.size = 1)\n\ntmap_arrange(fixed_r2_map, adaptive_r2_map, \n            asp=1, ncol=2)\n\n\n\n\n\n\n\n\nHere’s another visualization of the coefficients for the various subdistricts in both models. This will probably be helpful later on for further analysis on a local level.\n\nfixed_coef_map &lt;- tm_shape(batas_edu_levels) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr.sf.fixed) +  \n  tm_dots(col = \"school_density\",\n          size = 0.1,\n          border.col = \"gray60\",\n          border.lwd = 1,\n          palette = \"RdBu\",\n          title = \"Coefficient (Fixed)\") +\n  tm_layout(main.title = \"School Density Effect (Fixed)\",\n            main.title.size = 1)\n\nadaptive_coef_map &lt;- tm_shape(batas_edu_levels) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(gwr.sf.adaptive) +  \n  tm_dots(col = \"school_density\",\n          size = 0.1,\n          border.col = \"gray60\",\n          border.lwd = 1,\n          palette = \"RdBu\",\n          title = \"Coefficient (Adaptive)\") +\n  tm_layout(main.title = \"School Density Effect (Adaptive)\",\n            main.title.size = 1)\n\ntmap_arrange(fixed_coef_map, adaptive_coef_map, \n            asp=1, ncol=2)\n\nVariable(s) \"school_density\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"school_density\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n# Summary of Local R2\ncat(\"\\nLocal R² Summary (Fixed):\\n\")\n\n\nLocal R² Summary (Fixed):\n\nprint(summary(gwr.fixed$SDF$Local_R2))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.1598  0.3613  0.5836  0.5535  0.6912  0.9980 \n\ncat(\"\\nLocal R² Summary (Adaptive):\\n\")\n\n\nLocal R² Summary (Adaptive):\n\nprint(summary(gwr.adaptive$SDF$Local_R2))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-0.1176  0.2020  0.2773  0.2829  0.3805  0.4695 \n\n# Summary of Coefficients\ncat(\"\\nCoefficient Summary (Fixed):\\n\")\n\n\nCoefficient Summary (Fixed):\n\nprint(summary(gwr.fixed$SDF$school_density))\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-5.817e-03 -7.093e-04  1.125e-05  2.957e-04  9.816e-04  5.726e-03 \n\ncat(\"\\nCoefficient Summary (Adaptive):\\n\")\n\n\nCoefficient Summary (Adaptive):\n\nprint(summary(gwr.adaptive$SDF$school_density))\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0012656 -0.0004350  0.0001717  0.0004574  0.0010657  0.0037250 \n\n\nWe’ll now export the data.\n\n# Transform coordinates back to WGS84 for mapping\nsimple_gwr_data_wgs84 &lt;- spTransform(simple_gwr_data_proj, CRS(\"EPSG:4326\"))\n\ngwr_results &lt;- list(\n  # Model results\n  fixed = list(\n    model = gwr.fixed,\n    bandwidth = bw.fixed,\n    local_R2 = gwr.fixed$SDF$Local_R2,\n    coefficients = gwr.fixed$SDF$school_density,\n    diagnostics = gwr.fixed$GW.diagnostic\n  ),\n  \n  adaptive = list(\n    model = gwr.adaptive,\n    bandwidth = bw.adaptive,\n    local_R2 = gwr.adaptive$SDF$Local_R2,\n    coefficients = gwr.adaptive$SDF$school_density,\n    diagnostics = gwr.adaptive$GW.diagnostic\n  ),\n  \n  # Spatial data with both coordinate systems\n  spatial = list(\n    coordinates_utm = coordinates(simple_gwr_data_proj),  # UTM coordinates for analysis\n    coordinates_wgs84 = coordinates(simple_gwr_data_wgs84),  # WGS84 coordinates for mapping\n    batas = st_transform(batas_edu_levels, 4326),  # Transform boundaries to WGS84 too\n    utm_crs = \"EPSG:32748\",\n    wgs84_crs = \"EPSG:4326\"\n  ),\n  \n  # Original data\n  data = list(\n    higher_ed_ratio = simple_gwr_data$higher_ed_ratio,\n    school_density = simple_gwr_data$school_density\n  )\n)\n\n# Save to RDS\nsaveRDS(gwr_results, \"data/rds/gwr_results.rds\")\n\n\n7.0 Local GWR for targeted investment\nWe now move onto focusing on the local R^2. Given the earlier mention of the secondary/primary and also carrying on, senior high+ divide, we would like to know where should policy makers start with in pilot studies for investing more into public schools. Furthermore, we also want them to invest in areas where their money is more effective, so we are looking for higher R2.\nLet’s start by finding our target city in Jakarta.\n\n # 1. Analyze city-level education patterns\ncity_education_summary &lt;- batas_edu_levels %&gt;%\n  st_drop_geometry() %&gt;%  # Remove geometry for grouping\n  group_by(city) %&gt;%\n  summarise(\n    mean_higher_ed = mean(higher_ed_ratio, na.rm = TRUE),\n    population = sum(population, na.rm = TRUE)\n  ) %&gt;%\n  arrange(mean_higher_ed)  # Find city with lowest higher education rates\n\n\ncity_education_summary\n\n# A tibble: 5 × 3\n  city                 mean_higher_ed population\n  &lt;chr&gt;                         &lt;dbl&gt;      &lt;dbl&gt;\n1 Kota Jakarta Utara            0.115    1811898\n2 Kota Jakarta Barat            0.128    2525194\n3 Kota Jakarta Pusat            0.153    1147917\n4 Kota Jakarta Timur            0.159    3169571\n5 Kota Jakarta Selatan          0.211    2328846\n\n\nWe’ll choose Kota Jakarta Utara then! Let’s create some district summaries for this city through some filter() and mutate for local R2.\n\n# Get target city (Jakarta Utara has lowest higher ed ratio)\ntarget_city &lt;- \"Kota Jakarta Utara\"\n\n# 2. First create district level summaries for target city\ntarget_districts &lt;- school_density_analysis %&gt;%\n  filter(city == target_city) %&gt;%\n  # Get GWR results for these districts\n  mutate(\n    local_R2 = gwr.fixed$SDF$Local_R2[1:n()],  # Make sure this matches your district ordering\n    local_coef = gwr.fixed$SDF$school_density[1:n()]\n  )\n\nWe then invent a metric called opportunity score to calculate\n\n# 3. Calculate opportunity scores\nopportunity_districts &lt;- target_districts %&gt;%\n  mutate(\n    # Standardize metrics\n    density_score = scale(senior_high_density),\n    r2_score = scale(local_R2),\n    coef_score = scale(local_coef),\n    \n    # Create composite opportunity score\n    opportunity_score = case_when(\n      !is.na(local_R2) ~ \n        (r2_score * coef_score) * # Model strength\n        (-1 * density_score) * # Room for improvement (negative because lower density = more opportunity)\n        (1 / (1 + senior_high_density)) # Diminishing returns factor\n    ),\n    \n    # Categorize recommendations\n    recommendation = case_when(\n      opportunity_score &gt; quantile(opportunity_score, 0.75, na.rm = TRUE) ~ \"High Priority\",\n      opportunity_score &gt; quantile(opportunity_score, 0.5, na.rm = TRUE) ~ \"Medium Priority\",\n      opportunity_score &gt; quantile(opportunity_score, 0.25, na.rm = TRUE) ~ \"Lower Priority\",\n      TRUE ~ \"Monitor\"\n    )\n  )\n\n\n# 4. Visualize results\nggplot() +\n  geom_sf(data = opportunity_districts, aes(fill = opportunity_score)) +\n  scale_fill_viridis_c(option = \"magma\") +\n  labs(title = paste(\"Opportunity Zones in\", target_city),\n       subtitle = \"Areas with High Potential Return on School Investment\",\n       fill = \"Opportunity\\nScore\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# 5. Create summary table for policymakers\nopportunity_summary &lt;- opportunity_districts %&gt;%\n  st_drop_geometry() %&gt;%\n  select(\n    district,\n    current_density = senior_high_density,\n    local_R2,\n    local_coefficient = local_coef,\n    opportunity_score,\n    recommendation\n  ) %&gt;%\n  arrange(desc(opportunity_score))\n\n# Print top opportunities\nprint(head(opportunity_summary, n = 6))  # Show all districts in Jakarta Utara\n\n# A tibble: 6 × 6\n  district      current_density local_R2 local_coefficient opportunity_score[,1]\n  &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;             &lt;dbl&gt;                 &lt;dbl&gt;\n1 Kec. Pademan…           0.646    0.447         -0.000793                 0.344\n2 Kec. Koja               1.99     0.384         -0.000363                 0.233\n3 Kec. Kelapa …           1.41     0.693         -0.000835                 0.190\n4 Kec. Cilinci…           0.648    0.677         -0.000581                -0.152\n5 Kec. Tanjung…           1.78     0.615         -0.000258                -0.179\n6 Kec. Penjari…           0.764    0.371         -0.000213                -0.494\n# ℹ 1 more variable: recommendation &lt;chr&gt;\n\n\nThus, through some data manipulation, we now have a shortlist of where we should invest in!\n\n# Additional summary statistics\ncat(\"\\nSummary Statistics for\", target_city, \":\\n\")\n\n\nSummary Statistics for Kota Jakarta Utara :\n\nsummary_stats &lt;- opportunity_summary %&gt;%\n  summarise(\n    avg_density = mean(current_density, na.rm = TRUE),\n    avg_R2 = mean(local_R2, na.rm = TRUE),\n    avg_coef = mean(local_coefficient, na.rm = TRUE),\n    districts_high_priority = sum(recommendation == \"High Priority\", na.rm = TRUE),\n    districts_med_priority = sum(recommendation == \"Medium Priority\", na.rm = TRUE)\n  )\nprint(summary_stats)\n\n# A tibble: 1 × 5\n  avg_density avg_R2  avg_coef districts_high_priority districts_med_priority\n        &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;                   &lt;int&gt;                  &lt;int&gt;\n1        1.21  0.531 -0.000507                       2                      1\n\n\n\nopportunity_districts_wgs84 &lt;- st_transform(opportunity_districts, 4326)\n\n# Save opportunity scores with both projections\nopportunity_data &lt;- list(\n  spatial = list(\n    districts_utm = opportunity_districts,\n    districts_wgs84 = opportunity_districts_wgs84,\n    utm_crs = \"EPSG:32748\",\n    wgs84_crs = \"EPSG:4326\"\n  ),\n  summary = opportunity_summary,\n  target_city = target_city,\n  stats = summary_stats\n)\n\nsaveRDS(opportunity_data, \"data/rds/opp_score.rds\")"
  },
  {
    "objectID": "takehome/ex3/takehome3.html#prototyping-ui-design.",
    "href": "takehome/ex3/takehome3.html#prototyping-ui-design.",
    "title": "Takehome 3",
    "section": "8.0 Prototyping UI design.",
    "text": "8.0 Prototyping UI design.\nFor UI design prototyping, these were my guiding questions:\n\nWhat am I measuring?\nWho is it for?\nWhen and how are we looking at it?\n\nLet’s address these questions and how I used them to build some prototypes.\n\n8.1.1 Answering the questions\nGiven that I took on handling the GWR analysis on this app, it was a natural conclusion from our course work to think about using fixed/adaptive bandwidth to build a predictive model, and from there extrapolate insights about the predictiveness of the parameters we’ve chosen.\nBut then, who is it for? Given the nature of the data, my assumption was that we would be building this for potential policymakers in order to choose what regions or subdistricts to look into, as seen in the previous analysis. Thus, we followed the journey of our data to conclude and find some sub districts in Jakarta to focus on when it came to efforts to expanding density of public senior high schools and such, in order to make higher education more accessible and easy with proven results based on the relevancy of density instead of other potential confounding factors, which we have handled through R2 and other metrics.\nThis leads us to our final question: When and how? Since this dashboard is more of a snapshot of data than urgent, LIVE data, I think it is an easy assumption that we can use this as a simple visual dashboard to present our findings, with perhaps some features to download a csv for further analysis. Thus, this is where we start off for our UI design.\n\n\n8.2 Storyboarding for features\nAfter looking at our data and analysis, I came up with 2 possible goals for our dashboard:\n\nGWR tab – the user should be able to:\n\nSee local R^2 and coefficients at a glance\nDownload a csv of the results for verification/use\nChoose between fixed and adaptive bandwidth\nCompare models at a glance\n(Optional) Search through results in the dashboard\n\nAnalysis tab - the user should be able to:\n\nShow opportunity score and other metrics to pinpoint what districts / subdistricts to develop\nLook at statistics for a highlighted district at a glance.\nDownload a csv for results\n(Optional) Search results of csv in dashboard.\n\n\nBased on these, there were some designs drafted:\n  \nIn the end, I ended up with a variant of Prototype 1 and 3 as #2 might squeeze the navigational elements too close when integrating with my teams’ components. I liked the side bar on 3, but I also liked the comfortable UI toggle from Prototype 1 next to the downloads which lets policy makers easily download the data after tabbing through the visualizations.\nThus #1 and #3 birthed my final prototype, which fulfilled all the points mentioned above in my “Users’ wants” list –\n\n\n\nFinal UI\n\n\nBelow is an annotation of how this final design, inspired from the previous designs, neatly fulfils the user’s wants.\n\n\n\nAnnotated final UI\n\n\nThus, we now settle on this final UI which helps us efficiently and quickly communicate insights to policy makers, and delivers the analysis and data we’ve done so far through this simple dashboard.\n\n\n8.3 UI Design conclusion\nOverall, this UI Design prototyping was heavily derived from both prototyping examples in class, as well as prior classes in UI design. This was a great explanation for my user wants checklist: https://www.atlassian.com/agile/project-management/user-stories. By focusing on our potential end user, we can best choose features that ensures that all their potential needs are met by our dashboards and applications."
  },
  {
    "objectID": "takehome/ex3/takehome3.html#improvements-and-followup",
    "href": "takehome/ex3/takehome3.html#improvements-and-followup",
    "title": "Takehome 3",
    "section": "9.0 Improvements and Followup",
    "text": "9.0 Improvements and Followup\nIn my opinion, there might be some followup:\n\nMaybe a link to the original data source with credits?\nSome related research papers so the viewer can understand our inspiration and viewpoint\nMaybe some other prep material so they can use similar datasets and shp files as us so they can replicate our findings.\n\nThis may be followed up in my team’s final product (G1T7)."
  },
  {
    "objectID": "takehome/ex1/takehome1.html",
    "href": "takehome/ex1/takehome1.html",
    "title": "Takehome 1",
    "section": "",
    "text": "install.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/yapho/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\n\nWarning: cannot remove prior installation of package 'maptools'\n\n\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\yapho\\AppData\\Local\\R\\win-library\\4.4\\00LOCK\\maptools\\libs\\x64\\maptools.dll\nto\nC:\\Users\\yapho\\AppData\\Local\\R\\win-library\\4.4\\maptools\\libs\\x64\\maptools.dll:\nPermission denied\n\n\nWarning: restored 'maptools'\n\n\n\nThe downloaded binary packages are in\n    C:\\Users\\yapho\\AppData\\Local\\Temp\\RtmpUz3o2l\\downloaded_packages\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, viridis, classInt, maptools, OpenStreetMap, stars, spdep, prophet, tmaptools, sparr, igraph, ggraph)"
  },
  {
    "objectID": "takehome/ex1/takehome1.html#historical-context",
    "href": "takehome/ex1/takehome1.html#historical-context",
    "title": "Takehome 1",
    "section": "Historical Context",
    "text": "Historical Context\nSince gaining independence from British rule in 1948, Myanmar has grappled with numerous internal conflicts. For decades, the country was under military rule, which ended officially in 2011 with a transition to a quasi-civilian government. However, in February 2021, the military (Tatmadaw) seized power again in a coup, plunging the country back into political turmoil and reigniting many dormant conflicts."
  },
  {
    "objectID": "takehome/ex1/takehome1.html#key-factors-in-myanmars-conflicts",
    "href": "takehome/ex1/takehome1.html#key-factors-in-myanmars-conflicts",
    "title": "Takehome 1",
    "section": "Key Factors in Myanmar’s Conflicts",
    "text": "Key Factors in Myanmar’s Conflicts\nOur analysis of armed conflict in Myanmar focuses on three primary factors that have historically been, and continue to be, major drivers of instability:\n1. Religious Tensions: Myanmar is predominantly Buddhist, but with significant Muslim, Christian, and animist minorities. Religious tensions, particularly between Buddhists and Muslims, have led to violent conflicts, most notably the persecution of the Rohingya Muslim minority in Rakhine State.\n2. Ethnic Tensions: The country’s ethnic diversity has been a source of both cultural richness and conflict. Many ethnic minority groups, particularly in border areas, have long sought greater autonomy or independence from the central government dominated by the Bamar majority. These tensions have resulted in some of the world’s longest-running civil wars.\n3. Drug Trade and Infrastructure Development: Myanmar is part of the Golden Triangle, one of the world’s largest drug-producing regions. The drug trade, particularly methamphetamine and opium, has fueled conflicts and corrupted institutions. Simultaneously, infrastructure development projects, often involving foreign investment, have sometimes exacerbated local tensions over land rights and resource allocation."
  },
  {
    "objectID": "takehome/ex1/takehome1.html#purpose-of-the-analysis",
    "href": "takehome/ex1/takehome1.html#purpose-of-the-analysis",
    "title": "Takehome 1",
    "section": "Purpose of the Analysis",
    "text": "Purpose of the Analysis\nGiven this complex backdrop, our geospatial analysis of armed conflict in Myanmar aims to:\n1. Identify patterns and hotspots of armed conflict.\n2. Examine how these factors interact and potentially exacerbate each other in different regions of the country.\n3. Track changes in conflict patterns over time, particularly in relation to significant political events like the 2021 military coup.\nBy focusing on these aspects, we hope to provide valuable insights that can inform humanitarian responses, contribute to a better understanding of conflict dynamics, and assist in developing more effective strategies for peace-building and development in the region.\nWe first begin by using read_csv to read our aspatial csv data into our sf frame.\n\nacled_sf &lt;- read_csv(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow that we’ve load the sf, let’s check if our boundary for Myanmar works:\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nacled_sf %&gt;%\n  filter(year == 2023 |\n           event_type == \"Political violence\") %&gt;%\n  tm_shape() +\n  tm_dots()\n\n\n\n\n\n\n\n\nWe’ll next use glimpse so we know what aspects of the data we can work around to try to glean more insights about the Myanmar crisis.\n\nglimpse(acled_sf)\n\nRows: 55,574\nColumns: 30\n$ event_id_cnty      &lt;chr&gt; \"MMR56099\", \"MMR56222\", \"MMR56370\", \"MMR56376\", \"MM…\n$ event_date         &lt;date&gt; 2023-12-31, 2023-12-31, 2023-12-31, 2023-12-31, 20…\n$ year               &lt;dbl&gt; 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 202…\n$ time_precision     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      &lt;chr&gt; \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         &lt;chr&gt; \"Explosions/Remote violence\", \"Explosions/Remote vi…\n$ sub_event_type     &lt;chr&gt; \"Shelling/artillery/missile attack\", \"Shelling/arti…\n$ actor1             &lt;chr&gt; \"Military Forces of Myanmar (2021-)\", \"Military For…\n$ assoc_actor_1      &lt;chr&gt; NA, NA, NA, NA, NA, NA, \"Daw Na Column; YGF: Ye Gue…\n$ inter1             &lt;dbl&gt; 1, 1, 3, 6, 1, 1, 3, 1, 2, 1, 1, 2, 2, 1, 1, 3, 3, …\n$ actor2             &lt;chr&gt; NA, \"Civilians (Myanmar)\", \"Military Forces of Myan…\n$ assoc_actor_2      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ inter2             &lt;dbl&gt; 0, 7, 1, 0, 7, 0, 1, 0, 1, 7, 7, 1, 1, 0, 0, 1, 1, …\n$ interaction        &lt;dbl&gt; 10, 17, 13, 60, 17, 10, 13, 10, 12, 17, 17, 12, 12,…\n$ civilian_targeting &lt;chr&gt; NA, \"Civilian targeting\", NA, NA, NA, NA, NA, NA, N…\n$ iso                &lt;dbl&gt; 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             &lt;chr&gt; \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            &lt;chr&gt; \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             &lt;chr&gt; \"Mon\", \"Rakhine\", \"Bago-West\", \"Sagaing\", \"Bago-Wes…\n$ admin2             &lt;chr&gt; \"Mawlamyine\", \"Maungdaw\", \"Thayarwady\", \"Yinmarbin\"…\n$ admin3             &lt;chr&gt; \"Ye\", \"Maungdaw\", \"Nattalin\", \"Salingyi\", \"Nattalin…\n$ location           &lt;chr&gt; \"Aing Shey\", \"Kaing Gyi (NaTaLa)\", \"Kyauk Pyoke\", \"…\n$ geo_precision      &lt;dbl&gt; 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, …\n$ source             &lt;chr&gt; \"Democratic Voice of Burma\", \"Development Media Gro…\n$ source_scale       &lt;chr&gt; \"National\", \"Subnational\", \"National\", \"National\", …\n$ notes              &lt;chr&gt; \"On 31 December 2023, in Aing Shey village (Ye town…\n$ fatalities         &lt;dbl&gt; 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, …\n$ tags               &lt;chr&gt; NA, NA, NA, \"crowd size=no report\", NA, NA, NA, NA,…\n$ timestamp          &lt;dbl&gt; 1704831212, 1704831213, 1704831214, 1704831214, 170…\n$ geometry           &lt;POINT [m]&gt; POINT (393190.2 1690159), POINT (-183852.6 23…\n\n\nFor later analysis, we’ll also be using the regional boundaries as well, so I’ve conveniently placed this chunk below to load our regional boundaries.\nLet’s load our boundary:\n\nmyanmar_boundary_sf &lt;- st_read(dsn = \"data/mmr_polbnda_adm0_250k_mimu_1\", \n                layer = \"mmr_polbnda_adm0_250k_mimu_1\")\n\nReading layer `mmr_polbnda_adm0_250k_mimu_1' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex1\\data\\mmr_polbnda_adm0_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "takehome/ex1/takehome1.html#plotting-armed-events-owin",
    "href": "takehome/ex1/takehome1.html#plotting-armed-events-owin",
    "title": "Takehome 1",
    "section": "Plotting Armed events owin:",
    "text": "Plotting Armed events owin:\n\nplot(armed_q_owin)\n\n\n\n\n\n\n\n\n\nPlotting stkde for quarterly kde\nWe now do spatio-temporal KDE here with st_kde as it’ll provide the baseline for our later spatio-temporal visualizations.\n\nst_kde &lt;- spattemp.density(armed_q_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 45784.57 (spatial)\n  lambda = 0.0047 (temporal)\n\nNo. of observations\n  35606 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [6.782504e-24, 1.543807e-10]\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn my initial run, there were duplicate points. Since ACLED collects from a variety of sources, I have considered the possibility of multiple sources reporting the same event, but for sake of time I have jittered them earlier on. Below, we shall embark on plotting out the graph. Note that I decided on representation as 1-12 since tt only takes in numeric so quarter() from tidyverse would not work well with it…"
  },
  {
    "objectID": "takehome/ex1/takehome1.html#quarterly-kde",
    "href": "takehome/ex1/takehome1.html#quarterly-kde",
    "title": "Takehome 1",
    "section": "Quarterly KDE",
    "text": "Quarterly KDE\nLet’s now move onto our quarterly KDE analysis, now that our kde and st_kde objects are set up in our environments.\n\nkde &lt;- density(armed_q_owin,\n                   sigma=bw.diggle,\n                   edge=TRUE,\n                   kernel=\"gaussian\")\nsummary(kde)\n\nreal-valued pixel image\n128 x 128 pixel array (ny, nx)\nenclosing rectangle: [-210008.6, 724647.6] x [1072026, 3158467] units\ndimensions of each pixel: 7300 x 16300.32 units\nImage is defined on a subset of the rectangular grid\nSubset area = 669515348322.876 square units\nSubset area fraction = 0.343\nPixel values (inside window):\n    range = [-1.363178e-21, 6.712878e-06]\n    integral = 34672\n    mean = 5.178671e-08\n\n\nHere, we plot 3 quarters as a time for a compact side-by-side view of progression of conflict from a spatial standpoint.\n\n# Function to plot 3 quarters\nplot_kde_quarters &lt;- function(start_quarter) {\n  quarters &lt;- start_quarter:(start_quarter + 2)\n  par(mfrow=c(1,3), mar=c(2,2,2,1))\n  \n  for(i in quarters) {\n    plot(kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"KDE (non-spatial) Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Turned ribbon back on for more informative plots\n  }\n  \n  par(mfrow=c(1,1))  # Reset plot layout\n}\n\n\n# Function to plot 3 quarters\nplot_kde_quarters &lt;- function(start_quarter) {\n  quarters &lt;- start_quarter:(start_quarter + 2)\n  par(mfrow=c(1,3), mar=c(2,2,2,1))\n  \n  for(i in quarters) {\n    plot(kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"KDE (non-spatial) Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Turned ribbon back on for more informative plots\n  }\n  \n  par(mfrow=c(1,1))  # Reset plot layout\n}\n\nWe now proceed to plot the non spatial temporal KDEs to visualize the distribution of events without time considered.\n\n# Plot four sets of quarters\nplot_kde_quarters(1)  # Quarters 1, 2, 3\n\n\n\n\n\n\n\n\n\nplot_kde_quarters(4)  # Quarters 4,5,6\n\n\n\n\n\n\n\n\n\nplot_kde_quarters(7)  # Quarters 7,8,9\n\n\n\n\n\n\n\n\n\nplot_kde_quarters(10) # Quarters 10,11,12\n\n\n\n\n\n\n\n\nAs we can see, there are some pin points of conflict in the central regions and south region of Myanmar, but nothing really conclusive. Thus, we fall back onto our spatio-temporal KDE for detailed analysis of the conflict. Let’s dive in!"
  },
  {
    "objectID": "takehome/ex1/takehome1.html#quarterly-spatiotemporal-kde",
    "href": "takehome/ex1/takehome1.html#quarterly-spatiotemporal-kde",
    "title": "Takehome 1",
    "section": "Quarterly spatiotemporal KDE",
    "text": "Quarterly spatiotemporal KDE\nThis function ahead will help us chunk down and plot 3 side-by-side quarters:\n\n# Function to plot 3 quarters\nplot_quarters &lt;- function(start_quarter) {\n  quarters &lt;- start_quarter:(start_quarter + 2)\n  par(mfrow=c(1,3), mar=c(2,2,2,1))\n  \n  for(i in quarters) {\n    plot(st_kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"KDE Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Turned ribbon back on for more informative plots\n  }\n  \n  par(mfrow=c(1,1))  # Reset plot layout\n}\n\n\n# Plot four sets of quarters\nplot_quarters(1)  # Quarters 1, 2, 3\n\n\n\n\n\n\n\n\n\nplot_quarters(4)  # Quarters 4, 5, 6\n\n\n\n\n\n\n\n\n\nplot_quarters(7)  # Quarters 7, 8, 9\n\n\n\n\n\n\n\n\n\nplot_quarters(10)  # Quarters 10, 11, 12\n\n\n\n\n\n\n\n\nWow! It’s now much clearer that our thesis of the hotspots being central and maybe south regions of Myanmar looks more viable now. Based on the charts, we can actually point out some interesting trends:\n\nThere’s been a large hotspot for conflict in central Vietnam, but there has been a sudden migration and flare up in conflict in 2023 Q4, spreading from Central Regions to the east too.\nFrom 2023 Q1 onwards, the conflict really seems to have died down in the south region of Myanmar, with the exception of the sudden outburst again in 2023 Q4.\n\nPeeking outside of our data, we can see that this is probably linked to Operation 1027:\nhttps://thediplomat.com/2023/10/operation-1027-a-turning-point-for-myanmars-resistance-struggle/\n\n\n\n\n\n\nBut what is Operation 1027?\n\n\n\nOperation 1027 is an ongoing military offensive launched on October 27, 2023, by the Three Brotherhood Alliance (3BTA), which includes the Arakan Army (AA), Myanmar National Democratic Alliance Army (MNDAA), and Ta’ang National Liberation Army (TNLA). The operation targets the State Administration Council (SAC), Myanmar’s ruling military junta, and aims to capture strategic locations in northern Shan State, near the Myanmar-China border.\n\n\n\n# now let's animate this\nif (!requireNamespace(\"animation\", quietly = TRUE)) install.packages(\"animation\")\nlibrary(animation)\n\nplot_quarters_gif &lt;- function(output_file = \"kde_plot_animation.gif\") {\n  # Set up the animation\n  saveGIF({\n    # Loop through 12 quarters\n    for (q in 1:12) {\n      # Plot single quarter\n      plot(st_kde, q, \n           override.par = FALSE, \n           fix.range = TRUE, \n           main = paste(\"KDE Q\", q, \"(\", floor((q-1)/4 + 2021), \"Q\", (q-1) %% 4 + 1, \")\"),\n           ribbon = TRUE)\n    }\n  }, movie.name = output_file, interval = 0.5, ani.width = 600, ani.height = 400, loop = TRUE)\n  \n  # Return the path to the created GIF\n  return(output_file)\n}\n\n\ngif_path &lt;- plot_quarters_gif()\n\nOutput at: kde_plot_animation.gif\n\n# print(paste(\"GIF created at:\", gif_path))\n\n\nknitr::include_graphics(\"kde_plot_animation.gif\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs we can see, it seems like above Mandalay and below Sagaing there seems to be a hotspot of armed conflict events, with some initial conflict in Yangon in the earlier quarters. However, there seems to be a flare up in the conflict in the last quarter we have in the dataset. We should now dig deeper with 2nd order analysis in the highlighted areas. We’ll look at Mandalay as it’s the primary region of the conflict."
  },
  {
    "objectID": "takehome/ex1/takehome1.html#second-order-analysis",
    "href": "takehome/ex1/takehome1.html#second-order-analysis",
    "title": "Takehome 1",
    "section": "Second order analysis",
    "text": "Second order analysis\nWe’ll load the regional shp file now and create an owin for it.\n\nregional_sf &lt;- st_read(dsn = \"data/regional\", \n                layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex1\\data\\regional' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nplot(regional_sf)\n\n\n\n\n\n\n\n\n\n# Transform Myanmar boundary to match ACLED data CRS\nregional_sf &lt;- st_transform(regional_sf , st_crs(acled_sf))\n\nprint(st_crs(regional_sf ))\n\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n\n\n\n# Create window for ppp objects\nreg_owin &lt;- as.owin(regional_sf)\n\n\n# Redefine the window of the jittered ppp object\narmed_r_owin &lt;- acled_q_ppp_jit[reg_owin]\n\n\nconflict_r_sf &lt;- st_as_sf(as.data.frame(acled_q_ppp_jit), coords = c(\"x\", \"y\"), crs = st_crs(regional_sf))\n\n# Create the plot\nggplot() +\n  geom_sf(data = regional_sf, aes(fill = ST), alpha = 0.5) +  # Use ST or any other column for filling\n  geom_sf(data = conflict_r_sf, color = \"black\", size = 0.5, alpha = 0.6) +\n  theme_minimal() +\n  labs(title = \"Armed Conflicts in Myanmar\",\n       fill = \"State/Region\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nRecalling our hotspot analysis, let’s find the hottest region.\n\n\n\n\n\n\nNote on commented out blocks\n\n\n\nFeel free to uncomment the below chunk! For the sake of not exploding my github repo, I’ve decided to cull memory usage by not running the below chunk, but if you run it, you should probably also see that it is centered by Mandalay :)\n\n\n\n# Calculate the centroid of all conflict points\n# conflict_center &lt;- st_centroid(st_union(conflict_r_sf))\n\n# Convert the centroid to an sf object\n# conflict_center_sf &lt;- st_sf(geometry = conflict_center)\n\n# Ensure both objects have the same CRS\n# conflict_center_sf &lt;- st_transform(conflict_center_sf, st_crs(regional_sf))\n\n# Perform a spatial join to find which region contains the center point\n# center_region &lt;- st_join(conflict_center_sf, regional_sf)\n\n# Extract the region name (assuming the region column is named 'ST' as in your previous code)\n# region_name &lt;- center_region$ST\n\n# Print the coordinates\n# print(paste(\"The center of the conflict points is in the region:\", region_name))\n\n\n# print(paste(\"The center of the conflict points is in the region:\", region_name)\n \n \n    #      X       Y\n# [1,] 190741 2294623\n# [1] \"The center of the conflict points is in the region: Mandalay\"\n\n\nMandalay analysis\nWe’ll take a look at Mandalay here since we saw it as “hot” in our initial analysis.\n\n# 1. Subset the Mandalay region\nMandalay_sf &lt;- regional_sf[regional_sf$ST == \"Mandalay\", ]\n\n# 2. Create a window for Mandalay\nMandalay_owin &lt;- as.owin(Mandalay_sf)\n\n# 3. Subset the point pattern to Mandalay\nMandalay_ppp &lt;- acled_q_ppp_jit[Mandalay_owin]\n\n\nsummary(Mandalay_ppp)\n\nMarked planar point pattern:  3064 points\nAverage intensity 9.884318e-08 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   6.000   6.628  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5914 vertices\nenclosing rectangle: [66291.97, 282396.46] x [2234807.4, 2622191.5] units\n                     (216100 x 387400 units)\nWindow area = 30998600000 square units\nFraction of frame area: 0.37\n\n\nWe’ll convert to km here using rescale, since previously, using the base unit (metres) had issues with plotting the second order functions.\n\nMandalay_ppp_km &lt;- rescale(Mandalay_ppp, 1000, \"km\")\n\n\nplot(Mandalay_ppp_km)\n\n\n\n\n\n\n\n\nWe’ll first start by using the L function:\n\n\n\n\n\n\nL-function:\n\n\n\nThe L function, a variant of Ripley’s K function, examines spatial dependence over a range of distances. It measures the number of points within increasing radii from each point, providing insight into patterns at multiple scales simultaneously.\n\n\n\nL_mw = Lest(Mandalay_ppp_km, correction = \"Ripley\")\nplot(L_mw, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n# L_mw.csr &lt;- envelope(Mandalay_ppp_km, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\n\n# plot(L_mw.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\nSince our function fell outside our envelope, this means there’s a significant deviation from the Complete Spatial Randomness (CSR) at various distance scales, providing significant evidence of clustering at those distances. Let’s confirm this by backing it up with the G-function:\n\n\n\n\n\n\nG function\n\n\n\nThe G function analyzes the distribution of distances to the nearest neighbor for each point in a spatial pattern. It focuses on first-order spatial effects, primarily capturing local, small-scale patterns.\n\n\n\nG_mw.csr &lt;- envelope(Mandalay_ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(G_mw.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nSince our observed G function falls within the envelope, it suggests that the nearest neighbor distances in the observed pattern do not significantly differ from what would be expected under CSR at the local, first-order level.\nHmmm… Although the G-function is within our expected envelope, however, our L function is not. What does this mean? I think a reasonable take is that:\n\nAt the very local scale (nearest neighbors), conflicts appear to be randomly distributed. This suggests no immediate spatial dependency between individual conflict events.\n\n\n\nHowever, at larger scales, there is significant clustering of conflicts. This indicates that while individual events might not be directly influencing each other’s locations, there are broader factors creating areas of higher conflict density.\n\n\n\nThis pattern could be explained by the presence of “hot zones” of conflict activity. Within these zones, individual conflicts might occur in seemingly random locations, but the zones themselves represent areas of heightened risk or activity.\n\nThus, I think the reasonable conclusion here is that even at the region level, perhaps due to the nature of resources/ locations being held by the different actors in the Myanmar civil conflict, the conflicts are “grouped” in hotspots, but within those hotspots, the reported location can vary, which suggests a structure to how either conflicts are reported in the region, or by what locations are important within a region, especially in a hotspot region like the Mandalay region."
  },
  {
    "objectID": "takehome/ex1/takehome1.html#acknowledgementsreferences",
    "href": "takehome/ex1/takehome1.html#acknowledgementsreferences",
    "title": "Takehome 1",
    "section": "Acknowledgements/references",
    "text": "Acknowledgements/references\n\nClaude.ai https://claude.ai/new"
  },
  {
    "objectID": "exercises/ex7/ex7.html",
    "href": "exercises/ex7/ex7.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "pacman::p_load(BiocManager, rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)\n\nInstalling package into 'C:/Users/yapho/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nWarning: package 'rgdal' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\nWarning in p_install(package, character.only = TRUE, ...):\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'rgdal'\n\n\nWarning in pacman::p_load(BiocManager, rgdal, spdep, tmap, sf, ClustGeo, : Failed to install/load:\nrgdal\n\n\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex7\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n1 Derive penetration rate\nWe thus begin by analysing the penetration rate of devices in Myanmar:\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\n\n\nEDA\nLet’s start with some EDA like boxplots and histograms.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nggplot()\n\n\n\n\n\n\n\n\n\n\n2.1 EDA with Chloropeths\nCombining both data.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n\n\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nWow. Normalisation changed a lot – look at the middle of the map on the right for instance!\n\n\n3.0 Correlation analysis\nLet’s now try out corrplots!\n\n\n\n\n\n\nNote\n\n\n\nA corrplot in R is a graphical display of a correlation matrix, which helps visualize the strength and direction of relationships between multiple variables.\nInterpreting Corrplots:\n\nColor and Size: The color and size of the circles (or other shapes) represent the strength and direction of the correlations. Typically, blue indicates positive correlations, red indicates negative correlations, and the intensity of the color reflects the strength.\nNumbers: If you use the \"number\" method, the actual correlation coefficients are displayed, making it easy to see the exact values.\nPatterns: Look for clusters of high correlations, which might indicate groups of variables that are closely related.\n\n\n\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both.\n\n\n4.0 Hierarchy Cluster Analysis\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nmin-max standardization\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\n\nZ-score standardisation\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\n\nVisualising the standardised clustering variables\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n5.0 Hierachial clustering\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\nWe now look to find the optimal clustering algorithm:\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\n\n6.0 Find optimal cluster\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\n\n\n7.0 Dendrogram interpretation\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nWe now show off some cool heatmap vis :)\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n8.0 Cluster mapping\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n( we retain the 6 as suggested earlier on by optimal cluster count where cluster count != 1)\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n9.0 Have Graph, Will find MST (Min Span Tree)\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\nshan.mst &lt;- mstree(shan.w)\n\nfun fact, if you didn’t know, R uses Prim’s algorithm to construct the MST. If you didn’t know, now you know! Another alternative would be Kruskal’s i suppose.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nwe now plot the pruned tree based off the mst\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n10.0 Cluster Viz through Chloropeth\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n11.0 Cluster-Geo time\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\n\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n13.0 Clustering variable viz\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\nmulti variate time!\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "exercises/ex5/ex5.html",
    "href": "exercises/ex5/ex5.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "exercises/ex5/ex5.html#visualizing-regional-development-indicator",
    "href": "exercises/ex5/ex5.html#visualizing-regional-development-indicator",
    "title": "Hands-on Exercise 5",
    "section": "Visualizing Regional Development Indicator",
    "text": "Visualizing Regional Development Indicator\n\nbasemap &lt;- tm_shape(hunan_join) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.25)\n\ngdppc &lt;- tm_shape(hunan_join) +\n  tm_fill(\"GDPPC\", \n          breaks = c(0, 20000, 40000, 60000, 80000, 100000),\n          palette = \"YlOrRd\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5)\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "exercises/ex5/ex5.html#computing-contiguity-spatial-weights",
    "href": "exercises/ex5/ex5.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 5",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nThis section focuses on using poly2nb to compute contiguity spatial weights for a study area. This function is used to create a spatial weights matrix based on polygon contiguity. The queen option is used to specify that the spatial weights matrix should be based on queen contiguity.\n\n\n\n\n\n\nNote\n\n\n\nNote:\nRook adjacency refers to neighbors that share a line segment (or border). Queen adjacency refers to neighbors that share a line segment (or border) or a point (or vertex)\n\n\n\nComputing (QUEEN) Contiguity Based Neighbors\n\nwm_q &lt;- poly2nb(hunan, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nhunan_join$County[1]\n\n[1] \"Anxiang\"\n\n\n\nhunan_join$NAME_3[c(2, 3, 4, 57, 85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan_join$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\nCreating (ROOK) Contiguity Based Neighbors\n\nwm_r &lt;- poly2nb(hunan_join, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\nVisualizing Contiguity Weights\n\nlongitude &lt;- map_dbl(hunan_join$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan_join$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\nPlotting Queen Contiguity Weights\n\nplot(hunan_join$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\nPlotting Rook Contiguity Weights\n\nplot(hunan_join$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nPlotting Queen and Rook Contiguity Weights\n\npar(mfrow=c(1,2))\nplot(hunan_join$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan_join$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "exercises/ex5/ex5.html#computing-distance-based-neighbors",
    "href": "exercises/ex5/ex5.html#computing-distance-based-neighbors",
    "title": "Hands-on Exercise 5",
    "section": "Computing Distance Based Neighbors",
    "text": "Computing Distance Based Neighbors\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\nComputing Fixed Distance Weight Matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe average number of links refer to the average number of neighbors for each polygon in the study area. The average number of links for the queen contiguity spatial weights matrix is 5.5, while the average number of links for the rook contiguity spatial weights matrix is 3.5. The average distance between neighboring polygons is 0.5 degrees for the distance-based spatial weights matrix.\n\n# str(wm_d62)\n\n\n# table(hunan_join$County, card(wm_d62))\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\n# table(n_comp$comp.id)\n\n\n\nPlotting Fixed Distance Weight Matrix\n\nplot(hunan_join$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan_join$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan_join$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\nComputing Adaptive Distance Weight Matrix\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\n# str(knn6)\n\n\n\nPlotting Distance Based Neighbors\n\nplot(hunan_join$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "exercises/ex5/ex5.html#weights-based-on-idw",
    "href": "exercises/ex5/ex5.html#weights-based-on-idw",
    "title": "Hands-on Exercise 5",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\n# ids"
  },
  {
    "objectID": "exercises/ex5/ex5.html#row-standardized-spatial-weights-matrix",
    "href": "exercises/ex5/ex5.html#row-standardized-spatial-weights-matrix",
    "title": "Hands-on Exercise 5",
    "section": "Row-standardized Spatial Weights Matrix",
    "text": "Row-standardized Spatial Weights Matrix\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\nSpatial Lag with Row-standardized Weights\n\n\n\n\n\n\nNote\n\n\n\n**Spatial Lag** refers to the process of incorporating the influence of \\ neighboring observations into the value of a given observation. When using **row-standardized weights**, \\ each observation's neighbors are weighted such that the sum of the weights for each observation equals 1.  \\ ### Key Points: \\ - **Row-standardized weights** ensure that the influence of neighboring observations is averaged. \\ - The spatial lag of an observation is calculated as the weighted average of its neighbors' values. \\ - This method smooths the data by considering the spatial context, which can be particularly useful in spatial econometrics and geographic data analysis. \\  ### Formula: If \\( W \\) is the row-standardized spatial weights matrix and \\( y \\) is the vector of observations, the spatial lag \\( Wy \\) is given by: \\[ (Wy)_i = \\sum_{j} w_{ij} y_j \\] where \\( w_{ij} \\) are the elements of the weights matrix \\( W \\). \\ ### Example: Consider a simple 3x3 grid of observations. After row-standardizing the weights matrix, the spatial lag for each observation is computed as the average of its neighbors' values.\n\n\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan_join$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan_join$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nQ: Can you see the meaning of the Spatial lag?\n\nlag.list &lt;- list(hunan_join$NAME_3, lag.listw(rswm_q, hunan_join$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan_join &lt;- left_join(hunan_join,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\n\nhead(hunan_join)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\ngdppc &lt;- qtm(hunan_join, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan_join, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial Lag as sum of neighboring values\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nlag_sum &lt;- list(hunan_join$NAME_3, lag.listw(b_weights2, hunan_join$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nhunan &lt;- left_join(hunan_join, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial Window Average\n\nwm_qs &lt;- include.self(wm_q)\n\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial Window Sum\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "exercises/ex2/ex2.html",
    "href": "exercises/ex2/ex2.html",
    "title": "Geospatial Exercise 2",
    "section": "",
    "text": "Let’s start off with the preliminary dump of initial loading and exploratory analysis from class:\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n mpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s check the data we’re presented with first…\n\nhead(popdata)\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011\n\n\nChecking the age ranges:\n\nunique_AG_values &lt;- unique(popdata$AG)\nprint(unique_AG_values)\n\n [1] \"0_to_4\"      \"5_to_9\"      \"10_to_14\"    \"15_to_19\"    \"20_to_24\"   \n [6] \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"    \"45_to_49\"   \n[11] \"50_to_54\"    \"55_to_59\"    \"60_to_64\"    \"65_to_69\"    \"70_to_74\"   \n[16] \"75_to_79\"    \"80_to_84\"    \"85_to_89\"    \"90_and_over\"\n\n\nNow let’s check if the slicing is correct:\n\nold_popdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12]))\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(old_popdata2020)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_over\" \"YOUNG\"      \n\n\nHmm… looks off. Let’s adjust:\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[14])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+\nrowSums(.[15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThis is where we shall diverge from the ctrl+c ctrl+v exercise – let’s experiment around with different numbers of classes and maybe different classification methods.\n\n# 2 classes\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n# 10?\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nAs we can see, we have one district is that is heavily outlier! Let’s see what district it is:\n\ntop_5_outliers &lt;- mpsz_pop2020 %&gt;%\n  arrange(desc(DEPENDENCY)) %&gt;%\n  slice(1:5)\n\nprint(top_5_outliers)\n\nSimple feature collection with 5 features and 21 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 12386.29 ymin: 30228.47 xmax: 44163.44 ymax: 48103.9\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO                     SUBZONE_N SUBZONE_C CA_IND\n1      229          6                   LOYANG WEST    PRSZ06      N\n2       96          5                  KAMPONG GLAM    RCSZ05      Y\n3       51         11 NATIONAL UNIVERSITY OF S'PORE    QTSZ11      N\n4      155          5                MOUNT PLEASANT    NVSZ05      N\n5      297          1                  LIM CHU KANG    LKSZ01      N\n    PLN_AREA_N PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D\n1    PASIR RIS         PR    EAST REGION       ER 05FD555397CBEE7A 2014-12-05\n2       ROCHOR         RC CENTRAL REGION       CR DCC789993ED54477 2014-12-05\n3   QUEENSTOWN         QT CENTRAL REGION       CR 247B3009E9665A6E 2014-12-05\n4       NOVENA         NV CENTRAL REGION       CR F910FC998DE2CB15 2014-12-05\n5 LIM CHU KANG         LK   NORTH REGION       NR E4489A0861169020 2014-12-05\n    X_ADDR   Y_ADDR SHAPE_Leng SHAPE_Area           PA YOUNG ECONOMY ACTIVE\n1 43294.83 39888.77   6203.002  2114789.5    PASIR RIS     0             10\n2 30934.99 31623.15   1681.627   171334.4       ROCHOR     0             30\n3 21688.92 30930.12   5625.417  1755950.4   QUEENSTOWN   130            100\n4 27515.31 35112.62   7234.111  3142950.1       NOVENA   190            350\n5 15309.82 45819.04  18733.836 17494884.2 LIM CHU KANG    30             50\n  AGED TOTAL DEPENDENCY                       geometry\n1  190   200  19.000000 MULTIPOLYGON (((43756.39 39...\n2   40    70   1.333333 MULTIPOLYGON (((30913.01 31...\n3    0   230   1.300000 MULTIPOLYGON (((22653.1 306...\n4  160   700   1.000000 MULTIPOLYGON (((28297.1 359...\n5   20   100   1.000000 MULTIPOLYGON (((15662.88 48...\n\n\nTurns out it’s Paris Ris!… where the aged heavily outweigh the economically active. But why so? Let’s see…\n\n# Trying to see if the total pop count is an outlier\ntotal_stats &lt;- summary(mpsz_pop2020$TOTAL)\nprint(total_stats)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n     50    3200   11090   17530   26395  131140      92 \n\n\nSeems like it’s skewed by the very low population there compared to the mean/median. Also note that median is quite high – right skewed dataset?\nMoving on! Let’s do one more for fun – trying out the CS student’s favourite for clustering, K-means!\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nFinally, playing around with grid:\n\nmap1 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Quantile\") +\n  tm_borders(alpha = 0.5)\n\nmap2 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"equal\",\n          palette = \"Greens\",\n          title = \"Equal Interval\") +\n  tm_borders(alpha = 0.5)\n\nmap3 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"jenks\",\n          palette = \"Reds\",\n          title = \"Jenks\") +\n  tm_borders(alpha = 0.5)\n\nmap4 &lt;- tm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"sd\",\n          palette = \"Purples\",\n          title = \"Standard Deviation\") +\n  tm_borders(alpha = 0.5)\n\n\ntmap_arrange(map1, map2, map3, map4, ncol = 2)\n\n\n\n\n\n\n\n\nAnd ta-da! We now have some… interesting colour schemes!\nMoving back to your scripted data dump:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1, 1.1, 1.5, 19)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nColourBrewer time!\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\nCartographic Features\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\nMultiple map now!\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "exercises/ex11/ex11.html",
    "href": "exercises/ex11/ex11.html",
    "title": "Hands-on Exercise 11",
    "section": "",
    "text": "We first load our data:\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, Metrics, tidyverse)\nmdata &lt;- read_rds(\"data/model/mdata.rds\")\nset.seed(1234)\nresale_split &lt;- initial_split(mdata, \n                              prop = 6.5/10,)\ntrain_data &lt;- training(resale_split)\ntest_data &lt;- testing(resale_split)\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")"
  },
  {
    "objectID": "exercises/ex11/ex11.html#computing-correlation-matrix",
    "href": "exercises/ex11/ex11.html#computing-correlation-matrix",
    "title": "Hands-on Exercise 11",
    "section": "1.1 Computing Correlation Matrix",
    "text": "1.1 Computing Correlation Matrix\nBefore loading the predictors into a predictive model, it is always a good practice to use correlation matrix to examine if there is sign of multicolinearity.\n\nmdata_nogeo &lt;- mdata %&gt;%\n  st_drop_geometry()\ncorrplot::corrplot(cor(mdata_nogeo[, 2:17]), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")"
  },
  {
    "objectID": "exercises/ex11/ex11.html#retrieving-stored-data",
    "href": "exercises/ex11/ex11.html#retrieving-stored-data",
    "title": "Hands-on Exercise 11",
    "section": "1.2 Retrieving stored data",
    "text": "1.2 Retrieving stored data\n\ntrain_data &lt;- read_rds(\"data/model/train_data.rds\")\ntest_data &lt;- read_rds(\"data/model/test_data.rds\")\n\n\nprice_mlr &lt;- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nsummary(price_mlr)\n\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)              107601.073  10601.261  10.150  &lt; 2e-16 ***\nfloor_area_sqm             2780.698     90.579  30.699  &lt; 2e-16 ***\nstorey_order              14299.298    339.115  42.167  &lt; 2e-16 ***\nremaining_lease_mths        344.490      4.592  75.027  &lt; 2e-16 ***\nPROX_CBD                 -16930.196    201.254 -84.124  &lt; 2e-16 ***\nPROX_ELDERLYCARE         -14441.025    994.867 -14.516  &lt; 2e-16 ***\nPROX_HAWKER              -19265.648   1273.597 -15.127  &lt; 2e-16 ***\nPROX_MRT                 -32564.272   1744.232 -18.670  &lt; 2e-16 ***\nPROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\nPROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\nPROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\nWITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  &lt; 2e-16 ***\nWITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  &lt; 2e-16 ***\nWITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\nWITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61650 on 10320 degrees of freedom\nMultiple R-squared:  0.7373,    Adjusted R-squared:  0.737 \nF-statistic:  2069 on 14 and 10320 DF,  p-value: &lt; 2.2e-16\n\n\n\nwrite_rds(price_mlr, \"data/model/price_mlr.rds\" )"
  },
  {
    "objectID": "exercises/ex11/ex11.html#gwr-predictive-method",
    "href": "exercises/ex11/ex11.html#gwr-predictive-method",
    "title": "Hands-on Exercise 11",
    "section": "1.3 gwr predictive method",
    "text": "1.3 gwr predictive method\nIn this section, you will learn how to calibrate a model to predict HDB resale price by using geographically weighted regression method of GWmodel package\n\ntrain_data_sp &lt;- as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n\n\n\nComputing Adaptive Bandwidth\nThe code chunk below uses bw.gwr() from GWModel to determine the optimal bandwidth to be used.\n\nbw_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\nAdaptive bandwidth: 40 CV score: 6.780447e+12\nFrom the result, using 40 neighbour points will be the optimal bandwidth if adaptive bandwidth is used for this data set.\n\nwrite_rds(bw_adaptive, \"data/rds/bw_adaptive.rds\")\n\n\n\nConstructing Adaptive Bandwidth GWR Model\n\nbw_adaptive &lt;- read_rds(\"data/rds/bw_adaptive.rds\")\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\ngwr_adaptive &lt;- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\n\nwrite_rds(gwr_adaptive, \"data/rds/gwr_adaptive.rds\")\n\n\n\nRetrieve gwr output\n\ngwr_adaptive &lt;- read_rds(\"data/rds/gwr_adaptive.rds\")\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-09 14:27:56.12281 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data_sp, bw = bw_adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 10335\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-205193  -39120   -1930   36545  472355 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)              107601.073  10601.261  10.150  &lt; 2e-16 ***\n   floor_area_sqm             2780.698     90.579  30.699  &lt; 2e-16 ***\n   storey_order              14299.298    339.115  42.167  &lt; 2e-16 ***\n   remaining_lease_mths        344.490      4.592  75.027  &lt; 2e-16 ***\n   PROX_CBD                 -16930.196    201.254 -84.124  &lt; 2e-16 ***\n   PROX_ELDERLYCARE         -14441.025    994.867 -14.516  &lt; 2e-16 ***\n   PROX_HAWKER              -19265.648   1273.597 -15.127  &lt; 2e-16 ***\n   PROX_MRT                 -32564.272   1744.232 -18.670  &lt; 2e-16 ***\n   PROX_PARK                 -5712.625   1483.885  -3.850 0.000119 ***\n   PROX_MALL                -14717.388   2007.818  -7.330 2.47e-13 ***\n   PROX_SUPERMARKET         -26881.938   4189.624  -6.416 1.46e-10 ***\n   WITHIN_350M_KINDERGARTEN   8520.472    632.812  13.464  &lt; 2e-16 ***\n   WITHIN_350M_CHILDCARE     -4510.650    354.015 -12.741  &lt; 2e-16 ***\n   WITHIN_350M_BUS             813.493    222.574   3.655 0.000259 ***\n   WITHIN_1KM_PRISCH         -8010.834    491.512 -16.298  &lt; 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61650 on 10320 degrees of freedom\n   Multiple R-squared: 0.7373\n   Adjusted R-squared: 0.737 \n   F-statistic:  2069 on 14 and 10320 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.922202e+13\n   Sigma(hat): 61610.08\n   AIC:  257320.2\n   AICc:  257320.3\n   BIC:  247249\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -3.2478e+08 -4.7727e+05 -8.3004e+03  5.5025e+05\n   floor_area_sqm           -2.8714e+04  1.4475e+03  2.3011e+03  3.3900e+03\n   storey_order              3.3186e+03  8.5899e+03  1.0826e+04  1.3397e+04\n   remaining_lease_mths     -1.4431e+03  2.6063e+02  3.9048e+02  5.2865e+02\n   PROX_CBD                 -1.0837e+07 -5.7697e+04 -1.3787e+04  2.6552e+04\n   PROX_ELDERLYCARE         -3.2195e+07 -4.0643e+04  1.0562e+04  6.1054e+04\n   PROX_HAWKER              -2.3985e+08 -5.1365e+04  3.0026e+03  6.4287e+04\n   PROX_MRT                 -1.1632e+07 -1.0488e+05 -4.9373e+04  5.1037e+03\n   PROX_PARK                -6.5961e+06 -4.8671e+04 -8.8128e+02  5.3498e+04\n   PROX_MALL                -1.8112e+07 -7.4238e+04 -1.3982e+04  4.9779e+04\n   PROX_SUPERMARKET         -4.5761e+06 -6.3461e+04 -1.7429e+04  3.5616e+04\n   WITHIN_350M_KINDERGARTEN -4.1823e+05 -6.0040e+03  9.0209e+01  4.7127e+03\n   WITHIN_350M_CHILDCARE    -1.0273e+05 -2.2375e+03  2.6668e+02  2.6388e+03\n   WITHIN_350M_BUS          -1.1757e+05 -1.4719e+03  1.1626e+02  1.7584e+03\n   WITHIN_1KM_PRISCH        -6.6465e+05 -5.5959e+03  2.6916e+02  5.7500e+03\n                                  Max.\n   Intercept                1.6493e+08\n   floor_area_sqm           5.0907e+04\n   storey_order             2.9537e+04\n   remaining_lease_mths     1.8119e+03\n   PROX_CBD                 2.2411e+07\n   PROX_ELDERLYCARE         8.2444e+07\n   PROX_HAWKER              5.9654e+06\n   PROX_MRT                 2.0189e+08\n   PROX_PARK                1.5188e+07\n   PROX_MALL                1.0443e+07\n   PROX_SUPERMARKET         3.8330e+06\n   WITHIN_350M_KINDERGARTEN 6.6799e+05\n   WITHIN_350M_CHILDCARE    1.0802e+05\n   WITHIN_350M_BUS          3.7313e+04\n   WITHIN_1KM_PRISCH        5.0231e+05\n   ************************Diagnostic information*************************\n   Number of data points: 10335 \n   Effective number of parameters (2trace(S) - trace(S'S)): 1730.101 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 8604.899 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 238871.9 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 237036.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 238209.1 \n   Residual sum of squares: 4.829191e+12 \n   R-square value:  0.967657 \n   Adjusted R-square value:  0.9611534 \n\n   ***********************************************************************\n   Program stops at: 2024-11-09 14:28:47.818086 \n\n\n\n\nConverting Test Data to SpatialPointsDataFrame\n\ntest_data_sp &lt;- as_Spatial(test_data)\ntest_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 5566 \nextent      : 11597.31, 42623.63, 28287.8, 48669.59  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,         PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       230888,             74,            1,                  546, 1.00583660772922, 3.34897933104965e-07, 0.0474019664161957, 0.0414043955932523, 0.0502664084494264, 0.0907500295577619,                0, 4.55547870890763e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1050000,            138,           14,                 1151,  19.632402730488,     3.30163731686804,   2.83106651960209,   2.13060636038504,   2.41313695915468,   10.6169590126272, 2.26056404492346,     0.79249074802552,     1.53786629004208,                        7,                    16, ... \n\n\n\n\nComputing Adaptive Bandwidth for Test Data\n\ngwr_bw_test_adaptive &lt;- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n\nAdaptive bandwidth: 25 CV score: 4.04299e+12\n\n\nComputing Predictive Values of Test Data\n\ngwr_pred &lt;- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw=40,\n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)"
  },
  {
    "objectID": "exercises/ex11/ex11.html#preparing-coordinates-data",
    "href": "exercises/ex11/ex11.html#preparing-coordinates-data",
    "title": "Hands-on Exercise 11",
    "section": "Preparing Coordinates Data",
    "text": "Preparing Coordinates Data\n\nExtracting Coordinates Data\n\ncoords &lt;- st_coordinates(mdata)\ncoords_train &lt;- st_coordinates(train_data)\ncoords_test &lt;- st_coordinates(test_data)\n\n\ncoords_train &lt;- write_rds(coords_train, \"data/rds/coords_train.rds\" )\ncoords_test &lt;- write_rds(coords_test, \"data/rds/coords_test.rds\" )\n\n\n\nDropping Geometry Field\n\ntrain_data &lt;- train_data %&gt;% \n  st_drop_geometry()"
  },
  {
    "objectID": "exercises/ex11/ex11.html#calibrating-random-forest-model",
    "href": "exercises/ex11/ex11.html#calibrating-random-forest-model",
    "title": "Hands-on Exercise 11",
    "section": "Calibrating Random Forest Model",
    "text": "Calibrating Random Forest Model\n\nrf &lt;- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data)\n\n\nrf\n\nfunction (n, df1, df2, ncp) \n{\n    if (missing(ncp)) \n        .Call(C_rf, n, df1, df2)\n    else (rchisq(n, df1, ncp = ncp)/df1)/(rchisq(n, df2)/df2)\n}\n&lt;bytecode: 0x0000024db2ca2eb8&gt;\n&lt;environment: namespace:stats&gt;\n\n\n\nwrite_rds(rf, \"data/rds/rf.rds\")\n\n\nrf &lt;- read_rds(\"data/rds/rf.rds\")\nrf\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       732448584 \nR squared (OOB):                  0.9493066"
  },
  {
    "objectID": "exercises/ex11/ex11.html#calibrating-geographical-random-forest-model",
    "href": "exercises/ex11/ex11.html#calibrating-geographical-random-forest-model",
    "title": "Hands-on Exercise 11",
    "section": "Calibrating Geographical Random Forest Model",
    "text": "Calibrating Geographical Random Forest Model\nWe will now calibrate a model to predict HDB resale prices using grf() of the SpatialML package.\n\nCalibrating using Train Data\n\ngwRF_adaptive &lt;- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data, \n                     bw=55,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n\n————— Local Model Summary —————\nResiduals OOB:\n Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-262260.7 -12903.0 447.9 564.7 15004.1 326045.2\nResiduals Predicted (Not OOB):\n Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-78659.78 -3523.05 56.10 58.95 3907.08 87026.10\nLocal Variable Importance:\nMean squared error (OOB): 928216564.586 R-squared (OOB) %: 93.575 AIC (OOB): 213435.096 AICc (OOB): 213435.143 Mean squared error Predicted (Not OOB): 73814830.258 R-squared Predicted (Not OOB) %: 99.489 AIC Predicted (Not OOB): 187269.921 AICc Predicted (Not OOB): 187269.967\nCalculation time (in seconds): 20.3795\n\nwrite_rds(gwRF_adaptive, \"data/rds/gwRF_adaptive.rds\")\n\n\ngwRF_adaptive &lt;- read_rds(\"data/rds/gwRF_adaptive.rds\")\n\n\n\nPredicting using Test Data\nFirst, we need to prepare the test data.\n\ntest_data &lt;- cbind(test_data, coords_test) %&gt;%\n  st_drop_geometry()\n\nNext, we call the predict.grf() function to predict the HDB resale prices using the test data.\n\ngwRF_pred &lt;- predict.grf(gwRF_adaptive, \n                           test_data, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n\n\nGRF_pred &lt;- write_rds(gwRF_pred, \"data/rds/GRF_pred.rds\")\n\n\n\nConverting Predicted Output to Data Frame\n\nGRF_pred &lt;- read_rds(\"data/rds/GRF_pred.rds\")\nGRF_pred_df &lt;- as.data.frame(GRF_pred)\n\n\ntest_data_p &lt;- cbind(test_data, GRF_pred_df)\n\n\nwrite_rds(test_data_p, \"data/rds/test_data_p.rds\")\n\n\n\nCalculating Root Mean Squared Error (RMSE)\nThe root mean squared error refers to the square root of the average of the squared differences between the predicted and actual values. It is a measure of the accuracy of the model.\n\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n\n[1] 27286.41\n\n\n\n\nVisualizing Predicted Values\nWe can use a scatterplot to visualize the predicted values against the actual resale prices.\n\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n\n\n\n\n\n\n\n\nFrom the plot above, we observe that the predicted values are close to the diagonal lines, which indicates that the model is accurate. The scatter plot can also be used to detect the presence of outliers in the model."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Hong Xian’s IS415 Geospatial Analytics and Applications portfolio",
    "section": "",
    "text": "# About This Portfolio\nWelcome to my IS415 Geospatial Analytics and Applications portfolio! This Quarto page showcases my journey and projects in the field of geospatial analytics."
  },
  {
    "objectID": "about.html#what-youll-find-here",
    "href": "about.html#what-youll-find-here",
    "title": "Hong Xian’s IS415 Geospatial Analytics and Applications portfolio",
    "section": "What You’ll Find Here",
    "text": "What You’ll Find Here\n\nCourse Projects: A collection of hands-on projects completed during the IS415 course.\nTechnical Skills: Demonstrations of various geospatial analysis techniques and tools.\nPersonal Insights: My reflections on learning geospatial analytics and its applications.\n\nI hope this portfolio provides insight into my growth and capabilities in geospatial analytics. Feel free to explore the projects and reach out if you have any questions!"
  },
  {
    "objectID": "In-Class_Ex/ICE-6/ice6.html",
    "href": "In-Class_Ex/ICE-6/ice6.html",
    "title": "In Class Exercise 6",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-Class_Ex/ICE-6/ice6.html#getting-started",
    "href": "In-Class_Ex/ICE-6/ice6.html#getting-started",
    "title": "In Class Exercise 6",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)"
  },
  {
    "objectID": "In-Class_Ex/ICE-6/ice6.html#import-geospatial-data",
    "href": "In-Class_Ex/ICE-6/ice6.html#import-geospatial-data",
    "title": "In Class Exercise 6",
    "section": "Import Geospatial Data",
    "text": "Import Geospatial Data\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-6\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 0.8,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-Class_Ex/ICE-6/ice6.html#global-measures-of-spatial-association",
    "href": "In-Class_Ex/ICE-6/ice6.html#global-measures-of-spatial-association",
    "title": "In Class Exercise 6",
    "section": "Global Measures of Spatial Association",
    "text": "Global Measures of Spatial Association\n\nDeriving Queen’s Contiguity Weights\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1) \n\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\nGlobal Moran’s I\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\n\nPerforming Global Moran’s I Test\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nPerofrming Global Moran’s I Permutation Test\n\nset.seed(42)\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "In-Class_Ex/ICE-6/ice6.html#local-measures-of-spatial-association",
    "href": "In-Class_Ex/ICE-6/ice6.html#local-measures-of-spatial-association",
    "title": "In Class Exercise 6",
    "section": "Local Measures of Spatial Association",
    "text": "Local Measures of Spatial Association\n\nLocal Moran’s I\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\n\nVisualizing Local Moran’s I\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\nVisualizing p-value of Local Moran’s I\n\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\n\n\n\n\n\n\n\n\n\nVisualizing Local Moran’s I and p-value\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\nVisualizing LISA Map\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-Class_Ex/ICE-6/ice6.html#hotspot-analysis",
    "href": "In-Class_Ex/ICE-6/ice6.html#hotspot-analysis",
    "title": "In Class Exercise 6",
    "section": "Hotspot Analysis",
    "text": "Hotspot Analysis\n\nComputing Local Gi* Statistics\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0112 0.00000671  0.0972 9.23e-1  0.66         0.33    1.18 \n 2 -0.333  Low     0.0115 0.00000836 -0.358  7.20e-1  0.88         0.44    0.742\n 3  0.281  High    0.0125 0.00000952 -0.0940 9.25e-1  0.88         0.44    0.858\n 4  0.411  High    0.0118 0.00000880  0.278  7.81e-1  0.76         0.38    0.785\n 5  0.387  High    0.0118 0.00000971  0.241  8.10e-1  0.62         0.31    1.33 \n 6 -0.368  High    0.0114 0.00000540 -0.432  6.66e-1  0.84         0.42    0.414\n 7  3.56   High    0.0157 0.00000999  2.06   3.94e-2  0.06         0.03    0.809\n 8  2.52   High    0.0135 0.00000444  1.78   7.46e-2  0.12         0.06    0.593\n 9  4.56   High    0.0141 0.00000433  4.25   2.10e-5  0.02         0.01    0.534\n10  1.16   Low     0.0110 0.00000438  1.41   1.59e-1  0.2          0.1     0.683\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\n\nVisualizing Gi*\n\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_legend(legend.text.size = 0.8)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\nVisualising p-value of HCSA\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nVisuaising Local HCSA\n\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\nVisualising HCSA Areas\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-Class_Ex/ICE-4/ice4.html",
    "href": "In-Class_Ex/ICE-4/ice4.html",
    "title": "Exercise 4",
    "section": "",
    "text": "pacman::p_load(sf, raster, spatstat, tmap, tidyverse, sparr)\nkbb &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\")\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nkbb_sf &lt;- st_read(dsn = 'data/rawdata', layer = \"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs = 32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-4\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n# Step 2: Create owin object from KBB boundary\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\nclass(kbb_owin)\n\n[1] \"owin\"\nfire_sf &lt;- read_csv(\"data/rawdata/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs=4326) %&gt;%\n  st_transform(crs = 32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nfire_sf &lt;- fire_sf %&gt;%\n  mutate(DayOfYear = yday(acq_date)) %&gt;%\n  mutate(Month_num = month(acq_date)) %&gt;%\n  mutate(Month_fac = month(acq_date, label = TRUE, abbr = FALSE))\nfire_sf\n\nSimple feature collection with 741 features and 16 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 521564.1 ymin: 9658137 xmax: 695791 ymax: 9828767\nProjected CRS: WGS 84 / UTM zone 48S\n# A tibble: 741 × 17\n   brightness  scan track acq_date   acq_time satellite instrument confidence\n *      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt;        &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;\n 1       312.   1.3   1.1 2023-01-10      629 Aqua      MODIS              67\n 2       314.   1.2   1.1 2023-01-10      629 Aqua      MODIS              70\n 3       315.   1.2   1.1 2023-01-10      629 Aqua      MODIS              71\n 4       309.   1.2   1.1 2023-01-10      629 Aqua      MODIS              54\n 5       308.   1.2   1.1 2023-01-10      629 Aqua      MODIS              33\n 6       322.   1.3   1.1 2023-01-10      629 Aqua      MODIS              72\n 7       318.   1.2   1.1 2023-01-10      629 Aqua      MODIS              71\n 8       318.   1.2   1.1 2023-01-10      629 Aqua      MODIS              75\n 9       327.   2     1.4 2023-01-12      616 Aqua      MODIS              73\n10       321.   2     1.4 2023-01-12      616 Aqua      MODIS              75\n# ℹ 731 more rows\n# ℹ 9 more variables: version &lt;dbl&gt;, bright_t31 &lt;dbl&gt;, frp &lt;dbl&gt;,\n#   daynight &lt;chr&gt;, type &lt;dbl&gt;, geometry &lt;POINT [m]&gt;, DayOfYear &lt;dbl&gt;,\n#   Month_num &lt;dbl&gt;, Month_fac &lt;ord&gt;\ntm_shape(kbb_sf) +\n  tm_polygons() +\ntm_shape(fire_sf) +\n  tm_dots()\nby month\ntm_shape(kbb_sf) + tm_polygons() +tm_shape(fire_sf) + tm_dots(size=0.1) + tm_facets(by = \"Month_fac\", free.coords=FALSE, drop.units = TRUE)\nfire_month &lt;- fire_sf %&gt;% \n  select(Month_num)\nfire_month_ppp &lt;- as.ppp(fire_month)\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nfire_month_owin\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\ntims &lt;- c(7,8,9,10,11,12)\npar(mfcol = c(2,3))\nfor(i in tims){\n  plot(st_kde, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main = paste(\"KDE at month\", i))\n}"
  },
  {
    "objectID": "In-Class_Ex/ICE-4/ice4.html#create-daily-ppp-object",
    "href": "In-Class_Ex/ICE-4/ice4.html#create-daily-ppp-object",
    "title": "Exercise 4",
    "section": "Create daily ppp object",
    "text": "Create daily ppp object\n\nfire_yday_ppp &lt;- fire_sf %&gt;%\n  select(DayOfYear) %&gt;%\n  as.ppp()\n\n\nfire_yday_owin &lt;- fire_yday_ppp[kbb_owin]\nsummary(fire_yday_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   10.0   213.0   258.0   245.9   287.0   352.0 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nkde_yday &lt;- spattemp.density(fire_yday_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(kde_yday)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 6.3198 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [10, 352]\n\nEvaluation\n  128 x 128 x 343 trivariate lattice\n  Density range: [3.959516e-27, 2.751287e-12]"
  },
  {
    "objectID": "In-Class_Ex/ICE-2/ice2.html",
    "href": "In-Class_Ex/ICE-2/ice2.html",
    "title": "ICE 2",
    "section": "",
    "text": "We start by loading with pacman our usual packages:\n\npacman::p_load(sf, tidyverse, tmap)\n\n\nmpsz14_shp &lt;- st_read(dsn = \"data/\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nmpsz14_kml &lt;- st_write(mpsz14_shp, \"data/MP14_SUBZONE_WEB_PL.kml\", delete_dsn = TRUE)\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-2\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-2\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\") %&gt;% st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-2\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npreschool &lt;- st_read(\"data/PreSchoolsLocation.kml\") %&gt;% st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-2\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nLet’s check the coordinate system using st_crs:\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nrespondent_data &lt;- read_csv(\"data/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npopdata2023 &lt;- respondent_data %&gt;% \n  group_by(PA,SZ,AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG,\n              values_from = POP)%&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[14])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+\nrowSums(.[15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nhead(popdata2023)\n\n# A tibble: 6 × 7\n  PA         SZ                    YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n  &lt;chr&gt;      &lt;chr&gt;                 &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1 ANG MO KIO ANG MO KIO TOWN CENT…  1240             2830   890  4960      0.753\n2 ANG MO KIO CHENG SAN              5150            15600  6580 27330      0.752\n3 ANG MO KIO CHONG BOON             4620            14120  7060 25800      0.827\n4 ANG MO KIO KEBUN BAHRU            4320            12400  5640 22360      0.803\n5 ANG MO KIO SEMBAWANG HILLS        1840             3670  1420  6930      0.888\n6 ANG MO KIO SHANGRI-LA             3810             9600  4320 17730      0.847\n\n\nnow for some loads:\n\nst_write(mpsz14_shp, \"data/MP14_SUBZONE_WEB_PL.kml\",delete_dsn = TRUE)\n\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n\n\nmpsz14_kml = st_read('data/MP14_SUBZONE_WEB_PL.kml')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-2\\data\\MP14_SUBZONE_WEB_PL.kml' \n  using driver `KML'\nSimple feature collection with 323 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nquick shp check\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nand now, we join!\n\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp,\n                          by = c(\"SZ\" = \"SUBZONE_N\"))"
  },
  {
    "objectID": "In-Class_Ex/ICE-10/ice10.html",
    "href": "In-Class_Ex/ICE-10/ice10.html",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "Getting started\n\npacman::p_load(olsrr, ggstatsplot, sf, tmap, tidyverse, gtsummary, performance, see, sfdep)\n\n\ncondo_resale &lt;- read.csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\n\ncondo_resale_sf &lt;- read_rds(\"data/rds/condo_resale_sf.rds\")\n\n\nggcorrmat(condo_resale[, 5:23])\n\n\n\n\n\n\n\n\n\ncondo_mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD + LEASEHOLD_99YR, data = condo_resale_sf )\n\n\nsummary(condo_mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD + \n    LEASEHOLD_99YR, data = condo_resale_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3471036  -286903   -22426   239412 12254549 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           543071.4   136210.9   3.987 7.03e-05 ***\nAREA_SQM               12688.7      370.1  34.283  &lt; 2e-16 ***\nAGE                   -24566.0     2766.0  -8.881  &lt; 2e-16 ***\nPROX_CBD              -78122.0     6791.4 -11.503  &lt; 2e-16 ***\nPROX_CHILDCARE       -333219.0   111020.3  -3.001 0.002734 ** \nPROX_ELDERLYCARE      170950.0    42110.8   4.060 5.19e-05 ***\nPROX_URA_GROWTH_AREA   38507.6    12523.7   3.075 0.002147 ** \nPROX_HAWKER_MARKET     23801.2    29299.9   0.812 0.416739    \nPROX_KINDERGARTEN     144098.0    82738.7   1.742 0.081795 .  \nPROX_MRT             -322775.9    58528.1  -5.515 4.14e-08 ***\nPROX_PARK             564487.9    66563.0   8.481  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      186170.5    65515.2   2.842 0.004553 ** \nPROX_TOP_PRIMARY_SCH    -477.1    20598.0  -0.023 0.981525    \nPROX_SHOPPING_MALL   -207721.5    42855.5  -4.847 1.39e-06 ***\nPROX_SUPERMARKET      -48074.7    77145.3  -0.623 0.533273    \nPROX_BUS_STOP         675755.0   138552.0   4.877 1.20e-06 ***\nNO_Of_UNITS             -216.2       90.3  -2.394 0.016797 *  \nFAMILY_FRIENDLY       142128.3    47055.1   3.020 0.002569 ** \nFREEHOLD              300646.5    77296.5   3.890 0.000105 ***\nLEASEHOLD_99YR        -77137.4    77570.9  -0.994 0.320192    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1416 degrees of freedom\nMultiple R-squared:  0.652, Adjusted R-squared:  0.6474 \nF-statistic: 139.6 on 19 and 1416 DF,  p-value: &lt; 2.2e-16\n\n\n\nols_regress(condo_mlr)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     750537.537 \nR-Squared                    0.652       MSE                571262902261.223 \nAdj. R-Squared               0.647       Coef. Var                    43.160 \nPred R-Squared               0.637       AIC                       42971.173 \nMAE                     412117.987       SBC                       43081.835 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.515738e+15          19        7.977571e+13    139.648    0.0000 \nResidual      8.089083e+14        1416    571262902261.223                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     543071.420    136210.918                   3.987    0.000     275874.535     810268.305 \n            AREA_SQM      12688.669       370.119        0.579     34.283    0.000      11962.627      13414.710 \n                 AGE     -24566.001      2766.041       -0.166     -8.881    0.000     -29991.980     -19140.022 \n            PROX_CBD     -78121.985      6791.377       -0.267    -11.503    0.000     -91444.227     -64799.744 \n      PROX_CHILDCARE    -333219.036    111020.303       -0.087     -3.001    0.003    -551000.984    -115437.089 \n    PROX_ELDERLYCARE     170949.961     42110.748        0.083      4.060    0.000      88343.803     253556.120 \nPROX_URA_GROWTH_AREA      38507.622     12523.661        0.059      3.075    0.002      13940.700      63074.545 \n  PROX_HAWKER_MARKET      23801.197     29299.923        0.019      0.812    0.417     -33674.725      81277.120 \n   PROX_KINDERGARTEN     144097.972     82738.669        0.030      1.742    0.082     -18205.570     306401.514 \n            PROX_MRT    -322775.874     58528.079       -0.123     -5.515    0.000    -437586.937    -207964.811 \n           PROX_PARK     564487.876     66563.011        0.148      8.481    0.000     433915.162     695060.590 \n    PROX_PRIMARY_SCH     186170.524     65515.193        0.072      2.842    0.005      57653.253     314687.795 \nPROX_TOP_PRIMARY_SCH       -477.073     20597.972       -0.001     -0.023    0.982     -40882.894      39928.747 \n  PROX_SHOPPING_MALL    -207721.520     42855.500       -0.109     -4.847    0.000    -291788.613    -123654.427 \n    PROX_SUPERMARKET     -48074.679     77145.257       -0.012     -0.623    0.533    -199405.956     103256.599 \n       PROX_BUS_STOP     675755.044    138551.991        0.133      4.877    0.000     403965.817     947544.272 \n         NO_Of_UNITS       -216.180        90.302       -0.046     -2.394    0.017       -393.320        -39.040 \n     FAMILY_FRIENDLY     142128.272     47055.082        0.056      3.020    0.003      49823.107     234433.438 \n            FREEHOLD     300646.543     77296.529        0.117      3.890    0.000     149018.525     452274.561 \n      LEASEHOLD_99YR     -77137.375     77570.869       -0.030     -0.994    0.320    -229303.551      75028.801 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\nolsrr_condo &lt;- ols_regress(condo_mlr)\n\n\n#view(olsrr_condo)\n\n\ncondo_fw_mlr &lt;- ols_step_forward_p(\n  condo_mlr,\n  p_val = 0.05,\n  details=FALSE\n)\ncondo_fw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Base Model              44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH        42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\nplot(condo_fw_mlr)\n\n\n\n\n\n\n\n\n\ncondo_bw_mlr &lt;- ols_step_backward_p(\n  condo_mlr,\n  p_val = 0.05,\n  details=FALSE\n)\ncondo_bw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Full Model              42971.173    43081.835    38896.546    0.65203    0.64736 \n 1      PROX_TOP_PRIMARY_SCH    42969.173    43074.565    38894.518    0.65203    0.64761 \n 2      PROX_SUPERMARKET        42967.567    43067.689    38892.873    0.65193    0.64776 \n 3      PROX_HAWKER_MARKET      42966.461    43061.315    38891.719    0.65172    0.64779 \n 4      LEASEHOLD_99YR          42965.558    43055.141    38890.764    0.65145    0.64777 \n 5      PROX_KINDERGARTEN       42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\nplot(condo_bw_mlr)\n\n\n\n\n\n\n\n\n\ncondo_both_mlr &lt;- ols_step_both_p(\n  condo_mlr,\n  p_val = 0.05,\n  details=FALSE\n)\ncondo_both_mlr\n\n\n                                       Stepwise Summary                                        \n---------------------------------------------------------------------------------------------\nStep    Variable                       AIC          SBC         SBIC         R2       Adj. R2 \n---------------------------------------------------------------------------------------------\n 0      Base Model                  44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM (+)                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD (+)                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK (+)               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD (+)                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE (+)                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE (+)        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL (+)      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA (+)    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT (+)                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP (+)           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY (+)         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS (+)             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE (+)          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH (+)        42966.758    43051.072    38891.872    0.65067    0.64723 \n 15     PROX_KINDERGARTEN (+)       42965.558    43055.141    38890.764    0.65145    0.64777 \n---------------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751161.087 \nR-Squared                    0.651       MSE                570600646491.086 \nAdj. R-Squared               0.648       Coef. Var                    43.135 \nPred R-Squared               0.638       AIC                       42965.558 \nMAE                     413583.799       SBC                       43055.141 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.514394e+15          15        1.009596e+14    176.936    0.0000 \nResidual      8.102529e+14        1420    570600646491.086                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     459826.675    114616.014                   4.012    0.000     234991.777     684661.574 \n            AREA_SQM      12720.174       368.610        0.581     34.509    0.000      11997.096      13443.252 \n            PROX_CBD     -75676.065      5816.474       -0.258    -13.011    0.000     -87085.870     -64266.259 \n           PROX_PARK     575749.528     65523.382        0.151      8.787    0.000     447216.504     704282.552 \n            FREEHOLD     360203.286     48768.851        0.140      7.386    0.000     264536.552     455870.021 \n                 AGE     -24697.719      2752.751       -0.167     -8.972    0.000     -30097.615     -19297.824 \n    PROX_ELDERLYCARE     182435.081     39910.469        0.088      4.571    0.000     104145.268     260724.893 \n  PROX_SHOPPING_MALL    -224513.955     36588.872       -0.117     -6.136    0.000    -296288.004    -152739.906 \nPROX_URA_GROWTH_AREA      40145.474     11758.824        0.062      3.414    0.001      17078.942      63212.007 \n            PROX_MRT    -311753.202     57670.032       -0.119     -5.406    0.000    -424880.814    -198625.590 \n       PROX_BUS_STOP     711858.014    135420.040        0.140      5.257    0.000     446213.188     977502.840 \n     FAMILY_FRIENDLY     144034.218     46874.683        0.057      3.073    0.002      52083.153     235985.283 \n         NO_Of_UNITS       -236.270        88.032       -0.051     -2.684    0.007       -408.956        -63.583 \n      PROX_CHILDCARE    -336118.857    108331.761       -0.088     -3.103    0.002    -548626.339    -123611.374 \n    PROX_PRIMARY_SCH     162183.897     60202.895        0.063      2.694    0.007      44087.730     280280.063 \n   PROX_KINDERGARTEN     141915.768     79726.155        0.029      1.780    0.075     -14477.927     298309.464 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\nplot(condo_both_mlr)\n\n\n\n\n\n\n\n\n\nmetric &lt;- compare_performance(condo_mlr,\n                              condo_fw_mlr$model,\n                              condo_bw_mlr$model,\n                              condo_both_mlr$model)\nmetric$Name &lt;- gsub(\".*\\\\\\\\([a-zA-Z0-9_]+)\\\\\\\\, \\\\\\\\model\\\\\\\\.*\", \"\\\\1\", metric$Name)\n\n\nplot(metric)\n\n\n\n\n\n\n\n\n\nggcoefstats(condo_both_mlr$model,\n            sort = \"ascending\")\n\nNumber of labels is greater than default palette color count.\n• Select another color `palette` (and/or `package`).\n\n\n\n\n\n\n\n\n\n\ncheck_collinearity(condo_both_mlr$model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n                 Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n             AREA_SQM 1.15 [1.10, 1.24]         1.07      0.87     [0.81, 0.91]\n             PROX_CBD 1.60 [1.50, 1.73]         1.27      0.62     [0.58, 0.67]\n            PROX_PARK 1.21 [1.15, 1.30]         1.10      0.83     [0.77, 0.87]\n             FREEHOLD 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n                  AGE 1.41 [1.33, 1.52]         1.19      0.71     [0.66, 0.75]\n     PROX_ELDERLYCARE 1.52 [1.42, 1.63]         1.23      0.66     [0.61, 0.70]\n   PROX_SHOPPING_MALL 1.49 [1.40, 1.60]         1.22      0.67     [0.62, 0.72]\n PROX_URA_GROWTH_AREA 1.33 [1.26, 1.43]         1.16      0.75     [0.70, 0.79]\n             PROX_MRT 1.96 [1.83, 2.13]         1.40      0.51     [0.47, 0.55]\n        PROX_BUS_STOP 2.89 [2.66, 3.15]         1.70      0.35     [0.32, 0.38]\n      FAMILY_FRIENDLY 1.38 [1.30, 1.48]         1.18      0.72     [0.67, 0.77]\n          NO_Of_UNITS 1.45 [1.37, 1.56]         1.21      0.69     [0.64, 0.73]\n       PROX_CHILDCARE 3.29 [3.02, 3.59]         1.81      0.30     [0.28, 0.33]\n     PROX_PRIMARY_SCH 2.21 [2.05, 2.40]         1.49      0.45     [0.42, 0.49]\n    PROX_KINDERGARTEN 1.11 [1.06, 1.20]         1.05      0.90     [0.84, 0.94]\n\n\n\nplot(check_collinearity(condo_both_mlr$model)) +\n  theme(axis.text.x = element_text(\n    angle = 45, hjust = 1\n  ))\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n\n\n\nout &lt;- plot(check_model(condo_both_mlr$model,\n                        panel=FALSE))\n\nFor confidence bands, please install `qqplotr`.\n\nout[[2]]\n\n\n\n\n\n\n\n\n\nplot(check_normality(condo_both_mlr$model))\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\n\noutliers &lt;- check_outliers(condo_both_mlr$model, \n                           method = \"cook\")\noutliers\n\nOK: No outliers detected.\n- Based on the following method and threshold: cook (1).\n- For variable: (Whole model)\n\n\n\nplot(check_outliers(condo_both_mlr$model, method = \"cook\"))\n\n\n\n\n\n\n\n\n\nmlr_output &lt;- as.data.frame(condo_fw_mlr$model$residuals) %&gt;%\n  rename(`FW_MLR_RES` = `condo_fw_mlr$model$residuals`)\n\n\ncondo_resale_sf &lt;- cbind(condo_resale_sf, \n                        mlr_output$FW_MLR_RES) %&gt;%\n  rename(`MLR_RES` = `mlr_output.FW_MLR_RES`)\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale_sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") \n\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(mpsz)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale_sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n   tm_view(set.zoom.limits = c(12,14))\n\nWarning: The shape mpsz is invalid. See sf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\ncondo_resale_sf &lt;- condo_resale_sf %&gt;%\n  mutate(nb = st_knn(geometry, k=6,\n                     longlat = FALSE),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\nglobal_moran_perm(condo_resale_sf$MLR_RES, \n                  condo_resale_sf$nb, \n                  condo_resale_sf$wt, \n                  alternative = \"two.sided\", \n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.32254, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nglobal_moran_perm(condo_resale_sf$MLR_RES, \n                  condo_resale_sf$nb, \n                  condo_resale_sf$wt, \n                  alternative = \"two.sided\", \n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.32254, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "In-Class_Ex/ICE-1/ice1.html",
    "href": "In-Class_Ex/ICE-1/ice1.html",
    "title": "In-class Exercise 1: Geospatial Data Science",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)\n\n\nmpsz = st_read(dsn = \"data/MPSZ-2019\", \n                  layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-1\\data\\MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n# let's glimpse at the overview od the possible values for the different columns...\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((103.8802 1...., MULTIPOLYGON (…\n\n\n\n# now let's look at geometric features:\nst_geometry(mpsz)\n\nGeometry set for 332 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((103.8802 1.283859, 103.8802 1.2...\n\n\nMULTIPOLYGON (((103.8376 1.295599, 103.8377 1.2...\n\n\nMULTIPOLYGON (((103.8341 1.292476, 103.8341 1.2...\n\n\nMULTIPOLYGON (((103.7125 1.291625, 103.7126 1.2...\n\n\nMULTIPOLYGON (((103.8472 1.297, 103.8473 1.2969...\n\n\n\n#let's take a look at the first few entries:\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6537 ymin: 1.216215 xmax: 103.8811 ymax: 1.29742\nGeodetic CRS:  WGS 84\n                SUBZONE_N SUBZONE_C      PLN_AREA_N PLN_AREA_C       REGION_N\n1             MARINA EAST    MESZ01     MARINA EAST         ME CENTRAL REGION\n2        INSTITUTION HILL    RVSZ05    RIVER VALLEY         RV CENTRAL REGION\n3          ROBERTSON QUAY    SRSZ01 SINGAPORE RIVER         SR CENTRAL REGION\n4 JURONG ISLAND AND BUKOM    WISZ01 WESTERN ISLANDS         WI    WEST REGION\n5            FORT CANNING    MUSZ02          MUSEUM         MU CENTRAL REGION\n  REGION_C                       geometry\n1       CR MULTIPOLYGON (((103.8802 1....\n2       CR MULTIPOLYGON (((103.8376 1....\n3       CR MULTIPOLYGON (((103.8341 1....\n4       WR MULTIPOLYGON (((103.7125 1....\n5       CR MULTIPOLYGON (((103.8472 1....\n\n\n\n# Let's plot the map:\nplot(mpsz)\n\n\n\n\n\n\n\n\n\n#And now, we just wanna see the map without any of the categories:\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\n\n#And now we plot only one category:\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "In-Class_Ex/ICE-3/ice3.html",
    "href": "In-Class_Ex/ICE-3/ice3.html",
    "title": "ICE 3",
    "section": "",
    "text": "install.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")"
  },
  {
    "objectID": "In-Class_Ex/ICE-5/ice5.html",
    "href": "In-Class_Ex/ICE-5/ice5.html",
    "title": "ICE5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan_sf  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nJoin the dataframes together:\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nsave file\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan_sf.rds\")\n\n\nhunan_sp &lt;- as_Spatial(hunan_sf)\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nfixed bandwidth\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\ngeoweighted summary stats\n\ngwstat &lt;- gwss(data = hunan_sp, vars = \"GDPPC\", bw = bw_AIC, kernel = \"bisquare\", adaptive = TRUE, longlat = T)\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\nviz\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\",\n                                n = 5,\n                                style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Dist of geoweighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size =0.8,\n            legend.height = 1.0 ,\n            legend.width = 1.0,\n            frame = TRUE)"
  },
  {
    "objectID": "In-Class_Ex/ICE-5/ice5.html#installlaunch-r-packages",
    "href": "In-Class_Ex/ICE-5/ice5.html#installlaunch-r-packages",
    "title": "ICE5",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan_sf  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nJoin the dataframes together:\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nsave file\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan_sf.rds\")\n\n\nhunan_sp &lt;- as_Spatial(hunan_sf)\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nfixed bandwidth\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\ngeoweighted summary stats\n\ngwstat &lt;- gwss(data = hunan_sp, vars = \"GDPPC\", bw = bw_AIC, kernel = \"bisquare\", adaptive = TRUE, longlat = T)\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\nviz\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\",\n                                n = 5,\n                                style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Dist of geoweighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size =0.8,\n            legend.height = 1.0 ,\n            legend.width = 1.0,\n            frame = TRUE)"
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html",
    "href": "In-Class_Ex/ICE-9/ice9.html",
    "title": "In-Class Exercise 9",
    "section": "",
    "text": "pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra,\n               NbClust, tidyverse, GGally)\n\nWe will be using spdep for the scatter function. sp for spatial data manipulation. tmap for plotting. sf for spatial data manipulation. ClustGeo for spatial clustering. cluster for clustering. factoextra for clustering. NbClust for clustering. tidyverse for data manipulation. GGally for plotting."
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#loading-required-packages",
    "href": "In-Class_Ex/ICE-9/ice9.html#loading-required-packages",
    "title": "In-Class Exercise 9",
    "section": "",
    "text": "pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra,\n               NbClust, tidyverse, GGally)\n\nWe will be using spdep for the scatter function. sp for spatial data manipulation. tmap for plotting. sf for spatial data manipulation. ClustGeo for spatial clustering. cluster for clustering. factoextra for clustering. NbClust for clustering. tidyverse for data manipulation. GGally for plotting."
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#import-data",
    "href": "In-Class_Ex/ICE-9/ice9.html#import-data",
    "title": "In-Class Exercise 9",
    "section": "Import Data",
    "text": "Import Data\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\nshan_sf_cluster &lt;- read_rds(\"data/rds/shan_sf_cluster.rds\")\n\n\nwrite_rds(shan_sf_cluster, \"data/rds/shan_sf_cluster.rds\")"
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#conventional-hierarchical-clustering",
    "href": "In-Class_Ex/ICE-9/ice9.html#conventional-hierarchical-clustering",
    "title": "In-Class Exercise 9",
    "section": "Conventional Hierarchical Clustering",
    "text": "Conventional Hierarchical Clustering\n\nHierarchical Clustering\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n\n\nAppending to Geospatial Data\n\nshan_sf_cluster &lt;- cbind(shan_sf, \n                         as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`) %&gt;%\n  select(-c(3:4, 7:9)) %&gt;%\n  rename(TS = TS.x)\n\n\n\nPlotting Dendrogram\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, k = 6, border = 2:5)\n\n\n\n\n\n\n\n\n\n\nCluster Map\n\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#spatially-constrained-clustering-skater",
    "href": "In-Class_Ex/ICE-9/ice9.html#spatially-constrained-clustering-skater",
    "title": "In-Class Exercise 9",
    "section": "Spatially Constrained Clustering: SKATER",
    "text": "Spatially Constrained Clustering: SKATER\n\nComputing Nearest Neighbours\n\nshan.nb &lt;- poly2nb(shan_sf)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\n\nVisualizing Neighbours\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\npts &lt;- st_coordinates(st_centroid(shan_sf))\n\nWarning: st_centroid assumes attributes are constant over geometries\n\nplot(shan.nb, \n     pts, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\nCompute Minimum Spanning Tree (MST)\nFirst, we need to calculate the edge costs for the minimum spanning tree. This can be done by using the nbcosts function.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nNext, we incorporate these weights into a weights object using the nb2listw function.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\nThen, we call mstree to compute the minimum spanning tree.\n\nshan.mst &lt;- mstree(shan.w)\n\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot.mst(shan.mst, \n         pts, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)"
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#computing-spatially-constrained-clusters",
    "href": "In-Class_Ex/ICE-9/ice9.html#computing-spatially-constrained-clusters",
    "title": "In-Class Exercise 9",
    "section": "Computing Spatially Constrained Clusters",
    "text": "Computing Spatially Constrained Clusters\n\nskater.clust6 &lt;- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nSkater Tree\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(skater.clust6, \n     pts, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter"
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#visualizing-clusters-in-choropleth-map",
    "href": "In-Class_Ex/ICE-9/ice9.html#visualizing-clusters-in-choropleth-map",
    "title": "In-Class Exercise 9",
    "section": "Visualizing Clusters in Choropleth Map",
    "text": "Visualizing Clusters in Choropleth Map\n\ngroups_mat &lt;- as.matrix(skater.clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n\n\n\n\n\n\n\n\n\nPlotting Cluster Map\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.8, 0.6))\n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"skater_CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.7, 0.6))\n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#spatially-constrained-clustering-clustgeo",
    "href": "In-Class_Ex/ICE-9/ice9.html#spatially-constrained-clustering-clustgeo",
    "title": "In-Class Exercise 9",
    "section": "Spatially Constrained Clustering: ClustGeo",
    "text": "Spatially Constrained Clustering: ClustGeo\n\nComputing Spatial Distance Matrix\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\n\n\nCluster Graphs\n\ncr &lt;- choicealpha(proxmat, distmat, \n                  range.alpha = seq(0, 1, 0.1), \n                  K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving ClustGeo Output\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\ngroups &lt;- as.factor(cutree(clustG, k=6))\nshan_sf_clustGeo &lt;- cbind(shan_sf, \n                          as.matrix(groups)) %&gt;%\n  rename(`clustGeo` = `as.matrix.groups.`)\n\n\n\nVisualizing ClustGeo Map\n\nqtm(shan_sf_clustGeo, \"clustGeo\")\n\n\n\n\n\n\n\n\n\n\nComparing Cluster Maps\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.8, 0.6))\n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"skater_CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.7, 0.6))\n\nclustGeo.map &lt;- qtm(shan_sf_clustGeo,\n                   \"clustGeo\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.7, 0.6))\n\ntmap_arrange(hclust.map, shclust.map, \n             clustGeo.map,\n             asp=NA, ncol=3)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "In-Class_Ex/ICE-9/ice9.html#characterizing-clusters",
    "href": "In-Class_Ex/ICE-9/ice9.html#characterizing-clusters",
    "title": "In-Class Exercise 9",
    "section": "Characterizing Clusters",
    "text": "Characterizing Clusters\n\nggparcoord(data = shan_sf_clustGeo, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ clustGeo) + \n  theme(axis.text.x = element_text(angle = 30))"
  },
  {
    "objectID": "exercises/ex10/ex10.html",
    "href": "exercises/ex10/ex10.html",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable).\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis.\n\nImports\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n1.1 Updating CRS\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n1.2 Import aspatial data\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n1.3 convert to sf\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\n\n2.1 Exploratory Data Analysis\n\n\n2.2 EDA with ggplot2\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\n\n\n2.3 Multiple Histogram Plots distribution of variables\n\n\n\n\n\n\nWhen to Use a Trellis Plot\n\n\n\nComparing multiple groups: When you want to compare the distributions of a variable across different categories or groups. For example, comparing the distribution of income levels between different age groups.\nVisualizing high-dimensional data: When you have a dataset with many variables and want to explore the relationships between subsets of those variables. Trellis plots can help you break down complex data into more manageable subplots.\n\n\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\n\n\n\nDraw statistical point map\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nGreat, let’s create our interactive point symbol map.\n\n# First, let's check if the sf object is valid\nst_is_valid(mpsz_svy21, reason = TRUE)\n\n  [1] \"Valid Geometry\"                                           \n  [2] \"Valid Geometry\"                                           \n  [3] \"Valid Geometry\"                                           \n  [4] \"Valid Geometry\"                                           \n  [5] \"Valid Geometry\"                                           \n  [6] \"Valid Geometry\"                                           \n  [7] \"Valid Geometry\"                                           \n  [8] \"Valid Geometry\"                                           \n  [9] \"Valid Geometry\"                                           \n [10] \"Valid Geometry\"                                           \n [11] \"Valid Geometry\"                                           \n [12] \"Valid Geometry\"                                           \n [13] \"Valid Geometry\"                                           \n [14] \"Valid Geometry\"                                           \n [15] \"Valid Geometry\"                                           \n [16] \"Valid Geometry\"                                           \n [17] \"Valid Geometry\"                                           \n [18] \"Valid Geometry\"                                           \n [19] \"Ring Self-intersection[27932.3925999999 21982.7971999999]\"\n [20] \"Ring Self-intersection[26885.4439000003 26668.3121000007]\"\n [21] \"Valid Geometry\"                                           \n [22] \"Valid Geometry\"                                           \n [23] \"Valid Geometry\"                                           \n [24] \"Ring Self-intersection[26920.1689999998 26978.5440999996]\"\n [25] \"Valid Geometry\"                                           \n [26] \"Valid Geometry\"                                           \n [27] \"Valid Geometry\"                                           \n [28] \"Valid Geometry\"                                           \n [29] \"Valid Geometry\"                                           \n [30] \"Valid Geometry\"                                           \n [31] \"Valid Geometry\"                                           \n [32] \"Valid Geometry\"                                           \n [33] \"Valid Geometry\"                                           \n [34] \"Valid Geometry\"                                           \n [35] \"Valid Geometry\"                                           \n [36] \"Valid Geometry\"                                           \n [37] \"Valid Geometry\"                                           \n [38] \"Valid Geometry\"                                           \n [39] \"Valid Geometry\"                                           \n [40] \"Valid Geometry\"                                           \n [41] \"Valid Geometry\"                                           \n [42] \"Valid Geometry\"                                           \n [43] \"Valid Geometry\"                                           \n [44] \"Valid Geometry\"                                           \n [45] \"Valid Geometry\"                                           \n [46] \"Valid Geometry\"                                           \n [47] \"Valid Geometry\"                                           \n [48] \"Valid Geometry\"                                           \n [49] \"Valid Geometry\"                                           \n [50] \"Valid Geometry\"                                           \n [51] \"Valid Geometry\"                                           \n [52] \"Valid Geometry\"                                           \n [53] \"Valid Geometry\"                                           \n [54] \"Valid Geometry\"                                           \n [55] \"Valid Geometry\"                                           \n [56] \"Valid Geometry\"                                           \n [57] \"Valid Geometry\"                                           \n [58] \"Valid Geometry\"                                           \n [59] \"Valid Geometry\"                                           \n [60] \"Valid Geometry\"                                           \n [61] \"Valid Geometry\"                                           \n [62] \"Valid Geometry\"                                           \n [63] \"Valid Geometry\"                                           \n [64] \"Valid Geometry\"                                           \n [65] \"Valid Geometry\"                                           \n [66] \"Valid Geometry\"                                           \n [67] \"Valid Geometry\"                                           \n [68] \"Valid Geometry\"                                           \n [69] \"Valid Geometry\"                                           \n [70] \"Valid Geometry\"                                           \n [71] \"Valid Geometry\"                                           \n [72] \"Valid Geometry\"                                           \n [73] \"Valid Geometry\"                                           \n [74] \"Valid Geometry\"                                           \n [75] \"Valid Geometry\"                                           \n [76] \"Valid Geometry\"                                           \n [77] \"Valid Geometry\"                                           \n [78] \"Valid Geometry\"                                           \n [79] \"Valid Geometry\"                                           \n [80] \"Valid Geometry\"                                           \n [81] \"Valid Geometry\"                                           \n [82] \"Valid Geometry\"                                           \n [83] \"Valid Geometry\"                                           \n [84] \"Valid Geometry\"                                           \n [85] \"Valid Geometry\"                                           \n [86] \"Valid Geometry\"                                           \n [87] \"Valid Geometry\"                                           \n [88] \"Valid Geometry\"                                           \n [89] \"Valid Geometry\"                                           \n [90] \"Valid Geometry\"                                           \n [91] \"Valid Geometry\"                                           \n [92] \"Valid Geometry\"                                           \n [93] \"Valid Geometry\"                                           \n [94] \"Valid Geometry\"                                           \n [95] \"Valid Geometry\"                                           \n [96] \"Valid Geometry\"                                           \n [97] \"Valid Geometry\"                                           \n [98] \"Valid Geometry\"                                           \n [99] \"Valid Geometry\"                                           \n[100] \"Valid Geometry\"                                           \n[101] \"Valid Geometry\"                                           \n[102] \"Valid Geometry\"                                           \n[103] \"Valid Geometry\"                                           \n[104] \"Valid Geometry\"                                           \n[105] \"Valid Geometry\"                                           \n[106] \"Valid Geometry\"                                           \n[107] \"Valid Geometry\"                                           \n[108] \"Valid Geometry\"                                           \n[109] \"Valid Geometry\"                                           \n[110] \"Valid Geometry\"                                           \n[111] \"Valid Geometry\"                                           \n[112] \"Valid Geometry\"                                           \n[113] \"Valid Geometry\"                                           \n[114] \"Valid Geometry\"                                           \n[115] \"Valid Geometry\"                                           \n[116] \"Valid Geometry\"                                           \n[117] \"Valid Geometry\"                                           \n[118] \"Valid Geometry\"                                           \n[119] \"Valid Geometry\"                                           \n[120] \"Valid Geometry\"                                           \n[121] \"Valid Geometry\"                                           \n[122] \"Ring Self-intersection[15432.4749999996 31319.716]\"       \n[123] \"Ring Self-intersection[12861.3828999996 32207.4923]\"      \n[124] \"Valid Geometry\"                                           \n[125] \"Valid Geometry\"                                           \n[126] \"Valid Geometry\"                                           \n[127] \"Valid Geometry\"                                           \n[128] \"Ring Self-intersection[19681.2353999997 31294.4521999992]\"\n[129] \"Valid Geometry\"                                           \n[130] \"Valid Geometry\"                                           \n[131] \"Valid Geometry\"                                           \n[132] \"Valid Geometry\"                                           \n[133] \"Valid Geometry\"                                           \n[134] \"Valid Geometry\"                                           \n[135] \"Valid Geometry\"                                           \n[136] \"Valid Geometry\"                                           \n[137] \"Valid Geometry\"                                           \n[138] \"Valid Geometry\"                                           \n[139] \"Valid Geometry\"                                           \n[140] \"Valid Geometry\"                                           \n[141] \"Valid Geometry\"                                           \n[142] \"Valid Geometry\"                                           \n[143] \"Valid Geometry\"                                           \n[144] \"Valid Geometry\"                                           \n[145] \"Valid Geometry\"                                           \n[146] \"Valid Geometry\"                                           \n[147] \"Valid Geometry\"                                           \n[148] \"Valid Geometry\"                                           \n[149] \"Valid Geometry\"                                           \n[150] \"Valid Geometry\"                                           \n[151] \"Valid Geometry\"                                           \n[152] \"Valid Geometry\"                                           \n[153] \"Valid Geometry\"                                           \n[154] \"Valid Geometry\"                                           \n[155] \"Valid Geometry\"                                           \n[156] \"Valid Geometry\"                                           \n[157] \"Valid Geometry\"                                           \n[158] \"Valid Geometry\"                                           \n[159] \"Valid Geometry\"                                           \n[160] \"Valid Geometry\"                                           \n[161] \"Valid Geometry\"                                           \n[162] \"Valid Geometry\"                                           \n[163] \"Valid Geometry\"                                           \n[164] \"Valid Geometry\"                                           \n[165] \"Valid Geometry\"                                           \n[166] \"Valid Geometry\"                                           \n[167] \"Valid Geometry\"                                           \n[168] \"Valid Geometry\"                                           \n[169] \"Valid Geometry\"                                           \n[170] \"Valid Geometry\"                                           \n[171] \"Valid Geometry\"                                           \n[172] \"Valid Geometry\"                                           \n[173] \"Valid Geometry\"                                           \n[174] \"Valid Geometry\"                                           \n[175] \"Valid Geometry\"                                           \n[176] \"Valid Geometry\"                                           \n[177] \"Valid Geometry\"                                           \n[178] \"Valid Geometry\"                                           \n[179] \"Valid Geometry\"                                           \n[180] \"Valid Geometry\"                                           \n[181] \"Valid Geometry\"                                           \n[182] \"Valid Geometry\"                                           \n[183] \"Valid Geometry\"                                           \n[184] \"Valid Geometry\"                                           \n[185] \"Valid Geometry\"                                           \n[186] \"Valid Geometry\"                                           \n[187] \"Valid Geometry\"                                           \n[188] \"Valid Geometry\"                                           \n[189] \"Valid Geometry\"                                           \n[190] \"Valid Geometry\"                                           \n[191] \"Valid Geometry\"                                           \n[192] \"Valid Geometry\"                                           \n[193] \"Valid Geometry\"                                           \n[194] \"Valid Geometry\"                                           \n[195] \"Valid Geometry\"                                           \n[196] \"Valid Geometry\"                                           \n[197] \"Valid Geometry\"                                           \n[198] \"Valid Geometry\"                                           \n[199] \"Valid Geometry\"                                           \n[200] \"Valid Geometry\"                                           \n[201] \"Valid Geometry\"                                           \n[202] \"Valid Geometry\"                                           \n[203] \"Valid Geometry\"                                           \n[204] \"Valid Geometry\"                                           \n[205] \"Valid Geometry\"                                           \n[206] \"Valid Geometry\"                                           \n[207] \"Valid Geometry\"                                           \n[208] \"Valid Geometry\"                                           \n[209] \"Valid Geometry\"                                           \n[210] \"Valid Geometry\"                                           \n[211] \"Valid Geometry\"                                           \n[212] \"Valid Geometry\"                                           \n[213] \"Valid Geometry\"                                           \n[214] \"Valid Geometry\"                                           \n[215] \"Valid Geometry\"                                           \n[216] \"Valid Geometry\"                                           \n[217] \"Valid Geometry\"                                           \n[218] \"Valid Geometry\"                                           \n[219] \"Valid Geometry\"                                           \n[220] \"Valid Geometry\"                                           \n[221] \"Valid Geometry\"                                           \n[222] \"Valid Geometry\"                                           \n[223] \"Valid Geometry\"                                           \n[224] \"Valid Geometry\"                                           \n[225] \"Valid Geometry\"                                           \n[226] \"Valid Geometry\"                                           \n[227] \"Valid Geometry\"                                           \n[228] \"Valid Geometry\"                                           \n[229] \"Valid Geometry\"                                           \n[230] \"Valid Geometry\"                                           \n[231] \"Valid Geometry\"                                           \n[232] \"Valid Geometry\"                                           \n[233] \"Valid Geometry\"                                           \n[234] \"Valid Geometry\"                                           \n[235] \"Valid Geometry\"                                           \n[236] \"Valid Geometry\"                                           \n[237] \"Valid Geometry\"                                           \n[238] \"Valid Geometry\"                                           \n[239] \"Valid Geometry\"                                           \n[240] \"Valid Geometry\"                                           \n[241] \"Valid Geometry\"                                           \n[242] \"Valid Geometry\"                                           \n[243] \"Valid Geometry\"                                           \n[244] \"Valid Geometry\"                                           \n[245] \"Valid Geometry\"                                           \n[246] \"Valid Geometry\"                                           \n[247] \"Valid Geometry\"                                           \n[248] \"Valid Geometry\"                                           \n[249] \"Valid Geometry\"                                           \n[250] \"Valid Geometry\"                                           \n[251] \"Valid Geometry\"                                           \n[252] \"Valid Geometry\"                                           \n[253] \"Valid Geometry\"                                           \n[254] \"Valid Geometry\"                                           \n[255] \"Valid Geometry\"                                           \n[256] \"Valid Geometry\"                                           \n[257] \"Valid Geometry\"                                           \n[258] \"Ring Self-intersection[41375.108 40432.8588999994]\"       \n[259] \"Valid Geometry\"                                           \n[260] \"Valid Geometry\"                                           \n[261] \"Valid Geometry\"                                           \n[262] \"Valid Geometry\"                                           \n[263] \"Valid Geometry\"                                           \n[264] \"Valid Geometry\"                                           \n[265] \"Valid Geometry\"                                           \n[266] \"Valid Geometry\"                                           \n[267] \"Valid Geometry\"                                           \n[268] \"Valid Geometry\"                                           \n[269] \"Valid Geometry\"                                           \n[270] \"Valid Geometry\"                                           \n[271] \"Valid Geometry\"                                           \n[272] \"Valid Geometry\"                                           \n[273] \"Valid Geometry\"                                           \n[274] \"Valid Geometry\"                                           \n[275] \"Valid Geometry\"                                           \n[276] \"Valid Geometry\"                                           \n[277] \"Valid Geometry\"                                           \n[278] \"Valid Geometry\"                                           \n[279] \"Valid Geometry\"                                           \n[280] \"Valid Geometry\"                                           \n[281] \"Valid Geometry\"                                           \n[282] \"Valid Geometry\"                                           \n[283] \"Valid Geometry\"                                           \n[284] \"Valid Geometry\"                                           \n[285] \"Valid Geometry\"                                           \n[286] \"Valid Geometry\"                                           \n[287] \"Valid Geometry\"                                           \n[288] \"Valid Geometry\"                                           \n[289] \"Valid Geometry\"                                           \n[290] \"Valid Geometry\"                                           \n[291] \"Valid Geometry\"                                           \n[292] \"Valid Geometry\"                                           \n[293] \"Valid Geometry\"                                           \n[294] \"Valid Geometry\"                                           \n[295] \"Valid Geometry\"                                           \n[296] \"Valid Geometry\"                                           \n[297] \"Valid Geometry\"                                           \n[298] \"Valid Geometry\"                                           \n[299] \"Valid Geometry\"                                           \n[300] \"Valid Geometry\"                                           \n[301] \"Valid Geometry\"                                           \n[302] \"Ring Self-intersection[38542.2260999996 44605.4089000002]\"\n[303] \"Valid Geometry\"                                           \n[304] \"Valid Geometry\"                                           \n[305] \"Valid Geometry\"                                           \n[306] \"Valid Geometry\"                                           \n[307] \"Valid Geometry\"                                           \n[308] \"Valid Geometry\"                                           \n[309] \"Valid Geometry\"                                           \n[310] \"Valid Geometry\"                                           \n[311] \"Valid Geometry\"                                           \n[312] \"Valid Geometry\"                                           \n[313] \"Valid Geometry\"                                           \n[314] \"Valid Geometry\"                                           \n[315] \"Valid Geometry\"                                           \n[316] \"Valid Geometry\"                                           \n[317] \"Valid Geometry\"                                           \n[318] \"Valid Geometry\"                                           \n[319] \"Valid Geometry\"                                           \n[320] \"Ring Self-intersection[21702.5623000003 48125.1154999994]\"\n[321] \"Valid Geometry\"                                           \n[322] \"Valid Geometry\"                                           \n[323] \"Valid Geometry\"                                           \n\n\n\n# To see which polygons are invalid and why\ninvalid_polygons &lt;- which(!st_is_valid(mpsz_svy21))\nprint(paste(\"Number of invalid polygons:\", length(invalid_polygons)))\n\n[1] \"Number of invalid polygons: 9\"\n\n# If there are invalid polygons, let's look at the specific reasons\nif(length(invalid_polygons) &gt; 0) {\n  reasons &lt;- st_is_valid(mpsz_svy21[invalid_polygons,], reason = TRUE)\n  print(reasons)\n}\n\n[1] \"Ring Self-intersection[27932.3925999999 21982.7971999999]\"\n[2] \"Ring Self-intersection[26885.4439000003 26668.3121000007]\"\n[3] \"Ring Self-intersection[26920.1689999998 26978.5440999996]\"\n[4] \"Ring Self-intersection[15432.4749999996 31319.716]\"       \n[5] \"Ring Self-intersection[12861.3828999996 32207.4923]\"      \n[6] \"Ring Self-intersection[19681.2353999997 31294.4521999992]\"\n[7] \"Ring Self-intersection[41375.108 40432.8588999994]\"       \n[8] \"Ring Self-intersection[38542.2260999996 44605.4089000002]\"\n[9] \"Ring Self-intersection[21702.5623000003 48125.1154999994]\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe message “Ring Self-intersection[21702.5623000003 48125.1154999994]” indicates that there is a self-intersection in a ring-shaped polygon. A self-intersection occurs when two or more parts of the polygon’s boundary cross or overlap each other.\nIn this specific case, the self-intersection is happening at the coordinates (21702.5623000003, 48125.1154999994).\nSelf-intersections can cause issues with spatial analysis and visualization. It’s important to identify and fix them to ensure the accuracy and validity of your spatial data.\nThere are several ways to fix self-intersections, depending on the nature of your data and the specific cause of the intersection. Some common approaches include:\n\nSmoothing: Smoothing the polygon’s boundary to remove small kinks or irregularities that might be causing the intersection.\nSimplifying: Simplifying the polygon by reducing the number of vertices while preserving its overall shape.\nManual editing: Manually editing the polygon’s coordinates to correct the intersection.\n\n\n\nIn our case, we’re just gonna programmatically fix it:\n\n\n# Clean the data.\nmpsz_svy21 &lt;- st_make_valid(mpsz_svy21)\n\n# Verify the fix\nany(!st_is_valid(mpsz_svy21))\n\n[1] FALSE\n\n\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n3.1 Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\n\n3.1.1 Simple Regression\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\n3.1.2 Multiple Linear Regression Method\n\n\n3.1.3 Visualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n3.1.4 Building a hedonic pricing model using multiple linear regression method\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n3.1.5 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant (those without the *) . We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n3.1.6 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n\n\nAREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n\n\nAGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n\n\nPROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n\n\nPROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n\n\nPROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n\n\nPROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n\n\nPROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n\n\nPROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n\n\nPROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n\n\nPROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n\n\nPROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n\n\nNO_Of_UNITS\n-245\n-418, -73\n0.005\n\n\nFAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n\n\nFREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma)) \n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\n4. Checking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\n4.1 Test for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\n4.2 Test for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the one-sample Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\n4.3 Testing for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nLet’s view it as a point symbol map\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution.\n\n\n5.1 Building Hedonic Pricing Models using GWmodel\nIn this section, you are going to learn how to modelling hedonic pricing using both the fixed and adaptive bandwidth schemes.\n\n\n\n\n\n\nNote\n\n\n\n\nFixed bandwidth GWR: Allows you to specify a fixed bandwidth for the kernel used in GWR, which determines the extent of spatial weighting for each observation.\n\n\n\nAdaptive bandwidth GWR: Automatically selects the bandwidth for each observation based on the density of data points in its neighborhood.\n\n\n\n\n\n5.1.1 Computing fixed bandwith\nIn the code chunk below bw.gwr() of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\nThere are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach argeement.\n\nbw.fixed &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\nThe result shows that the recommended bandwidth is 971.3405 metres.\n\n\n\n\n\n\nNote:\n\n\n\nA bandwidth of 971.3405 meters means that the regression coefficients are allowed to vary within a neighborhood of approximately 971 meters around each observation.\nThe GWmodel package assumes that the units of measurement for all variables in the model are consistent. Therefore, if your spatial data is in meters, the bandwidth will be calculated in meters as well.\n\n\n\n\n5.1.2 GWModel method - fixed bandwith\nNow we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.\n\ngwr.fixed &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-10-24 12:06:35.223136 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2024-10-24 12:06:35.898069 \n\n\nThe report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the global multiple linear regression model of 42967.1.\n\n\n\n\n\n\nNote\n\n\n\nThis is a strong indication that the GWR model provides a better fit to the data compared to the global model.\n\n\n\n\n5.1.3 Building Adaptive Bandwidth GWR Model\nIn this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.\n\n\n5.1.4 Computing the adaptive bandwidth\nSimilar to the earlier section, we will first use bw.gwr() to determine the recommended data point to use.\nThe code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.\n\nbw.adaptive &lt;- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\nThe result shows that the 30 is the recommended data points to be used.\n\n\n5.1.5 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.\n\ngwr.adaptive &lt;- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-10-24 12:06:40.768142 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2024-10-24 12:06:41.881438 \n\n\nThe report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.\n\n\n6 Visualising GWR Output\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values 3. computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n6.1 Converting SDF into sf data.frame\nTo visualise the fields in SDF, we need to first covert it into sf data.frame by using the code chunk below.\n\ncondo_resale.sf.adaptive &lt;- st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 &lt;- st_transform(condo_resale.sf.adaptive, 3414)\n\n\ngwr.adaptive.output &lt;- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive &lt;- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n6.1.1 Visualising local R2\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\n\n6.1.2 Visualising coefficient estimates\nThe code chunks below is used to create an interactive point symbol map.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nAREA_SQM_SE &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV &lt;- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "exercises/ex1/ex1.html",
    "href": "exercises/ex1/ex1.html",
    "title": "Geospatial Exercise 1",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)\n\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                      layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\n\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "exercises/ex3/ex3.html",
    "href": "exercises/ex3/ex3.html",
    "title": "Exercise 3",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the distribution of a set of points on a surface. THe points can represent the location of events (crime occurences, accidents), or physical facilities (FnB outlets, healthcare clinics).\nThis exercise uses spatstat functions to discover the spatial point processes of childcare centers in Singapore, and seeks to answer the following:\n\nAre childcare centers in Singapore randomly distributed throughout the country?\nIf not, where are the locations with a higher concentration of childcare centers?\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nAuthor’s note: Would expect childcare centres to not be randomly distributed.\n\n\n\n\n\nThis exercise uses the R packages tmap, sf, tidyverse, raster, and spatstat.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/yapho/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yapho\\AppData\\Local\\Temp\\RtmpUBg0ov\\downloaded_packages\n\n\n\npacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp)\n\n\n\n\nDownload the following:\n\nChildcare Services (GeoJSON)\nMaster Plan 2014 Subzone Boundary Data\nCostalOutline from SLA\n\nUsing st_read(), import the following geospatial data into R:\n\nchildcare_sf&lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% st_transform( crs = 3414) \n\nReading layer `child-care-services-geojson' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex3\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\nNext, we need to project the dataframes in the same projection system.\n\nmpsz_sf &lt;- st_transform(mpsz_sf, crs = 3414)\nsg_sf &lt;- st_transform(sg_sf, crs = 3414)\n# childcare_sf is already in EPSG3414\n\nPlot the datasets to observe the spatial patterns.\n\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\n\n\nCreate an alternative interactive pin map using the code below:\n\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n  #tm_dots()\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nGeospatial Data Wrangling\nConvert sf dataframes to sp’s Spatial* class\nThe code below uses as_Spatial() from the sf package to convert the three geospatial data from a simple dataframe to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nCheck the conversion:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nWe pass in the childcare dataframe to generic sp:\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\n\n\n\n\n\n\nNote\n\n\n\nNote that Spatial* and sp are different – spatial is more rigid, sp is more generic and flexible structure wise.\n\n\nDisplaying the sp objects:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nWe’ll convert to ppp so we can more easily analyse the density and clustering of childcare centres:\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNotice that a warning about duplicates occurs. In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial points patterns processes is based largely on the assumption that processes are simple, that the points cannot be coincident. balls test\nThe code below can check the duplication in ppp:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincidence points, the multiplicity() function can be used:\n\n#multiplicity(childcare_ppp) \n# clutters page ://\n\nTo know the number of locations that have more than one point event, run the code below:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe code below plots out the locations of the duplicate point events:\n\n#tmap_mode('view')\n#tm_shape(childcare) + \n#  tm_dots(alpha = 0.3, size = 0.05)\n#tmap_mode('plot')\n\n# using a simpler plot instead of mode=view for less lag:\ntm_shape(childcare) + \n  tm_dots(alpha = 0.3, size = 0.05)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nAuthor’s note: If changed to a mode=view tmap, one can more easily spot duplicates to determine if\njittering should use to adjust them – just look for darker dots! (caused by overlapping dots)\n\n\n\nTo tackle this problem, use jittering to slightly shift the duplicate points such that they no longer occur at the same point, to make them unique.\n\nchildcare_ppp &lt;- rjitter(childcare_ppp, retry = TRUE, nsimm = 1, drop = TRUE)\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nWhen analysing spatial point patterns, owin can be used to define a geographic boundary to confine our analysis.\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\nChecking the summary information:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nThe code below extracts the childcare events in Singapore, and combines both the point and polygon features in one ppp object:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)\n\n\n\n\n\n\n\n\n\n\n\nThe density() function from spatstat computes a kernel density for a given set of point events. The diggle argument can be used to automatically select a bandwidth for computing the kernel density (think of it as similar to a gridsearch cv / k-fold validation in traditional ML for the best bandwidth!)\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the plot above are too low, and make it hard to interpret.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n sigma \n489.06 \n\n\nRescale the KDE Layers to convert the unit of measurement from m to km.\n\nchildcareSG_ppp_km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw &lt;- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe resultant plot is much more legible.\nMultiple bandwidth calculation methods are available from spatstat, some of which are covered below: Cronie and van Lieshout\n\nbw.CvL(childcareSG_ppp_km)\n\n   sigma \n4.717746 \n\n\n\nkde_childcareSG_bw_CvL &lt;- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = \"gaussian\")\n\nScott’s Rule\n\n\n\n\n\n\nExpand To Learn About Scott’s Rule\n\n\n\n\n\nFrom rdocs: https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/bw.scott This rule is very fast to compute. It typically produces a larger bandwidth than bw.diggle. It is useful for estimating gradual trend and for manipulating larger datasets.\nGlen goes into more detail here:\nhttps://stats.stackexchange.com/questions/90656/kernel-bandwidth-scotts-vs-silvermans-rules\n“So both those binwidths are based on the IMSE-optimal (Integrated Mean Square Error) binwidth at the normal, one right at the optimum, the other (about 15% smaller, to get within 90% of the efficiency of the optimum at the normal)”\n\n\n\n\nbw.scott(childcareSG_ppp_km)\n\n sigma.x  sigma.y \n2.224615 1.451192 \n\n\n\nkde_childcareSG_bw_scott &lt;- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = \"gaussian\")\n\nLikelihood Cross Validation\n\nbw.ppl(childcareSG_ppp_km)\n\n    sigma \n0.4255284 \n\n\n\nkde_childcareSG_bw_ppl &lt;- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = \"gaussian\")\n\nThe plot below compares the above 3 methods with diggle\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG_bw_CvL, main = \"bw.CvL\")\nplot(kde_childcareSG_bw_scott, main = \"bw.scott\")\nplot(kde_childcareSG_bw_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\nDifferent smoothing methods are also available.\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\n\n# We add these as otherwise, bw.ppl defaults to the default gaussian kernel\n# for calculating sigma.\nsigma_epa &lt;- bw.ppl(childcareSG_ppp_km, kernel=\"epanechnikov\")\nsigma_quartic &lt;- bw.ppl(childcareSG_ppp_km, kernel=\"quartic\")\nsigma_disc &lt;- bw.ppl(childcareSG_ppp_km, kernel=\"disc\")\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp_km, sigma = sigma_epa, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\nplot(density(childcareSG_ppp_km, sigma = sigma_quartic, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\nplot(density(childcareSG_ppp_km, sigma = sigma_disc, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n\n\n\n\n\n\n\n\nFixed Bandwidth In the code below, sigma is assigned a value of 0.6, whcih represents 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = \"gaussian\")\n\nA fixed bandwidth is sensitive to highly skewed distributions of spatial points, which can be alleviated by using an adaptive bandwidth.\n\nkde_childcareSG_adapt &lt;- adaptive.density(childcareSG_ppp_km, method = \"kernel\")\n\nComparing the two:\n\npar(mfrow = c(1,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_600)\nplot(kde_childcareSG_adapt)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nAlthough we cannot conclude about the randomness yet, we can relatively safely assume where the density of childcare centres are in Singapore from this diagram, with the higher density regions shown in the Northeast (Punggol, Hougang, etc) as well as the North (Woodlands, Yio Chu Kang, Seletar) with a easy reference [here](https://sharonanngoh.com/useful-info/singapore-district-guide/) should you not want to see the district mappings here ( :( )\n\n\n\nThe conversion of a KDE output into a grid object can be done to make it compatible with mapping applications.\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThis gridded KDE object can be further converted into a raster layer.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.020708e-14, 19.50072  (min, max)\n\n\nSet the CRS:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -1.020708e-14, 19.50072  (min, max)\n\n\nDisplay the KDE raster layer:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nTHe code below extracts the targeted planning areas:\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(st_geometry(pg), main = \"Punggol\")\nplot(st_geometry(tm), main = \"Tampines\")\nplot(st_geometry(ck), main = \"Choa Chu Kang\")\nplot(st_geometry(jw), main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(pg, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nConvert these SpatialPolygon objects into owin objects:\n\npg_owin &lt;- as.owin(pg)\ntm_owin &lt;- as.owin(tm)\nck_owin &lt;- as.owin(ck)\njw_owin &lt;- as.owin(jw)\n\nExtract the childcare centre points within each of the study planning areas:\n\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]\n\nRescale from m to km:\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot out the individual areas overlaid with their childcare centres:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE, using diggle to derive the bandwidth:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\n\nWarning: Berman-Diggle Cross-Validation criterion was minimised at right-hand\nend of interval [0, 0.245]; use argument 'hmax' to specify a wider interval for\nbandwidth 'sigma'\n\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE using a fixed bandwidth of 0.25km:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n\n\n\n\n\n\n\n\n\n\n\nPerform the Clark-Evans test of aggregation:\n\nH0: Random distribution of childcare centres\nH1: Non-Random distribution of childcare centres\n\n\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55965, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nPerforming the same test on the target planning areas:\nTampines\n\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.78157, p-value = 4.036e-05\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nChoa Chu Kang\n\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.94924, p-value = 0.2241\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &gt; 0.05, H0 cannot be rejected.\nPunggol\n\nclarkevans.test(childcare_pg_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_pg_ppp\nR = 0.85612, p-value = 0.01578\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\nJurong West\n\nclarkevans.test(childcare_jw_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_jw_ppp\nR = 0.90347, p-value = 0.0416\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nThus, as the null hypothesis can be rejected on the country level, but not on the individual district level, it is safe to assume that although distributions for different districts may occasionally be random, however, overall, Singapore’s childcare centres are not randomly distributed.\n\n\n\n\n\n\nThe G function measures the distribution of the distances from an arbitrary even to its nearest event. G function on the Choa Chu Kang area:\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\nF function on the Choa Chu Kang area:\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\nF function on the Tampines area:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\nThe K function measures the number of events found up to a given distance of any particular event.\nK function on the Choa Chu Kang area:\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nK function on the Tampines area:\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nThe L function is a transformation of the K function, designed to help in identifying clustering or regularity in spatial point patterns.\nL function on the Choa Chu Kang area:\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nL function on the Tampines area:\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nCongrats for making it here! Let’s quickly summarise:\n\nG-function:\n\nCalculates the cumulative distribution of distances from each point to its nearest neighbor.\nFor each distance r, it computes the proportion of points that have their nearest neighbor within distance r.\n\n\n\n\nF-function:\n\nMeasures the distribution of distances from random locations in the study area to the nearest observed point.\nFor each distance r, it calculates the proportion of random locations that have an observed point within distance r.\n\nK-function:\n\nCounts the average number of other points within a given distance of each point, normalized by the overall density of points.\nFor each distance r, it computes the average number of points within radius r of a typical point, divided by the overall density.\n\n\n\n\nL-function:\n\nA transformation of the K-function to stabilize its variance and make it easier to interpret.\nIt’s calculated as L(r) = sqrt(K(r) / π) - r."
  },
  {
    "objectID": "exercises/ex3/ex3.html#installlaunch-r-packages",
    "href": "exercises/ex3/ex3.html#installlaunch-r-packages",
    "title": "Exercise 3",
    "section": "",
    "text": "This exercise uses the R packages tmap, sf, tidyverse, raster, and spatstat.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/yapho/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yapho\\AppData\\Local\\Temp\\RtmpUBg0ov\\downloaded_packages\n\n\n\npacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp)"
  },
  {
    "objectID": "exercises/ex3/ex3.html#download-and-import-data",
    "href": "exercises/ex3/ex3.html#download-and-import-data",
    "title": "Exercise 3",
    "section": "",
    "text": "Download the following:\n\nChildcare Services (GeoJSON)\nMaster Plan 2014 Subzone Boundary Data\nCostalOutline from SLA\n\nUsing st_read(), import the following geospatial data into R:\n\nchildcare_sf&lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% st_transform( crs = 3414) \n\nReading layer `child-care-services-geojson' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex3\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\exercises\\ex3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\nNext, we need to project the dataframes in the same projection system.\n\nmpsz_sf &lt;- st_transform(mpsz_sf, crs = 3414)\nsg_sf &lt;- st_transform(sg_sf, crs = 3414)\n# childcare_sf is already in EPSG3414\n\nPlot the datasets to observe the spatial patterns.\n\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\n\n\nCreate an alternative interactive pin map using the code below:\n\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n  #tm_dots()\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nGeospatial Data Wrangling\nConvert sf dataframes to sp’s Spatial* class\nThe code below uses as_Spatial() from the sf package to convert the three geospatial data from a simple dataframe to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nCheck the conversion:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nWe pass in the childcare dataframe to generic sp:\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\n\n\n\n\n\n\nNote\n\n\n\nNote that Spatial* and sp are different – spatial is more rigid, sp is more generic and flexible structure wise.\n\n\nDisplaying the sp objects:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nWe’ll convert to ppp so we can more easily analyse the density and clustering of childcare centres:\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNotice that a warning about duplicates occurs. In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial points patterns processes is based largely on the assumption that processes are simple, that the points cannot be coincident. balls test\nThe code below can check the duplication in ppp:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincidence points, the multiplicity() function can be used:\n\n#multiplicity(childcare_ppp) \n# clutters page ://\n\nTo know the number of locations that have more than one point event, run the code below:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe code below plots out the locations of the duplicate point events:\n\n#tmap_mode('view')\n#tm_shape(childcare) + \n#  tm_dots(alpha = 0.3, size = 0.05)\n#tmap_mode('plot')\n\n# using a simpler plot instead of mode=view for less lag:\ntm_shape(childcare) + \n  tm_dots(alpha = 0.3, size = 0.05)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nAuthor’s note: If changed to a mode=view tmap, one can more easily spot duplicates to determine if\njittering should use to adjust them – just look for darker dots! (caused by overlapping dots)\n\n\n\nTo tackle this problem, use jittering to slightly shift the duplicate points such that they no longer occur at the same point, to make them unique.\n\nchildcare_ppp &lt;- rjitter(childcare_ppp, retry = TRUE, nsimm = 1, drop = TRUE)\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nWhen analysing spatial point patterns, owin can be used to define a geographic boundary to confine our analysis.\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\nChecking the summary information:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nThe code below extracts the childcare events in Singapore, and combines both the point and polygon features in one ppp object:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "exercises/ex3/ex3.html#st-order-spatial-point-pattern-analysis",
    "href": "exercises/ex3/ex3.html#st-order-spatial-point-pattern-analysis",
    "title": "Exercise 3",
    "section": "",
    "text": "The density() function from spatstat computes a kernel density for a given set of point events. The diggle argument can be used to automatically select a bandwidth for computing the kernel density (think of it as similar to a gridsearch cv / k-fold validation in traditional ML for the best bandwidth!)\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the plot above are too low, and make it hard to interpret.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n sigma \n489.06 \n\n\nRescale the KDE Layers to convert the unit of measurement from m to km.\n\nchildcareSG_ppp_km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw &lt;- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe resultant plot is much more legible.\nMultiple bandwidth calculation methods are available from spatstat, some of which are covered below: Cronie and van Lieshout\n\nbw.CvL(childcareSG_ppp_km)\n\n   sigma \n4.717746 \n\n\n\nkde_childcareSG_bw_CvL &lt;- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = \"gaussian\")\n\nScott’s Rule\n\n\n\n\n\n\nExpand To Learn About Scott’s Rule\n\n\n\n\n\nFrom rdocs: https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/bw.scott This rule is very fast to compute. It typically produces a larger bandwidth than bw.diggle. It is useful for estimating gradual trend and for manipulating larger datasets.\nGlen goes into more detail here:\nhttps://stats.stackexchange.com/questions/90656/kernel-bandwidth-scotts-vs-silvermans-rules\n“So both those binwidths are based on the IMSE-optimal (Integrated Mean Square Error) binwidth at the normal, one right at the optimum, the other (about 15% smaller, to get within 90% of the efficiency of the optimum at the normal)”\n\n\n\n\nbw.scott(childcareSG_ppp_km)\n\n sigma.x  sigma.y \n2.224615 1.451192 \n\n\n\nkde_childcareSG_bw_scott &lt;- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = \"gaussian\")\n\nLikelihood Cross Validation\n\nbw.ppl(childcareSG_ppp_km)\n\n    sigma \n0.4255284 \n\n\n\nkde_childcareSG_bw_ppl &lt;- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = \"gaussian\")\n\nThe plot below compares the above 3 methods with diggle\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG_bw_CvL, main = \"bw.CvL\")\nplot(kde_childcareSG_bw_scott, main = \"bw.scott\")\nplot(kde_childcareSG_bw_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\nDifferent smoothing methods are also available.\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\n\n# We add these as otherwise, bw.ppl defaults to the default gaussian kernel\n# for calculating sigma.\nsigma_epa &lt;- bw.ppl(childcareSG_ppp_km, kernel=\"epanechnikov\")\nsigma_quartic &lt;- bw.ppl(childcareSG_ppp_km, kernel=\"quartic\")\nsigma_disc &lt;- bw.ppl(childcareSG_ppp_km, kernel=\"disc\")\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp_km, sigma = sigma_epa, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\nplot(density(childcareSG_ppp_km, sigma = sigma_quartic, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\nplot(density(childcareSG_ppp_km, sigma = sigma_disc, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n\n\n\n\n\n\n\n\nFixed Bandwidth In the code below, sigma is assigned a value of 0.6, whcih represents 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = \"gaussian\")\n\nA fixed bandwidth is sensitive to highly skewed distributions of spatial points, which can be alleviated by using an adaptive bandwidth.\n\nkde_childcareSG_adapt &lt;- adaptive.density(childcareSG_ppp_km, method = \"kernel\")\n\nComparing the two:\n\npar(mfrow = c(1,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_600)\nplot(kde_childcareSG_adapt)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nAlthough we cannot conclude about the randomness yet, we can relatively safely assume where the density of childcare centres are in Singapore from this diagram, with the higher density regions shown in the Northeast (Punggol, Hougang, etc) as well as the North (Woodlands, Yio Chu Kang, Seletar) with a easy reference [here](https://sharonanngoh.com/useful-info/singapore-district-guide/) should you not want to see the district mappings here ( :( )\n\n\n\nThe conversion of a KDE output into a grid object can be done to make it compatible with mapping applications.\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThis gridded KDE object can be further converted into a raster layer.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.020708e-14, 19.50072  (min, max)\n\n\nSet the CRS:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -1.020708e-14, 19.50072  (min, max)\n\n\nDisplay the KDE raster layer:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nTHe code below extracts the targeted planning areas:\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(st_geometry(pg), main = \"Punggol\")\nplot(st_geometry(tm), main = \"Tampines\")\nplot(st_geometry(ck), main = \"Choa Chu Kang\")\nplot(st_geometry(jw), main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(pg, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nConvert these SpatialPolygon objects into owin objects:\n\npg_owin &lt;- as.owin(pg)\ntm_owin &lt;- as.owin(tm)\nck_owin &lt;- as.owin(ck)\njw_owin &lt;- as.owin(jw)\n\nExtract the childcare centre points within each of the study planning areas:\n\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]\n\nRescale from m to km:\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot out the individual areas overlaid with their childcare centres:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE, using diggle to derive the bandwidth:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\n\nWarning: Berman-Diggle Cross-Validation criterion was minimised at right-hand\nend of interval [0, 0.245]; use argument 'hmax' to specify a wider interval for\nbandwidth 'sigma'\n\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE using a fixed bandwidth of 0.25km:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "exercises/ex3/ex3.html#nearest-neighbour-analysis",
    "href": "exercises/ex3/ex3.html#nearest-neighbour-analysis",
    "title": "Exercise 3",
    "section": "",
    "text": "Perform the Clark-Evans test of aggregation:\n\nH0: Random distribution of childcare centres\nH1: Non-Random distribution of childcare centres\n\n\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55965, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nPerforming the same test on the target planning areas:\nTampines\n\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.78157, p-value = 4.036e-05\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nChoa Chu Kang\n\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.94924, p-value = 0.2241\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &gt; 0.05, H0 cannot be rejected.\nPunggol\n\nclarkevans.test(childcare_pg_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_pg_ppp\nR = 0.85612, p-value = 0.01578\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\nJurong West\n\nclarkevans.test(childcare_jw_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_jw_ppp\nR = 0.90347, p-value = 0.0416\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\n\n\n\n\n\n\nConclusion\n\n\n\n\n\nThus, as the null hypothesis can be rejected on the country level, but not on the individual district level, it is safe to assume that although distributions for different districts may occasionally be random, however, overall, Singapore’s childcare centres are not randomly distributed."
  },
  {
    "objectID": "exercises/ex3/ex3.html#nd-order-spatial-point-pattern-analysis",
    "href": "exercises/ex3/ex3.html#nd-order-spatial-point-pattern-analysis",
    "title": "Exercise 3",
    "section": "",
    "text": "The G function measures the distribution of the distances from an arbitrary even to its nearest event. G function on the Choa Chu Kang area:\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\nF function on the Choa Chu Kang area:\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\nF function on the Tampines area:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\nThe K function measures the number of events found up to a given distance of any particular event.\nK function on the Choa Chu Kang area:\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nK function on the Tampines area:\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nThe L function is a transformation of the K function, designed to help in identifying clustering or regularity in spatial point patterns.\nL function on the Choa Chu Kang area:\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nL function on the Tampines area:\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nCongrats for making it here! Let’s quickly summarise:\n\nG-function:\n\nCalculates the cumulative distribution of distances from each point to its nearest neighbor.\nFor each distance r, it computes the proportion of points that have their nearest neighbor within distance r.\n\n\n\n\nF-function:\n\nMeasures the distribution of distances from random locations in the study area to the nearest observed point.\nFor each distance r, it calculates the proportion of random locations that have an observed point within distance r.\n\nK-function:\n\nCounts the average number of other points within a given distance of each point, normalized by the overall density of points.\nFor each distance r, it computes the average number of points within radius r of a typical point, divided by the overall density.\n\n\n\n\nL-function:\n\nA transformation of the K-function to stabilize its variance and make it easier to interpret.\nIt’s calculated as L(r) = sqrt(K(r) / π) - r."
  },
  {
    "objectID": "exercises/ex6/ex6.html",
    "href": "exercises/ex6/ex6.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "exercises/ex6/ex6.html#global-measures-of-spatial-autocorrelation",
    "href": "exercises/ex6/ex6.html#global-measures-of-spatial-autocorrelation",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation",
    "text": "Global Measures of Spatial Autocorrelation\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix. (as we recall from ex5)\n\nwm_q &lt;- poly2nb(hunan_join, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nRow-standardised weights matrix\nWe use a simple (“W”) here for equally rating by neighbor, but there’s other options like:\nStyle=“B” (Binary weights): This method assigns a weight of 1 to all neighboring polygons and 0 to non-neighbors. It can help reduce the edge effect but may still not fully address the issue.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nNote\n\n\n\nImportant to note:\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "exercises/ex6/ex6.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "exercises/ex6/ex6.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "Global Measures of Spatial Autocorrelation: Moran’s I"
  },
  {
    "objectID": "exercises/ex6/ex6.html#morans-i",
    "href": "exercises/ex6/ex6.html#morans-i",
    "title": "Hands-on Exercise 6",
    "section": "Moran’s I",
    "text": "Moran’s I\n\n\n\n\n\n\nNote\n\n\n\nMoran’s I is a measure of spatial autocorrelation, which assesses how similar or dissimilar values are across a geographic space. It helps determine if the pattern expressed is clustered, dispersed, or random.\n\nKey Points:\n\nPurpose: Measures the degree of spatial autocorrelation in a dataset.\nValues:\n\n+1: Perfect positive spatial autocorrelation (similar values cluster together).\n0: No spatial autocorrelation (random distribution).\n-1: Perfect negative spatial autocorrelation (dissimilar values cluster together).\n\n\n\n\n\nBelow is a chunk conducting it with moran.test() from spdep.\n\nmoran.test(hunan_join$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan_join$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nAs we can see here, as the statistic is positive (&gt;0), it indicates a positive spatial autocorrelation, meaning that similar values of GDP per capita (GDPPC) are clustered together in the Hunan region.\nFurthermore, the expectation under the null hypothesis (no spatial autocorrelation) is -0.0115, and the variance is 0.0043, resulting in a p-value of 1.095e-06, which is &lt; 0.05, meaning that we can reject a null hypothesis (no correlation) in favor of a alternate hypothesis (positive correlation).\nWe next conduct permutation testing to confirm this:\n\nset.seed(1234)\nbperm= moran.mc(hunan_join$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan_join$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nAnd it is confirmed!\n\nVisualising Monte Carlo Moran’s I\nHere’s a plot to help us visualise this:\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\nIf that chart isn’t too your liking and you want more customizability, ggplot can do it too:\n\nlibrary(ggplot2)\n\n# Assuming bperm$res contains the simulated Moran's I values\nsimulated_values &lt;- bperm$res\n\n# Create a data frame for ggplot2\ndf &lt;- data.frame(simulated_values)\n\n# Plot the histogram using ggplot2\nggplot(df, aes(x = simulated_values)) +\n  geom_histogram(binwidth = 0.02, fill = \"blue\", color = \"black\", alpha = 0.7) +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe red vertical line represents the observed Moran’s I value of 0.30075. We can see clearly from the graph that it is significantly higher than the majority of the simulated values, confirming the high spatial correlation.\n\n\nGeary’s C test\n\n\n\n\n\n\nNote\n\n\n\nGeary’s C Test is a measure of spatial autocorrelation, focusing on local spatial relationships. It assesses whether similar or dissimilar values are clustered together in a geographic space.\n\nKey Points:\n\nPurpose: Measures local spatial autocorrelation.\nValues:\n\nC &lt; 1: Positive spatial autocorrelation (similar values cluster together).\nC = 1: No spatial autocorrelation (random distribution).\nC &gt; 1: Negative spatial autocorrelation (dissimilar values cluster together).\n\n\n\n\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan_join$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan_join$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan_join$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan_join$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince it is under 1, and the p-value is 0.001 (p &lt; 0.05), this once again supports our alternate hypothesis of positive correlation, supported by our simulation which has confirmed it across the 1000 simulations.\n\n\nVisualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\nThe red vertical line represents the observed Geary C value of 0.30075. We can see clearly from the graph that it is significantly higher than the majority of the simulated values, confirming the high spatial correlation.\nNow here’s the actual result plotted:\n\n\n# Assuming you've already run the geary.mc() function and stored it in 'bperm'\n\n# Create the histogram\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Geary's C\",\n     main=\"Histogram of Simulated Geary's C with Observed Statistic\",\n     ylim=c(0, max(hist(bperm$res, plot=FALSE)$counts) * 1.1))  # Increase y-axis limit slightly\n\n# Add a vertical red line for the null hypothesis (Geary's C = 1)\nabline(v=1, col=\"red\", lwd=2)\n\n# Add a vertical blue line for the observed Geary's C\nabline(v=bperm$statistic, col=\"blue\", lwd=2)\n\n# Add a legend\nlegend(\"topright\", \n       legend=c(\"Null hypothesis (C=1)\", \"Observed Geary's C\"), \n       col=c(\"red\", \"blue\"), \n       lwd=2)\n\n# Optionally, you can add text to show the exact value of the observed statistic\ntext(bperm$statistic, 0, round(bperm$statistic, 4), pos=4, col=\"blue\")\n\n\n\n\n\n\n\n\nThis contrasted from the simulated expected value vastly, coupled with the low p-value it’s now pretty clear that we can safely go for our alternate hypothesis!"
  },
  {
    "objectID": "exercises/ex6/ex6.html#spatial-correlogram",
    "href": "exercises/ex6/ex6.html#spatial-correlogram",
    "title": "Hands-on Exercise 6",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\nMoran:\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan_join$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan_join$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan_join$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan_join$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "exercises/ex6/ex6.html#creating-a-lisa-cluster-map",
    "href": "exercises/ex6/ex6.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 6",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan_join$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan_join$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan_join$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\n\nsignif &lt;- 0.05       \n\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nAlternatively:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan_join$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\ngdppc &lt;- qtm(hunan_join, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "takehome/ex2/takehome2.html",
    "href": "takehome/ex2/takehome2.html",
    "title": "Takehome 2",
    "section": "",
    "text": "Drug abuse and trafficking in Thailand present a complex and evolving challenge that demands rigorous research and analysis. This study focuses on Thailand due to its unique position in the global drug trade and its recent policy shifts, offering valuable insights into the spatial and temporal dynamics of drug issues in Southeast Asia. Thailand’s proximity to the Golden Triangle, the largest drug production site in Asia, coupled with its developing transportation infrastructure, has positioned the country as both a significant market and a crucial transit route for illicit substances. The COVID-19 pandemic and its aftermath have added new dimensions to this landscape, as drug syndicates rapidly adapted their operations to changing circumstances. Our research aims to examine whether key indicators of drug abuse in Thailand are independent of spatial factors, while also exploring the temporal aspects of drug trends. By analyzing data on drug prevalence, pricing, distribution methods, and law enforcement efforts over recent years, we seek to uncover patterns that may inform more effective policies and interventions. The study considers these two of critical factors:\n\nThe effects of major events, such as the COVID-19 pandemic, on drug trafficking and consumption\nThe consequences of recent legislative changes, including the 2021 Narcotics Code and the 2022 Kratom Plant Act\n\nBy examining these elements, we hope to contribute to a more nuanced understanding of drug issues in Thailand, potentially revealing insights that could be applicable to other regions facing similar challenges. This research is particularly timely as Thailand, like many countries, grapples with the post-pandemic resurgence of drug activities and seeks innovative approaches to address this persistent social and public health concern.\n\npacman:: p_load(sf, tmap, tidyverse, sfdep,spdep)\n\n\ndrug_offenses &lt;- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\") %&gt;%\n  filter(types_of_drug_offenses == \"drug_use_cases\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndrug_offenses &lt;- drug_offenses %&gt;%\n  mutate(province_en = case_when(\n    province_en == \"buogkan\" ~ \"Bueng Kan\",\n    province_en == \"Loburi\" ~ \"Lop Buri\",\n    TRUE ~ province_en\n  ))\n\n\nadm1 &lt;- st_read(\"data/geospatial/tha_adm_rtsd_itos_20210121_shp\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex2\\data\\geospatial\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\n\ndrug_offenses_filtered &lt;- drug_offenses %&gt;% select(-province_th)\nadm1_filtered &lt;- adm1 %&gt;% select(-ADM1_TH, -ADM1ALT1TH, -ADM1ALT2TH, -ADM0_TH)\n\n\njointable &lt;- left_join(drug_offenses_filtered, adm1_filtered, by = c(\"province_en\" = \"ADM1_EN\"))\n\n\nsummary(jointable)\n\n  fiscal_year   types_of_drug_offenses    no_cases       province_en       \n Min.   :2017   Length:462             Min.   :   32.0   Length:462        \n 1st Qu.:2018   Class :character       1st Qu.:  798.2   Class :character  \n Median :2020   Mode  :character       Median : 1403.5   Mode  :character  \n Mean   :2020                          Mean   : 1981.7                     \n 3rd Qu.:2021                          3rd Qu.: 2440.2                     \n Max.   :2022                          Max.   :16480.0                     \n   Shape_Leng       Shape_Area       ADM1_PCODE          ADM1_REF        \n Min.   : 1.024   Min.   :0.03458   Length:462         Length:462        \n 1st Qu.: 4.163   1st Qu.:0.29209   Class :character   Class :character  \n Median : 5.463   Median :0.47344   Mode  :character   Mode  :character  \n Mean   : 5.726   Mean   :0.56368                                        \n 3rd Qu.: 7.200   3rd Qu.:0.80197                                        \n Max.   :13.777   Max.   :1.90055                                        \n  ADM1ALT1EN         ADM1ALT2EN          ADM0_EN           ADM0_PCODE       \n Length:462         Length:462         Length:462         Length:462        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      date               validOn              validTo          \n Min.   :2019-02-18   Min.   :2022-01-22   Min.   :-001-11-30  \n 1st Qu.:2019-02-18   1st Qu.:2022-01-22   1st Qu.:-001-11-30  \n Median :2019-02-18   Median :2022-01-22   Median :-001-11-30  \n Mean   :2019-02-18   Mean   :2022-01-22   Mean   :-001-11-30  \n 3rd Qu.:2019-02-18   3rd Qu.:2022-01-22   3rd Qu.:-001-11-30  \n Max.   :2019-02-18   Max.   :2022-01-22   Max.   :-001-11-30  \n          geometry  \n MULTIPOLYGON :462  \n epsg:4326    :  0  \n +proj=long...:  0  \n                    \n                    \n                    \n\n\n\ndrugoff_sf &lt;- st_as_sf(jointable)\n\n# Set the CRS to match adm1\nst_crs(drugoff_sf) &lt;- st_crs(adm1)\n\n# Verify the CRS\nprint(st_crs(drugoff_sf))\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n# Check the class of the geometry column\nprint(class(drugoff_sf$geometry))\n\n[1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\nplots &lt;- list()\n\nfor (i in 2017:2022){\n  p &lt;- drugoff_sf %&gt;%\n    filter(fiscal_year == i) %&gt;%\n    tm_shape() +\n    tm_polygons(\"no_cases\")\n  \n  plots[[paste0(\"plot\", i)]] &lt;- p\n}\n\n\ndrugoff_list &lt;- split(drugoff_sf, drugoff_sf$fiscal_year)\n\n\n tm_shape(drugoff_sf) +\n  tm_fill(\"no_cases\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nSome legend labels were too wide. These labels have been resized to 0.61, 0.61, 0.56, 0.52. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\n\ntm_shape(drugoff_sf) +\n  tm_fill(\"no_cases\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\nSome legend labels were too wide. These labels have been resized to 0.61, 0.61, 0.56. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\nAs we can see from the equal intervals, our data is pretty skewed. Thus, we shall turn to equal quantiles to have a better visualization. With the right, we can see that actually it’s only some regions that have a lot of cases, and those that do, have far more than regions than don’t. revealing that our data is very skewed on a region by region basis. From this, we should look at southern and also northeast Thailand. A possible hypothesis is that the main distribution network for the Golden Triangle is located in Northeastern Thailand, with easy links to drug production and trafficking routes from Myanmar and Laos, with a secondary distribution network in Southern Thailand, allowing for potential distribution to more southerly regions, or suggesting maritime connections to the rest of Southeast Asia like Malaysia/ Indonesia.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nplot_list &lt;- list()\n\n# Loop through the drugoff_list and create each year's plot, storing them in plot_list\nfor (year in names(drugoff_list)) {\n  p &lt;- tm_shape(drugoff_list[[year]]) +\n      tm_fill(\"no_cases\",\n              n = 5,\n              style = \"quantile\",\n              title = \"Number of Cases\") +  # Set legend title\n      tm_borders(alpha = 0.5) +\n      tm_layout(main.title = paste(\"Equal Quantile Classification\", year),\n                main.title.size = 0.8,         # Adjust the title size\n                main.title.position = c(\"center\", \"top\"),  # Center the title\n                frame = FALSE,                # Remove the frame around the plot\n                legend.outside = TRUE,        # Place the legend outside the plot\n                legend.outside.position = \"right\")\n  \n  # Store the plot in the list\n  plot_list[[year]] &lt;- p\n}\n\n# Arrange the plots in a 2x3 layout\ntmap_arrange(plotlist = plot_list, ncol = 2, nrow = 3)\n\nSome legend labels were too wide. These labels have been resized to 0.59, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.59. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.59, 0.54. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nSome legend labels were too wide. These labels have been resized to 0.59, 0.59, 0.59. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\n\n#tm_shape(adm1_filtered) + tm_polygons() + tm_shape(ports) + tm_dots(size = 0.1)"
  },
  {
    "objectID": "takehome/ex2/takehome2.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "takehome/ex2/takehome2.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Takehome 2",
    "section": "1.1.1 Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "1.1.1 Global Measures of Spatial Autocorrelation: Moran’s I\nMoran’s I is a global measure of spatial autocorrelation that helps determine whether similar values cluster together in space (positive spatial autocorrelation), disperse (negative spatial autocorrelation), or are randomly distributed. The statistic ranges from -1 to +1:\n\nValues close to +1 indicate strong positive spatial autocorrelation (clustering)\nValues close to -1 indicate strong negative spatial autocorrelation (dispersion)\nValues near 0 suggest random spatial distribution\n\nBy using Moran’s I, we can determine if the number of drug cases across Thailand’s regions are spatially correlated. This will reveal if high (or low) case numbers tend to cluster together geographically. Let’s perform a simple Moran’s and then a monte-carlo sim to check our claim stands:\n\nmoranI_DUC22 &lt;- global_moran(wm_q_DUC22$no_cases, wm_q_DUC22$nb, wm_q_DUC22$wt)\n\nglimpse(moranI_DUC22)\n\nList of 2\n $ I: num 0.213\n $ K: num 3.88\n\n\n\nglobal_moran_test(wm_q_DUC22$no_cases, wm_q_DUC22$nb, wm_q_DUC22$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.9643, p-value = 0.001517\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.213305190      -0.013157895       0.005836395 \n\n\nset seed\n\nset.seed(42069)\n\n\nglobal_moran &lt;- global_moran_perm(wm_q_DUC22$no_cases, wm_q_DUC22$nb, wm_q_DUC22$wt, nsim = 99)\n\nglobal_moran\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.21331, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nBased off our Moran’s test as well as our simulations, we can deduce that:\n\nSince our Moran’s value is positive (&gt;0 ) but only moderately, there is evidence for a moderate positive spatial autocorrelation, meaning that similar values tend to cluster together in space more than would be expected by chance.\n\nThese results are both statistically significant with both having very small p-values that are definitely &lt;0.05.\nThis is further supported by the simulation, as the observed rank of 100 out of 100 simulations means that the observed Moran’s I value was higher than all simulated values under the null hypothesis of no spatial autocorrelation."
  },
  {
    "objectID": "takehome/ex2/takehome2.html#bonus",
    "href": "takehome/ex2/takehome2.html#bonus",
    "title": "Takehome 2",
    "section": "3.0 Bonus",
    "text": "3.0 Bonus\nFor our bonus, we are going to do some EDA for fun since I ran out of time due to getting hit with food poisoning :)\n\ndrug_unf &lt;- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nunique_types &lt;- unique(drug_unf$types_of_drug_offenses)\nprint(unique_types)\n\n [1] \"drug_use_cases\"                                        \n [2] \"suspects_in_drug_use_cases\"                            \n [3] \"possession_cases\"                                      \n [4] \"suspects_in_possession_cases\"                          \n [5] \"possession_with_intent_to_distribute_cases\"            \n [6] \"suspects_in_possession_with_intent_to_distribute_cases\"\n [7] \"trafficking_cases\"                                     \n [8] \"suspects_in_trafficking_cases\"                         \n [9] \"production_cases\"                                      \n[10] \"suspects_in_production_cases\"                          \n[11] \"import_cases\"                                          \n[12] \"suspects_in_import_cases\"                              \n[13] \"export_cases\"                                          \n[14] \"suspects_in_export_cases\"                              \n[15] \"conspiracy_cases\"                                      \n[16] \"suspects_in_conspiracy_cases\"                          \n\n\n\nhead(drug_unf)\n\n# A tibble: 6 × 5\n  fiscal_year types_of_drug_offenses no_cases province_th   province_en         \n        &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;               \n1        2017 drug_use_cases            11871 กรุงเทพมหานคร  Bangkok             \n2        2017 drug_use_cases              200 ชัยนาท         Chai Nat            \n3        2017 drug_use_cases              553 นนทบุรี         Nonthaburi          \n4        2017 drug_use_cases              450 ปทุมธานี        Pathum Thani        \n5        2017 drug_use_cases              378 พระนครศรีอยุธยา Phra Nakhon Si Ayut…\n6        2017 drug_use_cases              727 ลพบุรี          Loburi              \n\n\n\n# Step 1: Filter data for 2022, remove specified case types, and reshape\nwide_data &lt;- drug_unf %&gt;%\n  filter(fiscal_year == 2022) %&gt;%\n  filter(!types_of_drug_offenses %in% c(\n    \"suspects_in_export_cases\",\n    \"export_cases\",\n    \"suspects_in_import_cases\",\n    \"import_cases\"\n  )) %&gt;%\n  select(province_th, types_of_drug_offenses, no_cases) %&gt;%\n  pivot_wider(names_from = types_of_drug_offenses, values_from = no_cases, values_fill = 0)\n\n\nlibrary(corrplot)\n\ncorrplot 0.94 loaded\n\n# Step 2: Create co-occurrence matrix\noffense_matrix &lt;- as.matrix(wide_data[,-1])  # Exclude the province column\n# Step 2.5: Remove \"_cases\" from column names\ncolnames(offense_matrix) &lt;- gsub(\"_cases$\", \"\", colnames(offense_matrix))\n# Step 3: Check for columns with zero variance\nzero_var_cols &lt;- apply(offense_matrix, 2, var) == 0\nif(any(zero_var_cols)) {\n  print(\"The following offense types have zero variance and will be removed:\")\n  print(names(zero_var_cols)[zero_var_cols])\n  offense_matrix &lt;- offense_matrix[, !zero_var_cols]\n}\n\n[1] \"The following offense types have zero variance and will be removed:\"\n[1] \"conspiracy\"             \"suspects_in_conspiracy\"\n\nco_occurrence &lt;- t(offense_matrix) %*% offense_matrix\n\n# Step 5: Handle NA and Inf values in normalization\ndiag_values &lt;- diag(co_occurrence)\nnormalization_factor &lt;- sqrt(diag_values %*% t(diag_values))\n\n# Replace 0 with a small number to avoid division by zero\nnormalization_factor[normalization_factor == 0] &lt;- 1e-10\n\nco_occurrence_norm &lt;- co_occurrence / normalization_factor\n\n\n# Step 6: Visualize the matrix using base R\nheatmap(co_occurrence_norm, \n        Rowv = NA, Colv = NA, \n        scale = \"none\",\n        main = \"Normalized Co-occurrence of Drug Offense Types\",\n        xlab = \"Drug Offense Types\", \n        ylab = \"Drug Offense Types\")\n\n# Add text labels to the heatmap\ntext(expand.grid(1:ncol(co_occurrence_norm), 1:nrow(co_occurrence_norm)),\n     labels = round(c(co_occurrence_norm), 2),\n     cex = 0.7)\n\n\n\n\n\n\n\n\nAlternatively,\n\n# Step 6: Prepare data for ggplot\nmelted_corr &lt;- as.data.frame(co_occurrence_norm) %&gt;%\n  rownames_to_column(var = \"Var1\") %&gt;%\n  pivot_longer(cols = -Var1, names_to = \"Var2\", values_to = \"value\")\n\n# Step 7: Create heatmap using ggplot2 with adjusted width and smaller text\nggplot(melted_corr, aes(x = Var1, y = Var2, fill = value)) +\n  geom_tile() +\n  geom_text(aes(label = round(value, 2)), color = \"black\", size = 2.5) + # Smaller cell text\n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0.5) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 8), # Smaller x-axis text\n    axis.text.y = element_text(size = 8), # Smaller y-axis text\n    axis.title = element_blank(),\n    plot.title = element_text(size = 12), # Smaller title\n    legend.title = element_text(size = 10), # Smaller legend title\n    legend.text = element_text(size = 8), # Smaller legend text\n    aspect.ratio = 0.7  # This makes the plot wider\n  ) +\n  labs(title = \"Normalized Co-occurrence of Drug Offense Types\",\n       fill = \"Co-occurrence\") +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0))\n\n\n\n\n\n\n\n# Save the plot with a specific width and height\nggsave(\"wide_heatmap_small_text.png\", width = 12, height = 8, units = \"in\", dpi = 300)\n\nSo essentially we can probably just combine/ rename the suspects_in columns with their respective “suspect” less column it seems :/ Cool to know.\n\nWe also now know that possession in general has high correlation with drug use cases, but trafficking/production has lower correlation. I think this opens some further questions like:\n1) Where are the distribution cases located? Are they peak in the previously seen HCSA/ highlighted Moran’s spots? Is the reason for our weird spots due to distributions?\n2) Where is our trafficking cases highlighted? Previously, we can recall a lull in use cases in our favourite spot Nakhon Sawan. Due to its favourable location, is it possible there is a normal amount of trafficking cases there due to it being the centre of the country of sorts?\n3) How are the cases connected? Can we map out the drug distribution networks through the general provincial data? We recall network based analysis…\n4) Hey, we did the hard work, maybe we can do Hierachial clustering or GWR (Geographically Weighted Regression?\nUnfortunately it is 9pm as I write this with an upcoming group meeting, so that will be resolved next time by viewers’ request~\nThanks for reading!"
  }
]