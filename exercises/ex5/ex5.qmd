---
title: "Hands-on Exercise 5"
author: "Yap Hong Xian"
date: '2024-09-11'
date-modified: '2024-09-11'
execute: 
  eval: true
  echo: true
  freeze: true
---

# Getting Started

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

# Import Geospatial Data

```{r}
hunan <- st_read(dsn = "data/geospatial",
                 layer = "Hunan")
```

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
hunan_join <- left_join(hunan, hunan2012) |>
  select(1:4, 7, 15)
```

```{r}
hunan_join
```

## Visualizing Regional Development Indicator

```{r}
basemap <- tm_shape(hunan_join) +
  tm_polygons() +
  tm_text("NAME_3", size=0.25)

gdppc <- tm_shape(hunan_join) +
  tm_fill("GDPPC", 
          breaks = c(0, 20000, 40000, 60000, 80000, 100000),
          palette = "YlOrRd",
          title = "GDPPC") +
  tm_borders(alpha = 0.5)
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

This section focuses on using `poly2nb` to compute contiguity spatial weights for a study area. This function is used to create a spatial weights matrix based on polygon contiguity. The `queen` option is used to specify that the spatial weights matrix should be based on queen contiguity.

::: callout-note
Note:

**Rook adjacency refers to neighbors that share a line segment (or border).** **Queen adjacency refers to neighbors that share a line segment (or border) or a point (or vertex)**
:::

### Computing (QUEEN) Contiguity Based Neighbors

```{r}
wm_q <- poly2nb(hunan, queen = TRUE)
summary(wm_q)
```

```{r}
wm_q[[1]]
```

```{r}
hunan_join$County[1]
```

```{r}
hunan_join$NAME_3[c(2, 3, 4, 57, 85)]
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan_join$GDPPC[nb1]
nb1
```

```{r}
#| eval: false
#| echo: false
# str(wm_q)
```

### Creating (ROOK) Contiguity Based Neighbors

```{r}
wm_r <- poly2nb(hunan_join, queen = FALSE)
summary(wm_r)
```

### Visualizing Contiguity Weights

```{r}
longitude <- map_dbl(hunan_join$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan_join$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
head(coords)
```

### Plotting Queen Contiguity Weights

```{r}
plot(hunan_join$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

### Plotting Rook Contiguity Weights

```{r}
plot(hunan_join$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### Plotting Queen and Rook Contiguity Weights

```{r}
par(mfrow=c(1,2))
plot(hunan_join$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan_join$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Computing Distance Based Neighbors

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### Computing Fixed Distance Weight Matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

The average number of links refer to the average number of neighbors for each polygon in the study area. The average number of links for the queen contiguity spatial weights matrix is 5.5, while the average number of links for the rook contiguity spatial weights matrix is 3.5. The average distance between neighboring polygons is 0.5 degrees for the distance-based spatial weights matrix.

```{r}
# str(wm_d62)
```

```{r}
# table(hunan_join$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
# table(n_comp$comp.id)
```

### Plotting Fixed Distance Weight Matrix

```{r}
plot(hunan_join$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

```{r}
par(mfrow=c(1,2))
plot(hunan_join$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan_join$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### Computing Adaptive Distance Weight Matrix

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
# str(knn6)
```

### Plotting Distance Based Neighbors

```{r}
plot(hunan_join$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on IDW

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
# ids
```

## Row-standardized Spatial Weights Matrix

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

```{r}
rswm_q$weights[10]
```

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

### Spatial Lag with Row-standardized Weights

::: callout-note
```         
**Spatial Lag** refers to the process of incorporating the influence of neighboring observations into the value of a given observation. When using **row-standardized weights**, each observation's neighbors are weighted such that the sum of the weights for each observation equals 1.  ### Key Points: - **Row-standardized weights** ensure that the influence of neighboring observations is averaged. - The spatial lag of an observation is calculated as the weighted average of its neighbors' values. - This method smooths the data by considering the spatial context, which can be particularly useful in spatial econometrics and geographic data analysis.  ### Formula: If \( W \) is the row-standardized spatial weights matrix and \( y \) is the vector of observations, the spatial lag \( Wy \) is given by: \[ (Wy)_i = \sum_{j} w_{ij} y_j \] where \( w_{ij} \) are the elements of the weights matrix \( W \).  ### Example: Consider a simple 3x3 grid of observations. After row-standardizing the weights matrix, the spatial lag for each observation is computed as the average of its neighbors' values.
```
:::

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan_join$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan_join$GDPPC[nb1]
nb1
```

Q: Can you see the meaning of the Spatial lag?

```{r}
lag.list <- list(hunan_join$NAME_3, lag.listw(rswm_q, hunan_join$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan_join <- left_join(hunan_join,lag.res)
```

```{r}
head(hunan_join)
```

```{r}
gdppc <- qtm(hunan_join, "GDPPC")
lag_gdppc <- qtm(hunan_join, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial Lag as sum of neighboring values

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
lag_sum <- list(hunan_join$NAME_3, lag.listw(b_weights2, hunan_join$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

```{r}
hunan <- left_join(hunan_join, lag.res)
```

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial Window Average

```{r}
wm_qs <- include.self(wm_q)
```

```{r}
wm_qs[[1]]
```

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial Window Sum

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
