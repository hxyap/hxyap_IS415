{
  "hash": "df26ad4c28b3acfe770e7b54c87d7141",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Takehome 1\"\nauthor: \"Yap Hong Xian\"\ndate: \"September 02, 2024\"\ndate-modified: \"September 02, 2024\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInstalling package into 'C:/Users/yapho/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'maptools' successfully unpacked and MD5 sums checked\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: cannot remove prior installation of package 'maptools'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\yapho\\AppData\\Local\\R\\win-library\\4.4\\00LOCK\\maptools\\libs\\x64\\maptools.dll\nto\nC:\\Users\\yapho\\AppData\\Local\\R\\win-library\\4.4\\maptools\\libs\\x64\\maptools.dll:\nPermission denied\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: restored 'maptools'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\tC:\\Users\\yapho\\AppData\\Local\\Temp\\RtmpKg8vpO\\downloaded_packages\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, viridis, classInt, maptools, OpenStreetMap, stars, spdep, prophet, tmaptools, sparr, igraph, ggraph)\n```\n:::\n\n\n# Introduction: Armed Conflict in Myanmar\n\nMyanmar, formerly known as Burma, is a country in Southeast Asia with a rich cultural heritage and a complex, often troubled modern history. With a population of about 54 million people and over 135 distinct ethnic groups, Myanmar is a tapestry of diverse cultures, languages, and traditions. However, this diversity has also been a source of long-standing tensions and conflicts.\n\n## Historical Context\n\nSince gaining independence from British rule in 1948, Myanmar has grappled with numerous internal conflicts. For decades, the country was under military rule, which ended officially in 2011 with a transition to a quasi-civilian government. However, in February 2021, the military (Tatmadaw) seized power again in a coup, plunging the country back into political turmoil and reigniting many dormant conflicts.\n\n## Key Factors in Myanmar's Conflicts\n\nOur analysis of armed conflict in Myanmar focuses on three primary factors that have historically been, and continue to be, major drivers of instability:\n\n1\\. **Religious Tensions**: Myanmar is predominantly Buddhist, but with significant Muslim, Christian, and animist minorities. Religious tensions, particularly between Buddhists and Muslims, have led to violent conflicts, most notably the persecution of the Rohingya Muslim minority in Rakhine State.\n\n2\\. **Ethnic Tensions**: The country's ethnic diversity has been a source of both cultural richness and conflict. Many ethnic minority groups, particularly in border areas, have long sought greater autonomy or independence from the central government dominated by the Bamar majority. These tensions have resulted in some of the world's longest-running civil wars.\n\n3\\. **Drug Trade and Infrastructure Development**: Myanmar is part of the Golden Triangle, one of the world's largest drug-producing regions. The drug trade, particularly methamphetamine and opium, has fueled conflicts and corrupted institutions. Simultaneously, infrastructure development projects, often involving foreign investment, have sometimes exacerbated local tensions over land rights and resource allocation.\n\n## Purpose of the Analysis\n\nGiven this complex backdrop, our geospatial analysis of armed conflict in Myanmar aims to:\n\n1\\. Identify patterns and hotspots of armed conflict.\n\n2\\. Examine how these factors interact and potentially exacerbate each other in different regions of the country.\n\n3\\. Track changes in conflict patterns over time, particularly in relation to significant political events like the 2021 military coup.\n\nBy focusing on these aspects, we hope to provide valuable insights that can inform humanitarian responses, contribute to a better understanding of conflict dynamics, and assist in developing more effective strategies for peace-building and development in the region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_sf <- read_csv(\"data/ACLED_Myanmar.csv\") %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 32647) %>%\n  mutate(event_date = dmy(event_date))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nacled_sf %>%\n  filter(year == 2023 |\n           event_type == \"Political violence\") %>%\n  tm_shape() +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(acled_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 55,574\nColumns: 30\n$ event_id_cnty      <chr> \"MMR56099\", \"MMR56222\", \"MMR56370\", \"MMR56376\", \"MM…\n$ event_date         <date> 2023-12-31, 2023-12-31, 2023-12-31, 2023-12-31, 20…\n$ year               <dbl> 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 202…\n$ time_precision     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ disorder_type      <chr> \"Political violence\", \"Political violence\", \"Politi…\n$ event_type         <chr> \"Explosions/Remote violence\", \"Explosions/Remote vi…\n$ sub_event_type     <chr> \"Shelling/artillery/missile attack\", \"Shelling/arti…\n$ actor1             <chr> \"Military Forces of Myanmar (2021-)\", \"Military For…\n$ assoc_actor_1      <chr> NA, NA, NA, NA, NA, NA, \"Daw Na Column; YGF: Ye Gue…\n$ inter1             <dbl> 1, 1, 3, 6, 1, 1, 3, 1, 2, 1, 1, 2, 2, 1, 1, 3, 3, …\n$ actor2             <chr> NA, \"Civilians (Myanmar)\", \"Military Forces of Myan…\n$ assoc_actor_2      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ inter2             <dbl> 0, 7, 1, 0, 7, 0, 1, 0, 1, 7, 7, 1, 1, 0, 0, 1, 1, …\n$ interaction        <dbl> 10, 17, 13, 60, 17, 10, 13, 10, 12, 17, 17, 12, 12,…\n$ civilian_targeting <chr> NA, \"Civilian targeting\", NA, NA, NA, NA, NA, NA, N…\n$ iso                <dbl> 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 1…\n$ region             <chr> \"Southeast Asia\", \"Southeast Asia\", \"Southeast Asia…\n$ country            <chr> \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanmar\", \"Myanma…\n$ admin1             <chr> \"Mon\", \"Rakhine\", \"Bago-West\", \"Sagaing\", \"Bago-Wes…\n$ admin2             <chr> \"Mawlamyine\", \"Maungdaw\", \"Thayarwady\", \"Yinmarbin\"…\n$ admin3             <chr> \"Ye\", \"Maungdaw\", \"Nattalin\", \"Salingyi\", \"Nattalin…\n$ location           <chr> \"Aing Shey\", \"Kaing Gyi (NaTaLa)\", \"Kyauk Pyoke\", \"…\n$ geo_precision      <dbl> 1, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, …\n$ source             <chr> \"Democratic Voice of Burma\", \"Development Media Gro…\n$ source_scale       <chr> \"National\", \"Subnational\", \"National\", \"National\", …\n$ notes              <chr> \"On 31 December 2023, in Aing Shey village (Ye town…\n$ fatalities         <dbl> 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, …\n$ tags               <chr> NA, NA, NA, \"crowd size=no report\", NA, NA, NA, NA,…\n$ timestamp          <dbl> 1704831212, 1704831213, 1704831214, 1704831214, 170…\n$ geometry           <POINT [m]> POINT (393190.2 1690159), POINT (-183852.6 23…\n```\n\n\n:::\n:::\n\n\nLet's load our boundary:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyanmar_boundary_sf <- st_read(dsn = \"data/mmr_polbnda_adm0_250k_mimu_1\", \n                layer = \"mmr_polbnda_adm0_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm0_250k_mimu_1' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex1\\data\\mmr_polbnda_adm0_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n# Compare CRS\n\nSince we've gotten our data from different sources, let's find out if they follow Myanmar's crs system WGS84 to ensure consistency for our analysis!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check CRS of acled_sf\n#print(\"CRS of ACLED data:\")\n# print(st_crs(acled_sf))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform Myanmar boundary to match ACLED data CRS\nmyanmar_boundary_sf <- st_transform(myanmar_boundary_sf, st_crs(acled_sf))\n# Unite all geometries\nmyanmar_boundary_sf <- st_union(myanmar_boundary_sf)\n\n# Remove Z or M dimensions\nmyanmar_boundary_sf <- st_zm(myanmar_boundary_sf, drop = TRUE, what = \"ZM\")\n\n# print(st_crs(myanmar_boundary_sf))\n```\n:::\n\n\nNow that our data is formatted in the same way, we can start slowly plotting our boundary to do our initial analysis of the conflict!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a simple plot of the Myanmar boundary\ntm_shape(myanmar_boundary_sf) +\n  tm_borders(col = \"blue\", lwd = 2) +\n  tm_fill(col = \"lightblue\", alpha = 0.5) +\n  tm_layout(title = \"Myanmar Boundary\",\n            title.size = 1.2,\n            title.position = c(\"center\", \"top\"))\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nLet's check if our event types exist as defined:\n\nHere we check for unique events to ensure we are capturing the correct event types:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_event_types <- unique(acled_sf$event_type)\nprint(\"Unique event types in the dataset:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Unique event types in the dataset:\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(unique_event_types)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Explosions/Remote violence\" \"Battles\"                   \n[3] \"Protests\"                   \"Strategic developments\"    \n[5] \"Violence against civilians\" \"Riots\"                     \n```\n\n\n:::\n:::\n\n\nSweet! looks good! Let's filter out now for our wanted event types!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter ACLED data for the specified date range and event types\nevent_types <- c(\"Battles\", \"Explosions/Remote violence\", \"Strategic developments\", \"Violence against civilians\")\nacled_filtered <- acled_sf %>%\n  filter(event_date >= as.Date(\"2021-01-01\") & event_date <= as.Date(\"2024-06-30\"),\n         event_type %in% event_types) %>%\n  mutate(quarter = paste0(year(event_date), \"_Q\", quarter(event_date)))\n```\n:::\n\n\n# Defining our KDE function, and ppp\n\nTo gain a better understanding of where we should look at to find the hotspot of the conflict, we should use KDE here to visualize the \"hot-cold\" spots on the map, where redder points have more conflict and \"colder\" bluer points have less. Furthermore, KDE also smoothes out the data, making it easier to visualize on the map where we should pay attention to.\n\nWe'll first convert to ppp (planar point pattern) so we can do use it for our KDE analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create window for ppp objects\nmyanmar_window <- as.owin(myanmar_boundary_sf)\n```\n:::\n\n\nHere, we create the quarter column in order to break down the conflict into distinct time bounded quarters. This will come in handy later should we choose to do snapshots at every quarter to visualize how conflict has evolved in Myanmar over time, as well as facilitating temporal analysis. Note that we are using numeric quarters here since it makes it easier later on for us to plot spatiotemporal KDE!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the Quarter column\nacled_filtered$Quarter <- paste0(year(acled_filtered$event_date), \"_Q\", quarter(acled_filtered$event_date))\n#numeric (1-12)\nacled_filtered$QuarterNumeric <- (year(acled_filtered$event_date) - 2021) * 4 + quarter(acled_filtered$event_date)\n\n# Create a new sf object with only Quarter and geometry\nacled_quarter <- st_sf(\n  QuarterNumeric = acled_filtered$QuarterNumeric,\n  geometry = st_geometry(acled_filtered)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacled_quarter_ppp <- as.ppp(acled_quarter)\n```\n:::\n\n\nIn order to avoid duplicated data point on the same location messing with our analysis, we separate them via jittering as below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply jittering\nacled_q_ppp_jit <- rjitter(acled_quarter_ppp, retry=TRUE, nsim=1, drop=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif (any(duplicated(acled_q_ppp_jit))) {\n  warning(\"Some duplicates remain after jittering\")\n}\n```\n:::\n\n\nFinally, we segragate the data into our previous Myanmar boundary window so we ensure everything can be plotted within the borders of Myanmar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narmed_q_owin <- acled_q_ppp_jit[myanmar_window]\nsummary(armed_q_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  35611 points\nAverage intensity 5.317348e-08 points per square unit\n\nCoordinates are given to 16 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.839  10.000  12.000 \n\nWindow: polygonal boundary\n563 separate polygons (3 holes)\n                   vertices         area relative.area\npolygon 1             37581  6.60254e+11      9.86e-01\npolygon 2                26  2.85778e+06      4.27e-06\npolygon 3                43  7.32477e+06      1.09e-05\npolygon 4               103  1.86991e+07      2.79e-05\npolygon 5                37  9.32316e+06      1.39e-05\npolygon 6               371  2.43869e+08      3.64e-04\npolygon 7               297  2.84905e+08      4.25e-04\npolygon 8                33  1.68222e+07      2.51e-05\npolygon 9                33  4.47665e+05      6.68e-07\npolygon 10               19  1.34593e+05      2.01e-07\npolygon 11               39  1.36327e+06      2.04e-06\npolygon 12              137  1.55547e+08      2.32e-04\npolygon 13               36  8.76479e+06      1.31e-05\npolygon 14               79  3.08116e+07      4.60e-05\npolygon 15              388  2.25271e+08      3.36e-04\npolygon 16              316  7.78512e+07      1.16e-04\npolygon 17               13  1.09564e+05      1.64e-07\npolygon 18               18  3.49727e+05      5.22e-07\npolygon 19               31  1.23017e+06      1.84e-06\npolygon 20               16  6.55537e+05      9.79e-07\npolygon 21               24  8.49487e+05      1.27e-06\npolygon 22               30  2.54436e+06      3.80e-06\npolygon 23              336  4.15806e+07      6.21e-05\npolygon 24              330  1.69190e+08      2.53e-04\npolygon 25               47  1.08035e+07      1.61e-05\npolygon 26               39  4.94369e+06      7.38e-06\npolygon 27               23  2.72438e+06      4.07e-06\npolygon 28               33  5.70263e+06      8.52e-06\npolygon 29               90  4.20329e+07      6.28e-05\npolygon 30               28  1.35341e+06      2.02e-06\npolygon 31              225  1.08816e+08      1.62e-04\npolygon 32               33  9.16670e+06      1.37e-05\npolygon 33              192  7.02655e+07      1.05e-04\npolygon 34               49  1.49245e+07      2.23e-05\npolygon 35               98  1.79076e+07      2.67e-05\npolygon 36                6  6.37552e+05      9.52e-07\npolygon 37               49  1.01233e+07      1.51e-05\npolygon 38              141  3.43053e+07      5.12e-05\npolygon 39              195  3.24345e+07      4.84e-05\npolygon 40               51  3.38313e+06      5.05e-06\npolygon 41               34  2.01400e+06      3.01e-06\npolygon 42               13  2.50435e+05      3.74e-07\npolygon 43                9  9.04824e+04      1.35e-07\npolygon 44               34  4.61794e+06      6.90e-06\npolygon 45               17  4.58200e+05      6.84e-07\npolygon 46               15  2.74776e+05      4.10e-07\npolygon 47               21  5.34978e+05      7.99e-07\npolygon 48               19  4.55347e+05      6.80e-07\npolygon 49               71  3.42557e+06      5.11e-06\npolygon 50               24  1.32420e+06      1.98e-06\npolygon 51               15  3.26247e+05      4.87e-07\npolygon 52               39  8.65790e+05      1.29e-06\npolygon 53               43  1.41627e+06      2.11e-06\npolygon 54               24  7.52068e+05      1.12e-06\npolygon 55               96  1.32101e+07      1.97e-05\npolygon 56               38  1.18003e+06      1.76e-06\npolygon 57              429  5.99087e+08      8.95e-04\npolygon 58               13  1.74105e+05      2.60e-07\npolygon 59               19  2.52336e+05      3.77e-07\npolygon 60               16  3.11495e+05      4.65e-07\npolygon 61               11  9.11047e+04      1.36e-07\npolygon 62               12  2.13470e+05      3.19e-07\npolygon 63               17  5.82663e+05      8.70e-07\npolygon 64               56  2.60440e+07      3.89e-05\npolygon 65              107  4.91389e+06      7.34e-06\npolygon 66               51  2.79076e+06      4.17e-06\npolygon 67               89  1.61156e+07      2.41e-05\npolygon 68               28  1.30499e+06      1.95e-06\npolygon 69               11  1.27616e+05      1.91e-07\npolygon 70               34  2.54199e+06      3.80e-06\npolygon 71               27  1.72476e+06      2.58e-06\npolygon 72               37  2.01882e+06      3.01e-06\npolygon 73               23  1.65571e+06      2.47e-06\npolygon 74               33  3.05816e+06      4.57e-06\npolygon 75               14  3.23153e+05      4.83e-07\npolygon 76               91  1.51209e+07      2.26e-05\npolygon 77               12  2.42901e+05      3.63e-07\npolygon 78               11  1.37889e+05      2.06e-07\npolygon 79               58  2.29751e+07      3.43e-05\npolygon 80               48  5.10265e+06      7.62e-06\npolygon 81               22  1.30706e+06      1.95e-06\npolygon 82               15  3.49480e+05      5.22e-07\npolygon 83               17  1.57570e+06      2.35e-06\npolygon 84               34  3.68725e+06      5.51e-06\npolygon 85               34  5.21904e+06      7.79e-06\npolygon 86               24  5.42734e+06      8.10e-06\npolygon 87              422  4.66497e+08      6.97e-04\npolygon 88              142  2.98767e+07      4.46e-05\npolygon 89              132  2.18707e+07      3.27e-05\npolygon 90               19  5.88230e+05      8.78e-07\npolygon 91               22  1.77611e+06      2.65e-06\npolygon 92               40  4.09952e+06      6.12e-06\npolygon 93               28  1.47685e+06      2.21e-06\npolygon 94               67  9.99685e+06      1.49e-05\npolygon 95               25  4.82266e+05      7.20e-07\npolygon 96               16  4.14093e+05      6.18e-07\npolygon 97               26  3.03928e+06      4.54e-06\npolygon 98               14  1.53563e+05      2.29e-07\npolygon 99               19  5.08538e+05      7.59e-07\npolygon 100              16  1.80565e+05      2.70e-07\npolygon 101              26  9.75091e+05      1.46e-06\npolygon 102              19  2.15295e+05      3.21e-07\npolygon 103              16  3.50061e+05      5.23e-07\npolygon 104 (hole)        3 -1.78834e+02     -2.67e-10\npolygon 105              14  2.11571e+05      3.16e-07\npolygon 106              11  1.59536e+05      2.38e-07\npolygon 107             111  7.35028e+07      1.10e-04\npolygon 108              54  9.35305e+06      1.40e-05\npolygon 109              19  6.34649e+05      9.48e-07\npolygon 110              79  1.47390e+07      2.20e-05\npolygon 111              10  3.74827e+04      5.60e-08\npolygon 112              13  1.37100e+05      2.05e-07\npolygon 113              31  4.47193e+06      6.68e-06\npolygon 114              19  1.23742e+06      1.85e-06\npolygon 115              20  1.79201e+06      2.68e-06\npolygon 116              16  2.19464e+05      3.28e-07\npolygon 117              11  7.94092e+04      1.19e-07\npolygon 118              14  1.45779e+05      2.18e-07\npolygon 119              31  6.24672e+05      9.33e-07\npolygon 120              11  2.29288e+04      3.42e-08\npolygon 121              18  2.10998e+05      3.15e-07\npolygon 122              26  2.52571e+06      3.77e-06\npolygon 123              16  5.77783e+05      8.63e-07\npolygon 124              26  8.87985e+05      1.33e-06\npolygon 125              13  1.10557e+05      1.65e-07\npolygon 126              21  9.55338e+05      1.43e-06\npolygon 127              32  2.18189e+06      3.26e-06\npolygon 128              18  7.64830e+05      1.14e-06\npolygon 129              34  1.71336e+06      2.56e-06\npolygon 130             115  9.29594e+05      1.39e-06\npolygon 131              68  2.06761e+05      3.09e-07\npolygon 132              40  4.87851e+06      7.28e-06\npolygon 133              10  7.43137e+04      1.11e-07\npolygon 134              17  5.95020e+05      8.88e-07\npolygon 135              21  4.02132e+05      6.00e-07\npolygon 136              21  1.09635e+06      1.64e-06\npolygon 137              14  1.15356e+05      1.72e-07\npolygon 138              20  3.13610e+05      4.68e-07\npolygon 139             275  3.92648e+08      5.86e-04\npolygon 140              16  2.19612e+05      3.28e-07\npolygon 141              13  2.64858e+05      3.95e-07\npolygon 142              23  1.25549e+06      1.87e-06\npolygon 143               9  1.79312e+05      2.68e-07\npolygon 144              15  2.93132e+05      4.38e-07\npolygon 145              15  5.29892e+05      7.91e-07\npolygon 146              23  4.95351e+05      7.40e-07\npolygon 147              14  4.41976e+05      6.60e-07\npolygon 148              19  3.32318e+05      4.96e-07\npolygon 149              16  4.15914e+05      6.21e-07\npolygon 150              22  5.10526e+05      7.62e-07\npolygon 151              48  1.87148e+07      2.79e-05\npolygon 152              18  1.62882e+06      2.43e-06\npolygon 153              71  2.43615e+07      3.64e-05\npolygon 154             116  5.16444e+07      7.71e-05\npolygon 155              19  1.54144e+06      2.30e-06\npolygon 156              11  2.01013e+05      3.00e-07\npolygon 157              20  2.31201e+06      3.45e-06\npolygon 158              15  5.94674e+05      8.88e-07\npolygon 159             218  1.56252e+08      2.33e-04\npolygon 160             162  8.80247e+07      1.31e-04\npolygon 161              16  3.69968e+05      5.52e-07\npolygon 162              14  1.61451e+05      2.41e-07\npolygon 163              18  5.54566e+05      8.28e-07\npolygon 164              19  5.07078e+05      7.57e-07\npolygon 165              57  6.86475e+06      1.03e-05\npolygon 166              15  6.56018e+05      9.80e-07\npolygon 167              21  6.65092e+05      9.93e-07\npolygon 168              15  5.97784e+05      8.93e-07\npolygon 169              37  2.56010e+06      3.82e-06\npolygon 170              13  1.66996e+05      2.49e-07\npolygon 171              20  8.18381e+05      1.22e-06\npolygon 172              21  2.89704e+06      4.33e-06\npolygon 173              15  4.08213e+05      6.10e-07\npolygon 174             104  4.71547e+07      7.04e-05\npolygon 175              28  3.80443e+06      5.68e-06\npolygon 176              67  3.17343e+07      4.74e-05\npolygon 177             730  9.20735e+08      1.37e-03\npolygon 178              16  2.01576e+05      3.01e-07\npolygon 179              12  1.41506e+05      2.11e-07\npolygon 180              15  4.92125e+05      7.35e-07\npolygon 181              18  1.58128e+06      2.36e-06\npolygon 182              25  1.94322e+06      2.90e-06\npolygon 183              12  2.51373e+05      3.75e-07\npolygon 184             412  4.47936e+08      6.69e-04\npolygon 185              22  7.57105e+05      1.13e-06\npolygon 186              16  6.97434e+05      1.04e-06\npolygon 187              39  4.45130e+06      6.65e-06\npolygon 188              13  8.83786e+05      1.32e-06\npolygon 189              10  2.06200e+05      3.08e-07\npolygon 190              76  3.60497e+07      5.38e-05\npolygon 191              13  4.56433e+05      6.82e-07\npolygon 192              28  2.30613e+06      3.44e-06\npolygon 193              27  2.50338e+06      3.74e-06\npolygon 194              14  4.69238e+05      7.01e-07\npolygon 195              10  1.69886e+05      2.54e-07\npolygon 196              16  5.42822e+05      8.11e-07\npolygon 197              10  1.17633e+05      1.76e-07\npolygon 198               8  7.08579e+04      1.06e-07\npolygon 199             144  7.85300e+07      1.17e-04\npolygon 200              37  1.93477e+06      2.89e-06\npolygon 201              25  5.59996e+05      8.36e-07\npolygon 202              44  2.86031e+06      4.27e-06\npolygon 203              26  1.26276e+06      1.89e-06\npolygon 204             149  1.37840e+08      2.06e-04\npolygon 205              18  4.84958e+05      7.24e-07\npolygon 206              73  2.93195e+07      4.38e-05\npolygon 207              45  6.87481e+06      1.03e-05\npolygon 208              64  1.80880e+07      2.70e-05\npolygon 209              12  8.76879e+05      1.31e-06\npolygon 210              26  2.78381e+06      4.16e-06\npolygon 211              35  8.72326e+06      1.30e-05\npolygon 212              53  1.06237e+07      1.59e-05\npolygon 213              26  5.40467e+06      8.07e-06\npolygon 214             148  1.05037e+08      1.57e-04\npolygon 215              21  8.32798e+05      1.24e-06\npolygon 216              21  2.23023e+06      3.33e-06\npolygon 217               8  6.30805e+05      9.42e-07\npolygon 218              78  3.67603e+07      5.49e-05\npolygon 219              18  1.64745e+06      2.46e-06\npolygon 220              58  1.31747e+07      1.97e-05\npolygon 221              94  1.16837e+07      1.74e-05\npolygon 222              53  3.17801e+06      4.75e-06\npolygon 223             137  8.46454e+06      1.26e-05\npolygon 224              23  4.36507e+05      6.52e-07\npolygon 225              27  9.72136e+05      1.45e-06\npolygon 226              55  1.98854e+06      2.97e-06\npolygon 227              48  1.02651e+07      1.53e-05\npolygon 228              15  3.16153e+05      4.72e-07\npolygon 229              22  8.93201e+05      1.33e-06\npolygon 230              18  2.91538e+05      4.35e-07\npolygon 231              59  3.70736e+06      5.54e-06\npolygon 232              11  1.55205e+05      2.32e-07\npolygon 233              14  1.87401e+05      2.80e-07\npolygon 234              11  6.54128e+04      9.77e-08\npolygon 235              11  8.64659e+04      1.29e-07\npolygon 236              12  2.25129e+05      3.36e-07\npolygon 237              30  2.72178e+06      4.06e-06\npolygon 238 (hole)        3 -2.26252e+00     -3.38e-12\npolygon 239             180  1.80314e+07      2.69e-05\npolygon 240              14  4.01942e+05      6.00e-07\npolygon 241             103  1.33467e+07      1.99e-05\npolygon 242              14  2.07708e+05      3.10e-07\npolygon 243              55  4.38623e+06      6.55e-06\npolygon 244              41  4.69733e+06      7.01e-06\npolygon 245              74  3.92633e+06      5.86e-06\npolygon 246              31  2.79477e+06      4.17e-06\npolygon 247              17  8.74607e+05      1.31e-06\npolygon 248              26  4.50962e+05      6.73e-07\npolygon 249              18  1.15065e+06      1.72e-06\npolygon 250             164  1.48037e+07      2.21e-05\npolygon 251              12  3.17290e+05      4.74e-07\npolygon 252              69  2.59551e+07      3.88e-05\npolygon 253              37  7.85963e+05      1.17e-06\npolygon 254              14  3.37873e+05      5.05e-07\npolygon 255              12  1.77980e+05      2.66e-07\npolygon 256              21  6.46195e+05      9.65e-07\npolygon 257              24  2.69998e+06      4.03e-06\npolygon 258              30  1.00675e+06      1.50e-06\npolygon 259              57  4.22747e+06      6.31e-06\npolygon 260              23  8.63543e+05      1.29e-06\npolygon 261              11  2.01925e+05      3.02e-07\npolygon 262              95  2.88232e+07      4.30e-05\npolygon 263             452  9.64208e+07      1.44e-04\npolygon 264              77  1.72297e+07      2.57e-05\npolygon 265              16  3.33522e+05      4.98e-07\npolygon 266              19  6.82895e+05      1.02e-06\npolygon 267              43  3.95062e+06      5.90e-06\npolygon 268              29  1.00709e+06      1.50e-06\npolygon 269              21  8.90014e+05      1.33e-06\npolygon 270              22  7.93453e+05      1.18e-06\npolygon 271              13  4.52813e+05      6.76e-07\npolygon 272              30  1.49817e+06      2.24e-06\npolygon 273              48  4.23996e+06      6.33e-06\npolygon 274              37  1.20290e+06      1.80e-06\npolygon 275              19  4.85805e+05      7.25e-07\npolygon 276              46  2.18001e+06      3.26e-06\npolygon 277               7  1.33723e+05      2.00e-07\npolygon 278              54  1.82059e+07      2.72e-05\npolygon 279              10  8.57866e+05      1.28e-06\npolygon 280              14  1.98445e+05      2.96e-07\npolygon 281              19  4.68357e+05      6.99e-07\npolygon 282              52  8.57765e+06      1.28e-05\npolygon 283              73  7.91998e+06      1.18e-05\npolygon 284              23  8.19561e+06      1.22e-05\npolygon 285              10  1.06594e+05      1.59e-07\npolygon 286             169  1.39462e+07      2.08e-05\npolygon 287              17  2.55915e+05      3.82e-07\npolygon 288              12  1.81516e+05      2.71e-07\npolygon 289              16  3.68509e+05      5.50e-07\npolygon 290              12  1.24954e+05      1.87e-07\npolygon 291            1012  4.61886e+08      6.90e-04\npolygon 292              15  5.42647e+05      8.10e-07\npolygon 293              12  5.53088e+05      8.26e-07\npolygon 294              24  1.06455e+06      1.59e-06\npolygon 295              14  3.17038e+05      4.73e-07\npolygon 296              17  1.25559e+06      1.87e-06\npolygon 297              16  1.92407e+06      2.87e-06\npolygon 298              80  1.86306e+07      2.78e-05\npolygon 299              11  6.83880e+04      1.02e-07\npolygon 300             166  4.21470e+07      6.29e-05\npolygon 301              22  1.36174e+06      2.03e-06\npolygon 302              31  6.07363e+05      9.07e-07\npolygon 303              10  1.27067e+05      1.90e-07\npolygon 304             164  5.02951e+07      7.51e-05\npolygon 305              17  1.20798e+06      1.80e-06\npolygon 306              59  2.41720e+06      3.61e-06\npolygon 307              12  2.52952e+05      3.78e-07\npolygon 308              14  2.44407e+05      3.65e-07\npolygon 309              43  4.89177e+06      7.30e-06\npolygon 310              40  3.86642e+06      5.77e-06\npolygon 311              23  4.59203e+05      6.86e-07\npolygon 312              14  1.79442e+05      2.68e-07\npolygon 313              13  1.61191e+05      2.41e-07\npolygon 314              43  1.33365e+06      1.99e-06\npolygon 315              75  1.20247e+07      1.80e-05\npolygon 316              17  9.96466e+04      1.49e-07\npolygon 317              22  1.60660e+06      2.40e-06\npolygon 318             730  1.16983e+08      1.75e-04\npolygon 319             129  7.87539e+06      1.18e-05\npolygon 320              22  4.66256e+05      6.96e-07\npolygon 321              19  5.44519e+05      8.13e-07\npolygon 322              16  3.73911e+05      5.58e-07\npolygon 323              88  3.47678e+07      5.19e-05\npolygon 324              46  3.23711e+06      4.83e-06\npolygon 325              47  9.17482e+05      1.37e-06\npolygon 326              14  4.44869e+05      6.64e-07\npolygon 327              43  1.29527e+06      1.93e-06\npolygon 328              65  3.20974e+06      4.79e-06\npolygon 329             306  1.83695e+07      2.74e-05\npolygon 330              17  4.25486e+05      6.35e-07\npolygon 331              29  1.08467e+06      1.62e-06\npolygon 332              26  1.16602e+06      1.74e-06\npolygon 333             135  4.90655e+06      7.33e-06\npolygon 334              23  1.87723e+06      2.80e-06\npolygon 335              21  7.02338e+05      1.05e-06\npolygon 336              30  4.99970e+06      7.47e-06\npolygon 337              21  7.71571e+05      1.15e-06\npolygon 338              13  1.47832e+05      2.21e-07\npolygon 339              26  3.17307e+06      4.74e-06\npolygon 340              17  1.03642e+06      1.55e-06\npolygon 341             100  8.74537e+06      1.31e-05\npolygon 342              11  1.13950e+05      1.70e-07\npolygon 343              26  8.27840e+05      1.24e-06\npolygon 344              17  4.10882e+05      6.14e-07\npolygon 345              13  1.49250e+05      2.23e-07\npolygon 346              35  1.76408e+06      2.63e-06\npolygon 347              15  2.03390e+05      3.04e-07\npolygon 348              18  1.70982e+05      2.55e-07\npolygon 349              32  7.98599e+06      1.19e-05\npolygon 350              27  3.20839e+05      4.79e-07\npolygon 351             539  1.17139e+08      1.75e-04\npolygon 352              51  1.57614e+06      2.35e-06\npolygon 353              19  3.60772e+05      5.39e-07\npolygon 354              58  2.10060e+06      3.14e-06\npolygon 355              13  1.70224e+05      2.54e-07\npolygon 356              11  6.11736e+05      9.13e-07\npolygon 357              35  5.26152e+06      7.86e-06\npolygon 358              16  1.99371e+05      2.98e-07\npolygon 359              14  4.48979e+05      6.70e-07\npolygon 360              25  1.92913e+06      2.88e-06\npolygon 361              16  4.26157e+05      6.36e-07\npolygon 362              46  1.88229e+06      2.81e-06\npolygon 363              17  2.29456e+05      3.43e-07\npolygon 364              36  4.01418e+06      5.99e-06\npolygon 365              57  1.77153e+07      2.65e-05\npolygon 366              20  5.72298e+05      8.55e-07\npolygon 367              14  2.46782e+05      3.68e-07\npolygon 368              29  1.01300e+06      1.51e-06\npolygon 369              90  8.54955e+06      1.28e-05\npolygon 370              21  3.99098e+05      5.96e-07\npolygon 371              12  2.81650e+05      4.21e-07\npolygon 372              52  3.19337e+06      4.77e-06\npolygon 373              13  3.40300e+05      5.08e-07\npolygon 374              29  9.08533e+05      1.36e-06\npolygon 375              20  3.07393e+05      4.59e-07\npolygon 376              19  1.15906e+06      1.73e-06\npolygon 377              17  1.16182e+06      1.73e-06\npolygon 378              21  2.60877e+06      3.90e-06\npolygon 379              15  1.09001e+05      1.63e-07\npolygon 380              37  1.31921e+06      1.97e-06\npolygon 381              53  1.46854e+06      2.19e-06\npolygon 382              59  8.92822e+06      1.33e-05\npolygon 383               9  7.44981e+04      1.11e-07\npolygon 384              14  2.41462e+05      3.61e-07\npolygon 385              96  7.25940e+06      1.08e-05\npolygon 386              11  1.06055e+05      1.58e-07\npolygon 387              49  1.87834e+06      2.80e-06\npolygon 388              23  6.08310e+05      9.08e-07\npolygon 389              50  6.76488e+05      1.01e-06\npolygon 390              22  4.83089e+05      7.21e-07\npolygon 391              17  1.17278e+05      1.75e-07\npolygon 392              13  8.98786e+05      1.34e-06\npolygon 393              43  1.01757e+06      1.52e-06\npolygon 394              52  1.68377e+06      2.51e-06\npolygon 395             348  2.50314e+08      3.74e-04\npolygon 396              43  1.29120e+06      1.93e-06\npolygon 397              71  2.02836e+06      3.03e-06\npolygon 398 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 399             141  4.53240e+06      6.77e-06\npolygon 400              52  3.62008e+06      5.41e-06\npolygon 401              20  7.69539e+05      1.15e-06\npolygon 402              88  8.88904e+06      1.33e-05\npolygon 403              12  1.44668e+05      2.16e-07\npolygon 404              46  2.28026e+06      3.40e-06\npolygon 405              39  4.79165e+06      7.15e-06\npolygon 406              53  2.86736e+06      4.28e-06\npolygon 407              38  3.22508e+06      4.82e-06\npolygon 408              18  4.44863e+05      6.64e-07\npolygon 409              45  1.45134e+06      2.17e-06\npolygon 410              86  2.56400e+07      3.83e-05\npolygon 411             158  1.74510e+07      2.61e-05\npolygon 412              14  2.50383e+05      3.74e-07\npolygon 413             120  7.17019e+06      1.07e-05\npolygon 414             146  2.28448e+07      3.41e-05\npolygon 415             143  2.34472e+07      3.50e-05\npolygon 416              20  3.47415e+05      5.19e-07\npolygon 417              84  3.86387e+06      5.77e-06\npolygon 418              68  1.10850e+07      1.66e-05\npolygon 419             863  7.47702e+07      1.12e-04\npolygon 420              53  7.54742e+06      1.13e-05\npolygon 421              64  2.11016e+06      3.15e-06\npolygon 422             103  1.47525e+07      2.20e-05\npolygon 423              26  3.40345e+06      5.08e-06\npolygon 424             103  8.40445e+06      1.25e-05\npolygon 425              23  4.92041e+05      7.35e-07\npolygon 426              27  5.53625e+05      8.27e-07\npolygon 427              60  3.56102e+06      5.32e-06\npolygon 428             151  1.51314e+07      2.26e-05\npolygon 429             708  4.18129e+08      6.24e-04\npolygon 430             120  1.32857e+07      1.98e-05\npolygon 431             856  2.53898e+08      3.79e-04\npolygon 432              13  2.47298e+05      3.69e-07\npolygon 433              16  7.35754e+05      1.10e-06\npolygon 434              21  5.31633e+05      7.94e-07\npolygon 435              72  1.03185e+07      1.54e-05\npolygon 436              38  1.34734e+06      2.01e-06\npolygon 437               8  4.09489e+05      6.11e-07\npolygon 438              17  2.46995e+05      3.69e-07\npolygon 439              14  1.42285e+05      2.12e-07\npolygon 440               9  1.56346e+05      2.33e-07\npolygon 441              42  5.49581e+05      8.21e-07\npolygon 442              59  1.15813e+06      1.73e-06\npolygon 443              12  1.16845e+05      1.74e-07\npolygon 444              11  6.00122e+04      8.96e-08\npolygon 445              14  1.63465e+05      2.44e-07\npolygon 446               8  4.73674e+04      7.07e-08\npolygon 447              23  6.69330e+05      9.99e-07\npolygon 448             144  6.48346e+06      9.68e-06\npolygon 449              74  4.79923e+06      7.17e-06\npolygon 450             116  1.02706e+07      1.53e-05\npolygon 451              16  2.74005e+05      4.09e-07\npolygon 452              97  4.72599e+06      7.06e-06\npolygon 453              18  6.15583e+05      9.19e-07\npolygon 454             146  1.38979e+07      2.08e-05\npolygon 455              32  1.94516e+06      2.90e-06\npolygon 456              26  9.81356e+05      1.47e-06\npolygon 457              82  4.39797e+06      6.57e-06\npolygon 458              33  9.36113e+05      1.40e-06\npolygon 459              47  1.51844e+06      2.27e-06\npolygon 460             196  2.32689e+07      3.47e-05\npolygon 461              53  1.30069e+06      1.94e-06\npolygon 462              70  1.00802e+07      1.51e-05\npolygon 463              10  5.33870e+05      7.97e-07\npolygon 464             211  2.73026e+07      4.08e-05\npolygon 465              41  1.44141e+06      2.15e-06\npolygon 466               9  5.20220e+05      7.77e-07\npolygon 467             316  6.66808e+07      9.96e-05\npolygon 468              17  7.48505e+05      1.12e-06\npolygon 469              15  1.49799e+05      2.24e-07\npolygon 470              24  4.99500e+05      7.46e-07\npolygon 471              12  2.24463e+05      3.35e-07\npolygon 472             100  1.06028e+07      1.58e-05\npolygon 473              11  1.24267e+05      1.86e-07\npolygon 474             143  1.89581e+07      2.83e-05\npolygon 475              60  7.07802e+06      1.06e-05\npolygon 476             124  1.23476e+07      1.84e-05\npolygon 477              34  5.67625e+06      8.48e-06\npolygon 478             797  1.86955e+08      2.79e-04\npolygon 479              15  7.15891e+05      1.07e-06\npolygon 480              20  1.61624e+06      2.41e-06\npolygon 481              13  1.73955e+05      2.60e-07\npolygon 482              60  2.42590e+06      3.62e-06\npolygon 483              20  3.86365e+05      5.77e-07\npolygon 484             213  3.69421e+07      5.52e-05\npolygon 485              15  4.55574e+05      6.80e-07\npolygon 486              35  1.56058e+06      2.33e-06\npolygon 487              32  1.42419e+06      2.13e-06\npolygon 488              68  2.30711e+06      3.44e-06\npolygon 489             240  5.93935e+07      8.87e-05\npolygon 490             145  1.58875e+07      2.37e-05\npolygon 491              39  3.67239e+06      5.48e-06\npolygon 492              54  3.84847e+06      5.75e-06\npolygon 493              32  1.14073e+06      1.70e-06\npolygon 494              18  3.58549e+05      5.35e-07\npolygon 495              25  8.06470e+05      1.20e-06\npolygon 496              15  2.67818e+05      4.00e-07\npolygon 497              26  1.43681e+06      2.15e-06\npolygon 498              18  3.10061e+05      4.63e-07\npolygon 499              18  4.71644e+05      7.04e-07\npolygon 500              16  5.04146e+05      7.53e-07\npolygon 501              72  7.33720e+06      1.10e-05\npolygon 502              27  1.37772e+06      2.06e-06\npolygon 503              15  3.17217e+05      4.74e-07\npolygon 504              37  1.17498e+06      1.75e-06\npolygon 505              21  7.05388e+05      1.05e-06\npolygon 506             216  2.05399e+07      3.07e-05\npolygon 507              16  2.40093e+05      3.59e-07\npolygon 508              29  1.71282e+06      2.56e-06\npolygon 509              30  1.28695e+06      1.92e-06\npolygon 510              36  2.29670e+06      3.43e-06\npolygon 511             129  1.97698e+07      2.95e-05\npolygon 512              65  2.65969e+06      3.97e-06\npolygon 513             283  3.30575e+07      4.94e-05\npolygon 514              28  7.06271e+05      1.05e-06\npolygon 515              28  5.50158e+05      8.21e-07\npolygon 516              49  2.25015e+06      3.36e-06\npolygon 517              26  1.24280e+06      1.86e-06\npolygon 518              28  9.02794e+05      1.35e-06\npolygon 519              18  4.84064e+05      7.23e-07\npolygon 520              47  2.33442e+06      3.49e-06\npolygon 521              17  2.23835e+05      3.34e-07\npolygon 522              34  7.32504e+05      1.09e-06\npolygon 523              41  7.15538e+05      1.07e-06\npolygon 524              21  5.81687e+05      8.69e-07\npolygon 525              63  3.83819e+06      5.73e-06\npolygon 526              27  1.33192e+06      1.99e-06\npolygon 527              46  2.95028e+06      4.41e-06\npolygon 528              10  1.34210e+05      2.00e-07\npolygon 529              16  2.38274e+05      3.56e-07\npolygon 530              18  4.18536e+05      6.25e-07\npolygon 531              46  1.26584e+06      1.89e-06\npolygon 532              14  2.14679e+05      3.21e-07\npolygon 533              76  3.63371e+06      5.43e-06\npolygon 534             339  4.44685e+07      6.64e-05\npolygon 535             109  6.29786e+06      9.40e-06\npolygon 536              14  2.89570e+05      4.32e-07\npolygon 537              37  9.07704e+05      1.36e-06\npolygon 538              68  3.86104e+06      5.77e-06\npolygon 539             183  1.45458e+07      2.17e-05\npolygon 540              44  1.64355e+06      2.45e-06\npolygon 541              26  1.21667e+06      1.82e-06\npolygon 542              13  1.95710e+05      2.92e-07\npolygon 543              38  1.44402e+06      2.16e-06\npolygon 544              14  3.29394e+05      4.92e-07\npolygon 545              14  1.79828e+05      2.69e-07\npolygon 546              44  2.11118e+06      3.15e-06\npolygon 547             643  1.79215e+08      2.68e-04\npolygon 548              24  1.10979e+06      1.66e-06\npolygon 549              30  1.57106e+06      2.35e-06\npolygon 550              46  3.61716e+06      5.40e-06\npolygon 551              93  7.56340e+05      1.13e-06\npolygon 552              57  3.07732e+06      4.59e-06\npolygon 553              18  2.16224e+05      3.23e-07\npolygon 554              17  5.12388e+05      7.65e-07\npolygon 555               9  7.44780e+04      1.11e-07\npolygon 556              57  8.09122e+06      1.21e-05\npolygon 557              16  4.01323e+05      5.99e-07\npolygon 558             118  2.90304e+07      4.33e-05\npolygon 559              22  4.44693e+05      6.64e-07\npolygon 560              43  2.28763e+06      3.42e-06\npolygon 561              27  1.15444e+06      1.72e-06\npolygon 562              25  1.21695e+06      1.82e-06\npolygon 563              53  4.49228e+06      6.71e-06\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n```\n\n\n:::\n:::\n\n\n## Plotting Armed events owin:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(armed_q_owin)\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n### Plotting stkde for quarterly kde\n\nWe now do spatio-temporal KDE here with st_kde as it'll provide the baseline for our later spatio-temporal visualizations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(armed_q_owin)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 45800.76 (spatial)\n  lambda = 0.0047 (temporal)\n\nNo. of observations\n  35611 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [7.254991e-24, 1.543849e-10]\n```\n\n\n:::\n:::\n\n\n::: callout-note\nIn my initial run, there were duplicate points. Since ACLED collects from a variety of sources, I have considered the possibility of multiple sources reporting the same event, but for sake of time I have jittered them earlier on. Below, we shall embark on plotting out the graph. Note that I decided on representation as 1-12 since tt only takes in numeric so quarter() from tidyverse would not work well with it...\n:::\n\n## Quarterly KDE\n\nLet's now move onto our quarterly KDE analysis, now that our kde and st_kde objects are set up in our environments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde <- density(armed_q_owin,\n                   sigma=bw.diggle,\n                   edge=TRUE,\n                   kernel=\"gaussian\")\nsummary(kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nreal-valued pixel image\n128 x 128 pixel array (ny, nx)\nenclosing rectangle: [-210008.6, 724647.6] x [1072026, 3158467] units\ndimensions of each pixel: 7300 x 16300.32 units\nImage is defined on a subset of the rectangular grid\nSubset area = 669515348322.876 square units\nSubset area fraction = 0.343\nPixel values (inside window):\n\trange = [-1.404673e-21, 6.712878e-06]\n\tintegral = 34663\n\tmean = 5.177327e-08\n```\n\n\n:::\n:::\n\n\nHere, we plot 3 quarters as a time for a compact side-by-side view of progression of conflict from a spatial standpoint.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to plot 3 quarters\nplot_kde_quarters <- function(start_quarter) {\n  quarters <- start_quarter:(start_quarter + 2)\n  par(mfrow=c(1,3), mar=c(2,2,2,1))\n  \n  for(i in quarters) {\n    plot(kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"KDE (non-spatial) Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Turned ribbon back on for more informative plots\n  }\n  \n  par(mfrow=c(1,1))  # Reset plot layout\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to plot 3 quarters\nplot_kde_quarters <- function(start_quarter) {\n  quarters <- start_quarter:(start_quarter + 2)\n  par(mfrow=c(1,3), mar=c(2,2,2,1))\n  \n  for(i in quarters) {\n    plot(kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"KDE (non-spatial) Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Turned ribbon back on for more informative plots\n  }\n  \n  par(mfrow=c(1,1))  # Reset plot layout\n}\n```\n:::\n\n\nWe now proceed to plot the non spatial temporal KDEs to visualize the distribution of events without time considered.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot four sets of quarters\nplot_kde_quarters(1)  # Quarters 1, 2, 3\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_kde_quarters(4)  # Quarters 4,5,6\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_kde_quarters(7)  # Quarters 7,8,9\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_kde_quarters(10) # Quarters 10,11,12\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nAs we can see, there are some pin points of conflict in the central regions and south region of Myanmar, but nothing really conclusive. Thus, we fall back onto our spatio-temporal KDE for detailed analysis of the conflict. Let's dive in!\n\n## Quarterly spatiotemporal KDE\n\nThis function ahead will help us chunk down and plot 3 side-by-side quarters:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to plot 3 quarters\nplot_quarters <- function(start_quarter) {\n  quarters <- start_quarter:(start_quarter + 2)\n  par(mfrow=c(1,3), mar=c(2,2,2,1))\n  \n  for(i in quarters) {\n    plot(st_kde, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(\"KDE Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n         ribbon=TRUE)  # Turned ribbon back on for more informative plots\n  }\n  \n  par(mfrow=c(1,1))  # Reset plot layout\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot four sets of quarters\nplot_quarters(1)  # Quarters 1, 2, 3\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_quarters(4)  # Quarters 4, 5, 6\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_quarters(7)  # Quarters 7, 8, 9\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_quarters(10)  # Quarters 10, 11, 12\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nWow! It's now much clearer that our thesis of the hotspots being central and maybe south regions of Myanmar looks more viable now. Based on the charts, we can actually point out some interesting trends:\n\n1.  There's been a large hotspot for conflict in central Vietnam, but there has been a sudden migration and flare up in conflict in 2023 Q4, spreading from Central Regions to the east too.\n\n2.  From 2023 Q1 onwards, the conflict really seems to have died down in the south region of Myanmar, with the exception of the sudden outburst again in 2023 Q4.\n\nPeeking outside of our data, we can see that this is probably linked to Operation 1027:\n\n<https://thediplomat.com/2023/10/operation-1027-a-turning-point-for-myanmars-resistance-struggle/>\n\n::: callout-note\n### But what is Operation 1027?\n\nOperation 1027 is an ongoing military offensive launched on October 27, 2023, by the Three Brotherhood Alliance (3BTA), which includes the Arakan Army (AA), Myanmar National Democratic Alliance Army (MNDAA), and Ta’ang National Liberation Army (TNLA). The operation targets the State Administration Council (SAC), Myanmar’s ruling military junta, and aims to capture strategic locations in northern Shan State, near the Myanmar-China border.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# now let's animate this\nif (!requireNamespace(\"animation\", quietly = TRUE)) install.packages(\"animation\")\nlibrary(animation)\n\nplot_quarters_gif <- function(output_file = \"kde_plot_animation.gif\") {\n  # Set up the animation\n  saveGIF({\n    # Loop through 12 quarters\n    for (q in 1:12) {\n      # Plot single quarter\n      plot(st_kde, q, \n           override.par = FALSE, \n           fix.range = TRUE, \n           main = paste(\"KDE Q\", q, \"(\", floor((q-1)/4 + 2021), \"Q\", (q-1) %% 4 + 1, \")\"),\n           ribbon = TRUE)\n    }\n  }, movie.name = output_file, interval = 0.5, ani.width = 600, ani.height = 400, loop = TRUE)\n  \n  # Return the path to the created GIF\n  return(output_file)\n}\n\n\ngif_path <- plot_quarters_gif()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nOutput at: kde_plot_animation.gif\n```\n\n\n:::\n\n```{.r .cell-code}\n# print(paste(\"GIF created at:\", gif_path))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"kde_plot_animation.gif\")\n```\n\n::: {.cell-output-display}\n![](kde_plot_animation.gif)\n:::\n:::\n\n\n::: callout-note\nAs we can see, it seems like above Mandalay and below Sagaing there seems to be a hotspot of armed conflict events, with some initial conflict in Yangon in the earlier quarters. However, there seems to be a flare up in the conflict in the last quarter we have in the dataset. We should now dig deeper with 2nd order analysis in the highlighted areas. We'll look at Sagaing, Chin, Magway and Mandalay.\n:::\n\n## Second order analysis\n\nWe'll load the regional shp file now and create an owin for it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregional_sf <- st_read(dsn = \"data/regional\", \n                layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\takehome\\ex1\\data\\regional' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(regional_sf)\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform Myanmar boundary to match ACLED data CRS\nregional_sf <- st_transform(regional_sf , st_crs(acled_sf))\n\nprint(st_crs(regional_sf ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create window for ppp objects\nreg_owin <- as.owin(regional_sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Redefine the window of the jittered ppp object\narmed_r_owin <- acled_q_ppp_jit[reg_owin]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconflict_r_sf <- st_as_sf(as.data.frame(acled_q_ppp_jit), coords = c(\"x\", \"y\"), crs = st_crs(regional_sf))\n\n# Create the plot\nggplot() +\n  geom_sf(data = regional_sf, aes(fill = ST), alpha = 0.5) +  # Use ST or any other column for filling\n  geom_sf(data = conflict_r_sf, color = \"black\", size = 0.5, alpha = 0.6) +\n  theme_minimal() +\n  labs(title = \"Armed Conflicts in Myanmar\",\n       fill = \"State/Region\") +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nRecalling our hotspot analysis, let's find the hottest region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the centroid of all conflict points\n# conflict_center <- st_centroid(st_union(conflict_r_sf))\n\n# Convert the centroid to an sf object\n# conflict_center_sf <- st_sf(geometry = conflict_center)\n\n# Ensure both objects have the same CRS\n# conflict_center_sf <- st_transform(conflict_center_sf, st_crs(regional_sf))\n\n# Perform a spatial join to find which region contains the center point\n# center_region <- st_join(conflict_center_sf, regional_sf)\n\n# Extract the region name (assuming the region column is named 'ST' as in your previous code)\n# region_name <- center_region$ST\n\n# Print the coordinates\n# print(paste(\"The center of the conflict points is in the region:\", region_name))\n\n\n# print(paste(\"The center of the conflict points is in the region:\", region_name)\n \n \n    #      X       Y\n# [1,] 190741 2294623\n# [1] \"The center of the conflict points is in the region: Mandalay\"\n```\n:::\n\n\n### Mandalay analysis\n\nWe'll take a look at Mandalay here since we saw it as \"hot\" in our initial analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Subset the Mandalay region\nMandalay_sf <- regional_sf[regional_sf$ST == \"Mandalay\", ]\n\n# 2. Create a window for Mandalay\nMandalay_owin <- as.owin(Mandalay_sf)\n\n# 3. Subset the point pattern to Mandalay\nMandalay_ppp <- acled_q_ppp_jit[Mandalay_owin]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(Mandalay_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  3068 points\nAverage intensity 9.897222e-08 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   6.000   6.628  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5914 vertices\nenclosing rectangle: [66291.97, 282396.46] x [2234807.4, 2622191.5] units\n                     (216100 x 387400 units)\nWindow area = 30998600000 square units\nFraction of frame area: 0.37\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nMandalay_ppp_km <- rescale(Mandalay_ppp, 1000, \"km\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Mandalay_ppp_km)\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck = Lest(Mandalay_ppp_km, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\nLet's see how true this strong degree of clustering is in Mandalay with Gest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_mw.csr <- envelope(Mandalay_ppp, Gest, nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(G_mw.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n# Visualization of Conflict Density Using OpenStreetMap\n\nNow that we've had the basic analysis, let's use OpenStreetMap to let us see in greater detail what's going on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to fetch OpenStreetMap base map\nget_osm_map <- function(bbox) {\n  osm_map <- read_osm(bbox, type = \"osm\", zoom = NULL)\n  return(osm_map)\n}\n\nplot_kde_quarters_tmap <- function(kde, start_quarter) {\n  quarters <- start_quarter:(start_quarter + 2)\n  \n  # Get bounding box from kde object\n  bbox_utm <- c(kde$xrange[1], kde$yrange[1], kde$xrange[2], kde$yrange[2])\n  \n  # Create a SpatialPolygons object for the bounding box\n  bbox_sp <- as(extent(bbox_utm), \"SpatialPolygons\")\n  proj4string(bbox_sp) <- CRS(\"+proj=utm +zone=47 +datum=WGS84 +units=m +no_defs\")\n  \n  # Transform bbox to WGS84\n  bbox_wgs84 <- st_as_sf(bbox_sp) %>% st_transform(4326) %>% st_bbox()\n  \n  # Fetch OpenStreetMap data\n  osm_map <- get_osm_map(bbox_wgs84)\n  \n  # Create a list to store individual plots\n  plot_list <- list()\n  \n  for (i in quarters) {\n    # Convert im object to a raster\n    r <- raster(kde)\n    \n    # Set the CRS for the raster\n    crs(r) <- CRS(\"+proj=utm +zone=47 +datum=WGS84 +units=m +no_defs\")\n    \n    # Project raster to WGS84\n    r_wgs84 <- projectRaster(r, crs = CRS(\"+proj=longlat +datum=WGS84\"))\n    \n    # Create tmap object\n    tm <- tm_shape(osm_map) +\n      tm_rgb() +\n      tm_shape(r_wgs84) +\n      tm_raster(palette = \"viridis\", alpha = 0.6, title = \"Density\") +\n      tm_layout(main.title = paste(\"KDE Q\", i, \"(\", floor((i-1)/4 + 2021), \"Q\", (i-1)%% 4 + 1, \")\"),\n                main.title.size = 0.8,\n                legend.outside = TRUE,\n                legend.outside.position = \"right\")\n    \n    plot_list[[i - start_quarter + 1]] <- tm\n  }\n  \n  # Arrange plots in a row\n  tmap_arrange(plot_list, ncol = 3)\n}\n\n# Usage\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nplot_kde_quarters_tmap(kde, start_quarter = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_kde_quarters_tmap(kde, start_quarter = 4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_kde_quarters_tmap(kde, start_quarter = 7)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_kde_quarters_tmap(kde, start_quarter = 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.2, 0.2, 0.2, 0.2, 0.2. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Usage for static plots\n# tmap_mode(\"plot\")\n# plot_stkde_quarters(st_kde, start_quarter = 1)\n\n# Usage for animation\n# plot_stkde_quarters(st_kde, animate = TRUE)\n```\n:::\n\n\n# Bonus section: Network analysis\n\nI'm starting this analysis to understand the complex dynamics of the Myanmar conflict, particularly focusing on Operation 1027 which began in October 2023. By looking at Q4 (which I assume is represented by QuarterNumeric == 12 in our data), I can capture the initial phase and immediate aftermath of this operation.\n\nI'm using network analysis because conflicts often involve multiple actors with complex relationships. This method can help me visualize and quantify these relationships.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter data for Quarter 12\nacled_q12 <- acled_filtered %>%\n  filter(QuarterNumeric == 12)\n```\n:::\n\n\nWe first filter by Q12 (2023 Q4) to first look at Operation 1027 data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Network Graph of Actor Interactions\n\nedge_list <- acled_q12 %>%\n  select(actor1, actor2) %>%\n  filter(actor1 != \"\", actor2 != \"\") %>%\n  group_by(actor1, actor2) %>%\n  summarise(weight = n(), .groups = \"drop\")\n```\n:::\n\n\nThis step is about identifying interactions between actors. Each time two actors are involved in an event, it's counted as an interaction. The 'weight' tells me how often these actors interacted.\n\nIn the context of Operation 1027, this could reveal new alliances or intensified conflicts between certain groups. For example, I might see increased interactions between the Three Brotherhood Alliance (who initiated Operation 1027) and the Myanmar military.\n\n# 1. Network Graph of Actor Interactions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create graph\ng <- graph_from_data_frame(edge_list, directed = TRUE)\n\n# Calculate node metrics, focusing on out-degree (initiations)\nnode_metrics <- data.frame(\n  actor = V(g)$name,\n  initiations = degree(g, mode = \"out\")\n) %>%\n  arrange(desc(initiations)) %>%\n  slice_head(n = 10)  # Focus on top 10 initiators\n\n# Create subgraph with top 10 initiators\ntop_actors <- node_metrics$actor\ng_sub <- induced_subgraph(g, top_actors)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to simplify actor names\nsimplify_name <- function(name) {\n  if (str_detect(name, \":\")) {\n    return(str_trim(str_split(name, \":\", n = 2)[[1]][1]))\n  } else {\n    return(name)\n  }\n}\n\n# Create the network visualization with simplified names\np_network <- ggraph(g_sub, layout = \"fr\") +\n  geom_edge_link(aes(width = weight), \n                 alpha = 0.2, \n                 arrow = arrow(length = unit(2, \"mm\"), type = \"closed\")) +\n  geom_node_point(aes(size = degree(g_sub, mode = \"out\"), \n                      color = degree(g_sub, mode = \"out\"))) +\n  geom_node_text(aes(label = sapply(name, simplify_name)), \n                 repel = TRUE, size = 4) +\n  scale_edge_width(range = c(0.5, 3)) +\n  scale_size_continuous(range = c(5, 15)) +\n  scale_color_viridis_c() +\n  theme_void() +\n  labs(title = \"Top 10 Initiators in Myanmar Conflict (October)\",\n       subtitle = \"Node size and color: Number of initiated events\\nEdge width: Frequency of interactions\",\n       size = \"Initiations\", color = \"Initiations\")\n\n# Print the plot\nprint(p_network)\n```\n\n::: {.cell-output-display}\n![](takehome1_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Summary of top initiators\ncat(\"Top 10 Initiators in Myanmar Conflict (October):\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTop 10 Initiators in Myanmar Conflict (October):\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(node_metrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                                                                                                              actor\nMilitary Forces of Myanmar (2021-)                                                                               Military Forces of Myanmar (2021-)\nUnidentified Armed Group (Myanmar)                                                                               Unidentified Armed Group (Myanmar)\nPSLF/TNLA: Palaung State Liberation Front/Ta'ang National Liberation Army PSLF/TNLA: Palaung State Liberation Front/Ta'ang National Liberation Army\nPolice Forces of Myanmar (2021-)                                                                                   Police Forces of Myanmar (2021-)\nUnidentified Anti-Coup Armed Group                                                                               Unidentified Anti-Coup Armed Group\nPyu Saw Htee                                                                                                                           Pyu Saw Htee\nKIO/KIA: Kachin Independence Organization/Kachin Independence Army               KIO/KIA: Kachin Independence Organization/Kachin Independence Army\nULA/AA: United League of Arakan/Arakan Army                                                             ULA/AA: United League of Arakan/Arakan Army\nBrotherhood Alliance                                                                                                           Brotherhood Alliance\nGZP-Mandalay: Generation Z Power (Mandalay)                                                             GZP-Mandalay: Generation Z Power (Mandalay)\n                                                                          initiations\nMilitary Forces of Myanmar (2021-)                                                 55\nUnidentified Armed Group (Myanmar)                                                 10\nPSLF/TNLA: Palaung State Liberation Front/Ta'ang National Liberation Army           9\nPolice Forces of Myanmar (2021-)                                                    9\nUnidentified Anti-Coup Armed Group                                                  6\nPyu Saw Htee                                                                        5\nKIO/KIA: Kachin Independence Organization/Kachin Independence Army                  4\nULA/AA: United League of Arakan/Arakan Army                                         4\nBrotherhood Alliance                                                                3\nGZP-Mandalay: Generation Z Power (Mandalay)                                         3\n```\n\n\n:::\n:::\n\n\n```{}\n```\n\nAs we can see, the center of the visualization is the Brotherhood Alliance, represented by the largest node, indicating its role as the primary initiator of conflict events during this period. This aligns with reports of the Alliance spearheading a coordinated offensive against the military government.\n\nInteresting, key ethnic armed organizations such as the United League of Arakan/Arakan Army (ULA/AA) and Kachin Independence Organization/Army (KIO/KIA) are prominently featured, highlighting the operation's broad ethnic base. Their connections to the Brotherhood Alliance node visually represent the unprecedented level of coordination among these groups during the offensive.\n\nThe presence of nodes like \"Unidentified Anti-Coup Armed Group\" and \"GZP-Mandalay\" (Generation Z Power) also suggest involvement from pro-democracy forces and local resistance groups, indicating the diverse coalition that Operation 1027 has roped in to fight against the military.\n\nLastly, varying thicknesses of connecting lines between nodes depict the frequency of interactions. Notably, the thicker lines between the Brotherhood Alliance and other major groups corroborate reports of enhanced coordination, a factor that contributed to the operation's initial success and the significant territorial gains made by resistance forces.\n\n# Conclusions\n\n## Acknowledgements/references\n\n1.  Claude.ai <https://claude.ai/new>\n",
    "supporting": [
      "takehome1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}