{
  "hash": "92eddad49bbe4ff02bb6d0c85d48629d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 9\"\nauthor: \"Yap Hong Xian\"\ndate: '2024-10-21'\ndate-modified: '2024-10-21'\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## Loading Required Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra,\n               NbClust, tidyverse, GGally)\n```\n:::\n\n\nWe will be using `spdep` for the scatter function. `sp` for spatial data manipulation. `tmap` for plotting. `sf` for spatial data manipulation. `ClustGeo` for spatial clustering. `cluster` for clustering. `factoextra` for clustering. `NbClust` for clustering. `tidyverse` for data manipulation. `GGally` for plotting.\n\n## Import Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- read_rds(\"data/rds/shan_sf.rds\")\nshan_ict <- read_rds(\"data/rds/shan_ict.rds\")\nshan_sf_cluster <- read_rds(\"data/rds/shan_sf_cluster.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(shan_sf_cluster, \"data/rds/shan_sf_cluster.rds\")\n```\n:::\n\n\n## Conventional Hierarchical Clustering\n\n### Hierarchical Clustering\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat <- dist(shan_ict, method = 'euclidean')\nhclust_ward <- hclust(proxmat, method = 'ward.D')\ngroups <- as.factor(cutree(hclust_ward, k=6))\n```\n:::\n\n\n### Appending to Geospatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf_cluster <- cbind(shan_sf, \n                         as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`) %>%\n  select(-c(3:4, 7:9)) %>%\n  rename(TS = TS.x)\n```\n:::\n\n\n### Plotting Dendrogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, k = 6, border = 2:5)\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Cluster Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_cluster, \"CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Spatially Constrained Clustering: SKATER\n\n### Computing Nearest Neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.nb <- poly2nb(shan_sf)\nsummary(shan.nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n```\n\n\n:::\n:::\n\n\n### Visualizing Neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), \n     border=grey(.5))\npts <- st_coordinates(st_centroid(shan_sf))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(shan.nb, \n     pts, \n     col=\"blue\", \n     add=TRUE)\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Compute Minimum Spanning Tree (MST)\n\nFirst, we need to calculate the edge costs for the minimum spanning tree. This can be done by using the `nbcosts` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlcosts <- nbcosts(shan.nb, shan_ict)\n```\n:::\n\n\nNext, we incorporate these weights into a weights object using the `nb2listw` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.w <- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n```\n\n\n:::\n:::\n\n\nThen, we call `mstree` to compute the minimum spanning tree.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.mst <- mstree(shan.w)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot.mst(shan.mst, \n         pts, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Computing Spatially Constrained Clusters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskater.clust6 <- skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n```\n:::\n\n\n### Skater Tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(skater.clust6, \n     pts, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Visualizing Clusters in Choropleth Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups_mat <- as.matrix(skater.clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### Plotting Cluster Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.8, 0.6))\n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"skater_CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.7, 0.6))\n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Spatially Constrained Clustering: ClustGeo\n\n### Computing Spatial Distance Matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n```\n:::\n\n\n### Cluster Graphs\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncr <- choicealpha(proxmat, distmat, \n                  range.alpha = seq(0, 1, 0.1), \n                  K=6, graph = TRUE)\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\n### Saving ClustGeo Output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2)\ngroups <- as.factor(cutree(clustG, k=6))\nshan_sf_clustGeo <- cbind(shan_sf, \n                          as.matrix(groups)) %>%\n  rename(`clustGeo` = `as.matrix.groups.`)\n```\n:::\n\n\n### Visualizing ClustGeo Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_clustGeo, \"clustGeo\")\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### Comparing Cluster Maps\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhclust.map <- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.8, 0.6))\n\nshclust.map <- qtm(shan_sf_spatialcluster,\n                   \"skater_CLUSTER\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.7, 0.6))\n\nclustGeo.map <- qtm(shan_sf_clustGeo,\n                   \"clustGeo\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.position = c(0.7, 0.6))\n\ntmap_arrange(hclust.map, shclust.map, \n             clustGeo.map,\n             asp=NA, ncol=3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Characterizing Clusters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggparcoord(data = shan_sf_clustGeo, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ clustGeo) + \n  theme(axis.text.x = element_text(angle = 30))\n```\n\n::: {.cell-output-display}\n![](ice9_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "ice9_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}