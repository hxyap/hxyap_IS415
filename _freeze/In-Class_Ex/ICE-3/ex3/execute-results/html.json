{
  "hash": "3af0a34ea3d7951b5e84fdbebe33c995",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exercise 3\"\nauthor: \"Yap Hong Xian\"\ndate: \"August 27, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# 1st Order Spatial Point Patterns Analysis Methods\n\nSpatial Point Pattern Analysis is the evaluation of the distribution of a set of points on a surface. THe points can represent the location of events (crime occurences, accidents), or physical facilities (FnB outlets, healthcare clinics).\n\nThis exercise uses spatstat functions to discover the spatial point processes of childcare centers in Singapore, and seeks to answer the following:\n\n1.  Are childcare centers in Singapore randomly distributed throughout the country?\n\n2.  If not, where are the locations with a higher concentration of childcare centers?\n\n::: {.callout-note collapse=\"True\"}\nAuthor's note: Would expect childcare centres to not be randomly distributed.\n:::\n\n## Install/Launch R Packages\n\nThis exercise uses the R packages *tmap*, *sf*, *tidyverse*, *raster*, and *spatstat*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInstalling package into 'C:/Users/yapho/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npackage 'maptools' successfully unpacked and MD5 sums checked\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: cannot remove prior installation of package 'maptools'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file.copy(savedcopy, lib, recursive = TRUE): problem copying\nC:\\Users\\yapho\\AppData\\Local\\R\\win-library\\4.4\\00LOCK\\maptools\\libs\\x64\\maptools.dll\nto\nC:\\Users\\yapho\\AppData\\Local\\R\\win-library\\4.4\\maptools\\libs\\x64\\maptools.dll:\nPermission denied\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: restored 'maptools'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\tC:\\Users\\yapho\\AppData\\Local\\Temp\\RtmpicAoKC\\downloaded_packages\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp)\n```\n:::\n\n\n## Download and Import Data\n\nDownload the following:\n\n-   [Childcare Services](https://data.gov.sg/collections/2015/view) (GeoJSON)\n\n-   [Master Plan 2014 Subzone Boundary Data](https://beta.data.gov.sg/datasets/d_d14da225fccf921049ab64238ff473d9/view)\n\n-   CostalOutline from SLA\n\nUsing st_read(), import the following geospatial data into R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf<- st_read(\"data/child-care-services-geojson.geojson\") %>% st_transform( crs = 3414) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `child-care-services-geojson' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-3\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- st_read(dsn = \"data\", layer = \"CostalOutline\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CostalOutline' from data source \n  `C:\\Users\\yapho\\Documents\\SMU\\smu y4\\is415\\hxyap_IS415\\In-Class_Ex\\ICE-3\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nNext, we need to project the dataframes in the same projection system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_transform(mpsz_sf, crs = 3414)\nsg_sf <- st_transform(sg_sf, crs = 3414)\n# childcare_sf is already in EPSG3414\n```\n:::\n\n\nPlot the datasets to observe the spatial patterns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nCreate an alternative interactive pin map using the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n  #tm_dots()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\nGeospatial Data Wrangling\n\nConvert sf dataframes to sp's Spatial\\* class\n\nThe code below uses as_Spatial() from the *sf* package to convert the three geospatial data from a simple dataframe to sp's Spatial\\* class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n```\n:::\n\n\nCheck the conversion:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n```\n\n\n:::\n:::\n\n\nWe pass in the childcare dataframe to generic sp:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n```\n:::\n\n\n::: {.callout-note}\nNote that Spatial\\* and sp are different – spatial is more rigid, sp is more generic and flexible structure wise.\n:::\n\nDisplaying the sp objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n```\n\n\n:::\n:::\n\n\nWe'll convert to ppp so we can more easily analyse the density and clustering of childcare centres:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: data contain duplicated points\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(childcare_ppp)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcare_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n```\n\n\n:::\n:::\n\n\nNotice that a warning about duplicates occurs. In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial points patterns processes is based largely on the assumption that processes are simple, that the points cannot be coincident. balls test\n\nThe code below can check the duplication in ppp:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(childcare_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nTo count the number of coincidence points, the multiplicity() function can be used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#multiplicity(childcare_ppp) \n# clutters page ://\n```\n:::\n\n\nTo know the number of locations that have more than one point event, run the code below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(childcare_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 128\n```\n\n\n:::\n:::\n\n\nThe code below plots out the locations of the duplicate point events:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#tmap_mode('view')\n#tm_shape(childcare) + \n#  tm_dots(alpha = 0.3, size = 0.05)\n#tmap_mode('plot')\n\n# using a simpler plot instead of mode=view for less lag:\ntm_shape(childcare) + \n  tm_dots(alpha = 0.3, size = 0.05)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note collapse=\"True\"}\nAuthor's note: If changed to a mode=view tmap, one can more easily spot duplicates to determine if\n\njittering should use to adjust them – just look for darker dots! (caused by overlapping dots)\n:::\n\nTo tackle this problem, use jittering to slightly shift the duplicate points such that they no longer occur at the same point, to make them unique.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- rjitter(childcare_ppp, retry = TRUE, nsimm = 1, drop = TRUE)\nany(duplicated(childcare_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nWhen analysing spatial point patterns, owin can be used to define a geographic boundary to confine our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\nplot(sg_owin)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nChecking the summary information:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sg_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n```\n\n\n:::\n:::\n\n\nThe code below extracts the childcare events in Singapore, and combines both the point and polygon features in one ppp object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(childcareSG_ppp)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## 1st Order Spatial Point Pattern Analysis\n\nThe density() function from spatstat computes a kernel density for a given set of point events. The diggle argument can be used to automatically select a bandwidth for computing the kernel density (think of it as similar to a gridsearch cv / k-fold validation in traditional ML for the best bandwidth!)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw <- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nThe density values of the plot above are too low, and make it hard to interpret.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.diggle(childcareSG_ppp)\nbw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n364.7227 \n```\n\n\n:::\n:::\n\n\nRescale the KDE Layers to convert the unit of measurement from ***m*** to ***km***.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp_km <- rescale(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw <- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nThe resultant plot is much more legible.\n\nMultiple bandwidth calculation methods are available from *spatstat*, some of which are covered below: Cronie and van Lieshout\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.CvL(childcareSG_ppp_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n5.142402 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw_CvL <- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = \"gaussian\")\n```\n:::\n\n\nScott's Rule\n\n::: {.callout-tip collapse=\"true\"}\n## Expand To Learn About Scott's Rule\n\nFrom rdocs: <https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/bw.scott>\nThis rule is very fast to compute. It typically produces a larger bandwidth than [`bw.diggle`](https://www.rdocumentation.org/link/bw.diggle?package=spatstat&version=1.64-1). It is useful for estimating gradual trend and for manipulating larger datasets.\n\nGlen goes into more detail here:\n\n<https://stats.stackexchange.com/questions/90656/kernel-bandwidth-scotts-vs-silvermans-rules>\n\n\"So both those binwidths are based on the IMSE-optimal (Integrated Mean Square Error) binwidth at the normal, one right at the optimum, the other (about 15% smaller, to get within 90% of the efficiency of the optimum at the normal)\"\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.scott(childcareSG_ppp_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n sigma.x  sigma.y \n2.224929 1.451020 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw_scott <- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = \"gaussian\")\n```\n:::\n\n\nLikelihood Cross Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.ppl(childcareSG_ppp_km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    sigma \n0.2934569 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw_ppl <- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = \"gaussian\")\n```\n:::\n\n\nThe plot below compares the above 3 methods with diggle\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG_bw_CvL, main = \"bw.CvL\")\nplot(kde_childcareSG_bw_scott, main = \"bw.scott\")\nplot(kde_childcareSG_bw_ppl, main = \"bw.ppl\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nDifferent smoothing methods are also available.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\n\n# We add these as otherwise, bw.ppl defaults to the default gaussian kernel\n# for calculating sigma.\nsigma_epa <- bw.ppl(childcareSG_ppp_km, kernel=\"epanechnikov\")\nsigma_quartic <- bw.ppl(childcareSG_ppp_km, kernel=\"quartic\")\nsigma_disc <- bw.ppl(childcareSG_ppp_km, kernel=\"disc\")\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp_km, sigma = sigma_epa, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\nplot(density(childcareSG_ppp_km, sigma = sigma_quartic, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\nplot(density(childcareSG_ppp_km, sigma = sigma_disc, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nFixed Bandwidth In the code below, sigma is assigned a value of 0.6, whcih represents 0.6km.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_600 <- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = \"gaussian\")\n```\n:::\n\n\nA fixed bandwidth is sensitive to highly skewed distributions of spatial points, which can be alleviated by using an adaptive bandwidth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_adapt <- adaptive.density(childcareSG_ppp_km, method = \"kernel\")\n```\n:::\n\n\nComparing the two:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_600)\nplot(kde_childcareSG_adapt)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n## Conclusion\n\nAlthough we cannot conclude about the randomness yet, we can relatively safely assume where the density of childcare centres are in Singapore from this diagram, with the higher density regions shown in the Northeast (Punggol, Hougang, etc) as well as the North (Woodlands, Yio Chu Kang, Seletar) with a easy reference \\[here\\](<https://sharonanngoh.com/useful-info/singapore-district-guide/>) should you not want to see the district mappings here ( :( )\n:::\n\nThe conversion of a KDE output into a grid object can be done to make it compatible with mapping applications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\nThis gridded KDE object can be further converted into a raster layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -1.169988e-14, 23.48918  (min, max)\n```\n\n\n:::\n:::\n\n\nSet the CRS:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -1.169988e-14, 23.48918  (min, max)\n```\n\n\n:::\n:::\n\n\nDisplay the KDE raster layer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\nTHe code below extracts the targeted planning areas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg <- mpsz_sf %>% filter(PLN_AREA_N == \"PUNGGOL\")\ntm <- mpsz_sf %>% filter(PLN_AREA_N == \"TAMPINES\")\nck <- mpsz_sf %>% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw <- mpsz_sf %>% filter(PLN_AREA_N == \"JURONG WEST\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(st_geometry(pg), main = \"Punggol\")\nplot(st_geometry(tm), main = \"Tampines\")\nplot(st_geometry(ck), main = \"Choa Chu Kang\")\nplot(st_geometry(jw), main = \"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(pg, main = \"Punggol\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(tm, main = \"Tampines\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ck, main = \"Choa Chu Kang\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(jw, main = \"Jurong West\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nConvert these SpatialPolygon objects into owin objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg_owin <- as.owin(pg)\ntm_owin <- as.owin(tm)\nck_owin <- as.owin(ck)\njw_owin <- as.owin(jw)\n```\n:::\n\n\nExtract the childcare centre points within each of the study planning areas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]\n```\n:::\n\n\nRescale from m to km:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n```\n:::\n\n\nPlot out the individual areas overlaid with their childcare centres:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\nCompute the KDE, using *diggle* to derive the bandwidth:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\nCompute the KDE using a fixed bandwidth of 0.25km:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n## Nearest Neighbour Analysis\n\nPerform the Clark-Evans test of aggregation:\n\n-   H0: Random distribution of childcare centres\n\n-   H1: Non-Random distribution of childcare centres\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcareSG_ppp\nR = 0.56012, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\nThe R value from the above result indicates clustering, and as p \\< 0.05, H0 can be rejected.\n\nPerforming the same test on the target planning areas:\n\n**Tampines**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_tm_ppp\nR = 0.78997, p-value = 7.513e-05\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\nThe R value from the above result indicates clustering, and as p \\< 0.05, H0 can be rejected.\n\n**Choa Chu Kang**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_ck_ppp\nR = 0.94327, p-value = 0.1983\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\nAs p \\> 0.05, H0 cannot be rejected.\n\n**Punggol**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_pg_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_pg_ppp\nR = 0.90048, p-value = 0.06851\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\nAs p \\< 0.05, H0 can be rejected.\n\n**Jurong West**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_jw_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_jw_ppp\nR = 0.92999, p-value = 0.1045\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\nAs p \\< 0.05, H0 can be rejected.\n\n::: {.callout-note collapse=\"false\"}\n## Conclusion\n\nThus, as the null hypothesis can be rejected on the country level, but not on the individual district level, it is safe to assume that although distributions for different districts may occasionally be random, however, overall, Singapore's childcare centres are not randomly distributed.\n:::\n\n## 2nd Order Spatial Point Pattern Analysis\n\nThe **G function** measures the distribution of the distances from an arbitrary even to its nearest event. G function on the Choa Chu Kang area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Choa Chu Kang\n\n-   H1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(G_CK.csr)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Tampines\n\n-   H1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(G_tm.csr)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n\nThe **F function** estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\n\nF function on the Choa Chu Kang area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Choa Chu Kang\n\n-   H1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(F_CK.csr)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\nF function on the Tampines area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Tampines\n\n-   H1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(F_tm.csr)\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\nThe **K function** measures the number of events found up to a given distance of any particular event.\n\nK function on the Choa Chu Kang area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Choa Chu Kang\n\n-   H1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\nK function on the Tampines area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Tampines\n\n-   H1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-80-1.png){width=672}\n:::\n:::\n\n\nThe **L function** is a transformation of the K function, designed to help in identifying clustering or regularity in spatial point patterns.\n\nL function on the Choa Chu Kang area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-81-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Choa Chu Kang\n\n-   H1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-83-1.png){width=672}\n:::\n:::\n\n\nL function on the Tampines area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-84-1.png){width=672}\n:::\n:::\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\n-   H0: Random distribution of childcare centres in Tampines\n\n-   H1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p \\< 0.001.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](ex3_files/figure-html/unnamed-chunk-86-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "ex3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}