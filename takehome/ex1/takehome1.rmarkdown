---
title: "Takehome 1"
author: "Yap Hong Xian"
date: "September 02, 2024"
date-modified: "September 02, 2024"
execute: 
  eval: true
  echo: true
  freeze: true
---

```{r}
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

```{r}
pacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp, sparr)
```


# Introduction: Armed Conflict in Myanmar

Myanmar, formerly known as Burma, is a country in Southeast Asia with a rich cultural heritage and a complex, often troubled modern history. With a population of about 54 million people and over 135 distinct ethnic groups, Myanmar is a tapestry of diverse cultures, languages, and traditions. However, this diversity has also been a source of long-standing tensions and conflicts.

## Historical Context

Since gaining independence from British rule in 1948, Myanmar has grappled with numerous internal conflicts. For decades, the country was under military rule, which ended officially in 2011 with a transition to a quasi-civilian government. However, in February 2021, the military (Tatmadaw) seized power again in a coup, plunging the country back into political turmoil and reigniting many dormant conflicts.

## Key Factors in Myanmar's Conflicts

Our analysis of armed conflict in Myanmar focuses on three primary factors that have historically been, and continue to be, major drivers of instability:

1\. **Religious Tensions**: Myanmar is predominantly Buddhist, but with significant Muslim, Christian, and animist minorities. Religious tensions, particularly between Buddhists and Muslims, have led to violent conflicts, most notably the persecution of the Rohingya Muslim minority in Rakhine State.

2\. **Ethnic Tensions**: The country's ethnic diversity has been a source of both cultural richness and conflict. Many ethnic minority groups, particularly in border areas, have long sought greater autonomy or independence from the central government dominated by the Bamar majority. These tensions have resulted in some of the world's longest-running civil wars.

3\. **Drug Trade and Infrastructure Development**: Myanmar is part of the Golden Triangle, one of the world's largest drug-producing regions. The drug trade, particularly methamphetamine and opium, has fueled conflicts and corrupted institutions. Simultaneously, infrastructure development projects, often involving foreign investment, have sometimes exacerbated local tensions over land rights and resource allocation.

## Purpose of the Analysis 

Given this complex backdrop, our geospatial analysis of armed conflict in Myanmar aims to:

1\. Identify patterns and hotspots of armed conflict.

2\. Examine how these factors interact and potentially exacerbate each other in different regions of the country.

3\. Track changes in conflict patterns over time, particularly in relation to significant political events like the 2021 military coup.

By focusing on these aspects, we hope to provide valuable insights that can inform humanitarian responses, contribute to a better understanding of conflict dynamics, and assist in developing more effective strategies for peace-building and development in the region.


```{r}
acled_sf <- read_csv("data/ACLED_Myanmar.csv") %>%
  st_as_sf(coords = c("longitude", "latitude"),
           crs = 4326) %>%
  st_transform(crs = 32647) %>%
  mutate(event_date = dmy(event_date))
```

```{r}
tmap_mode("plot")
acled_sf %>%
  filter(year == 2023 |
           event_type == "Political violence") %>%
  tm_shape() +
  tm_dots()
```

```{r}
glimpse(acled_sf)
```


Let's load our boundary:


```{r}
myanmar_boundary_sf <- st_read(dsn = "data/mmr_polbnda_adm0_250k_mimu_1", 
                layer = "mmr_polbnda_adm0_250k_mimu_1")
```


# Compare CRS

Since we've gotten our data from different sources, let's find out if they follow Myanmar's crs system WGS84 to ensure consistency for our analysis!


```{r}
# Check CRS of acled_sf
#print("CRS of ACLED data:")
# print(st_crs(acled_sf))
```

```{r}
# Transform Myanmar boundary to match ACLED data CRS
myanmar_boundary_sf <- st_transform(myanmar_boundary_sf, st_crs(acled_sf))
# Unite all geometries
myanmar_boundary_sf <- st_union(myanmar_boundary_sf)

# Remove Z or M dimensions
myanmar_boundary_sf <- st_zm(myanmar_boundary_sf, drop = TRUE, what = "ZM")

# print(st_crs(myanmar_boundary_sf))
```

```{r}
# Create a simple plot of the Myanmar boundary
tm_shape(myanmar_boundary_sf) +
  tm_borders(col = "blue", lwd = 2) +
  tm_fill(col = "lightblue", alpha = 0.5) +
  tm_layout(title = "Myanmar Boundary",
            title.size = 1.2,
            title.position = c("center", "top"))
```


Let's check if our event types exist as defined:

Here we check for unique events:


```{r}
unique_event_types <- unique(acled_sf$event_type)
print("Unique event types in the dataset:")
print(unique_event_types)
```


Sweet! looks good! Let's filter out now for our wanted event types!


```{r}

# Filter ACLED data for the specified date range and event types
event_types <- c("Battles", "Explosions/Remote violence", "Strategic developments", "Violence against civilians")
acled_filtered <- acled_sf %>%
  filter(event_date >= as.Date("2021-01-01") & event_date <= as.Date("2024-06-30"),
         event_type %in% event_types) %>%
  mutate(quarter = paste0(year(event_date), "_Q", quarter(event_date)))
```


# Defining our KDE function, and ppp


```{r}
# Create window for ppp objects
myanmar_window <- as.owin(myanmar_boundary_sf)
```

```{r}
# Create the Quarter column
acled_filtered$Quarter <- paste0(year(acled_filtered$event_date), "_Q", quarter(acled_filtered$event_date))
#numeric (1-12)
acled_filtered$QuarterNumeric <- (year(acled_filtered$event_date) - 2021) * 4 + quarter(acled_filtered$event_date)

# Create a new sf object with only Quarter and geometry
acled_quarter <- st_sf(
  QuarterNumeric = acled_filtered$QuarterNumeric,
  geometry = st_geometry(acled_filtered)
)


```

```{r}
acled_quarter_ppp <- as.ppp(acled_quarter)
```

```{r}
# Apply jittering
acled_q_ppp_jit <- rjitter(acled_quarter_ppp, retry=TRUE, nsim=1, drop=TRUE)

```

```{r}
if (any(duplicated(acled_q_ppp_jit))) {
  warning("Some duplicates remain after jittering")
}
```

```{r}
armed_q_owin <- acled_q_ppp_jit[myanmar_window]
summary(armed_q_owin)
```


## Plotting Armed events owin:


```{r}
plot(armed_q_owin)
```


### Plotting stkde for quarterly kde


```{r}
st_kde <- spattemp.density(armed_q_owin)
summary(st_kde)
```


::: callout-note
In my initial run, there were duplicate points. Since ACLED collects from a variety of sources, I have considered the possibilkity of multiple sources reporting the same event, but for sake of time I have jittered them earlier on. Below, we shall embark on plotting out the graph. Note that I decided on representation as 1-12 since tt only takes in numeric so quarter() from tidyverse would not work well with it...
:::

## Quarterly KDE


```{r}
kde <- density(armed_q_owin,
                   sigma=bw.diggle,
                   edge=TRUE,
                   kernel="gaussian")
summary(kde)
```

```{r}

# Function to plot 3 quarters
plot_kde_quarters <- function(start_quarter) {
  quarters <- start_quarter:(start_quarter + 2)
  par(mfrow=c(1,3), mar=c(2,2,2,1))
  
  for(i in quarters) {
    plot(kde, i, 
         override.par=FALSE, 
         fix.range=TRUE, 
         main=paste("KDE (non-spatial) Q", i, "(", floor((i-1)/4 + 2021), "Q", (i-1)%% 4 + 1, ")"),
         ribbon=TRUE)  # Turned ribbon back on for more informative plots
  }
  
  par(mfrow=c(1,1))  # Reset plot layout
}
```


We now proceed to plot the non spatial temporal KDEs to visualize the distribution of events without time considered.


```{r}
# Plot four sets of quarters
plot_kde_quarters(1)  # Quarters 1, 2, 3
```

```{r}
plot_kde_quarters(4)  # Quarters 4,5,6

```

```{r}
plot_kde_quarters(7)  # Quarters 7,8,9
```

```{r}
plot_kde_quarters(10) # Quarters 10,11,12
```


## Quarterly spatiotemporal KDE


```{r}
# Function to plot 3 quarters
plot_quarters <- function(start_quarter) {
  quarters <- start_quarter:(start_quarter + 2)
  par(mfrow=c(1,3), mar=c(2,2,2,1))
  
  for(i in quarters) {
    plot(st_kde, i, 
         override.par=FALSE, 
         fix.range=TRUE, 
         main=paste("KDE Q", i, "(", floor((i-1)/4 + 2021), "Q", (i-1)%% 4 + 1, ")"),
         ribbon=TRUE)  # Turned ribbon back on for more informative plots
  }
  
  par(mfrow=c(1,1))  # Reset plot layout
}
```

```{r}
# Plot four sets of quarters
plot_quarters(1)  # Quarters 1, 2, 3
```

```{r}
plot_quarters(4)  # Quarters 4, 5, 6
```

```{r}
plot_quarters(7)  # Quarters 7, 8, 9
```

```{r}
plot_quarters(10)  # Quarters 10, 11, 12
```

```{r}
# now let's animate this
if (!requireNamespace("animation", quietly = TRUE)) install.packages("animation")
library(animation)

plot_quarters_gif <- function(output_file = "kde_plot_animation.gif") {
  # Set up the animation
  saveGIF({
    # Loop through 12 quarters
    for (q in 1:12) {
      # Plot single quarter
      plot(st_kde, q, 
           override.par = FALSE, 
           fix.range = TRUE, 
           main = paste("KDE Q", q, "(", floor((q-1)/4 + 2021), "Q", (q-1) %% 4 + 1, ")"),
           ribbon = TRUE)
    }
  }, movie.name = output_file, interval = 0.5, ani.width = 600, ani.height = 400, loop = TRUE)
  
  # Return the path to the created GIF
  return(output_file)
}


gif_path <- plot_quarters_gif()
# print(paste("GIF created at:", gif_path))
```

```{r}
knitr::include_graphics("kde_plot_animation.gif")
```


::: callout-note
As we can see, it seems like above Mandalay and below Sagaing there seems to be a hotspot of armed conflict events, with some initial conflict in Yangon in the earlier quarters. However, there seems to be a flare up in the conflict in the last quarter we have in the dataset. We should now dig deeper with 2nd order analysis in the highlighted areas. We'll look at Sagaing, Chin, Magway and Mandalay.
:::

## Second order analysis

We'll load the regional shp file now and create an owin for it.


```{r}
regional_sf <- st_read(dsn = "data/regional", 
                layer = "mmr_polbnda2_adm1_250k_mimu_1")
```

```{r}
plot(regional_sf)
```

```{r}
# Transform Myanmar boundary to match ACLED data CRS
regional_sf <- st_transform(regional_sf , st_crs(acled_sf))

print(st_crs(regional_sf ))
```

```{r}
# Create window for ppp objects
reg_owin <- as.owin(regional_sf)
```

```{r}
# Redefine the window of the jittered ppp object
armed_r_owin <- acled_q_ppp_jit[reg_owin]
```

```{r}
conflict_r_sf <- st_as_sf(as.data.frame(acled_q_ppp_jit), coords = c("x", "y"), crs = st_crs(regional_sf))

# Create the plot
ggplot() +
  geom_sf(data = regional_sf, aes(fill = ST), alpha = 0.5) +  # Use ST or any other column for filling
  geom_sf(data = conflict_r_sf, color = "black", size = 0.5, alpha = 0.6) +
  theme_minimal() +
  labs(title = "Armed Conflicts in Myanmar",
       fill = "State/Region") +
  theme(legend.position = "bottom")
```


Recalling our hotspot analysis, let's find the hottest region.


```{r}

# Calculate the centroid of all conflict points
# conflict_center <- st_centroid(st_union(conflict_r_sf))

# Convert the centroid to an sf object
# conflict_center_sf <- st_sf(geometry = conflict_center)

# Ensure both objects have the same CRS
# conflict_center_sf <- st_transform(conflict_center_sf, st_crs(regional_sf))

# Perform a spatial join to find which region contains the center point
# center_region <- st_join(conflict_center_sf, regional_sf)

# Extract the region name (assuming the region column is named 'ST' as in your previous code)
# region_name <- center_region$ST

# Print the coordinates
# print(paste("The center of the conflict points is in the region:", region_name))


# print(paste("The center of the conflict points is in the region:", region_name)
 
 
    #      X       Y
# [1,] 190741 2294623
# [1] "The center of the conflict points is in the region: Mandalay"
```


### Mandalay analysis

We'll take a look at Mandalay here since we saw it as "hot" in our initial analysis.


```{r}
# 1. Subset the Mandalay region
Mandalay_sf <- regional_sf[regional_sf$ST == "Mandalay", ]

# 2. Create a window for Mandalay
Mandalay_owin <- as.owin(Mandalay_sf)

# 3. Subset the point pattern to Mandalay
Mandalay_ppp <- acled_q_ppp_jit[Mandalay_owin]

```

```{r}
summary(Mandalay_ppp)
```

```{r}
Mandalay_ppp_km <- rescale(Mandalay_ppp, 1000, "km")
```

```{r}
plot(Mandalay_ppp_km)

```

```{r}
L_ck = Lest(Mandalay_ppp_km, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```


Let's see how true this strong degree of clustering is in Mandalay with Gest.


```{r}
G_mw.csr <- envelope(Mandalay_ppp, Gest, nsim = 99)
```

```{r}
plot(G_mw.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```


## Combining KDE and St KDE


```{r}
plot_kde_stkde_quarters <- function(ppp_obj, time_data, start_quarter, bandwidth_space = NULL, bandwidth_time = NULL) {
  quarters <- start_quarter:(start_quarter + 2)
  
  # Create a list to store individual maps
  map_list <- list()
  
  # Convert ppp object to STIDF for spatio-temporal analysis
  stidf <- as.stidf(ppp_obj, time = time_data)
  
  # Calculate bandwidths if not provided
  if (is.null(bandwidth_space)) {
    bandwidth_space <- bw.stoyan(ppp_obj)
  }
  if (is.null(bandwidth_time)) {
    bandwidth_time <- bw.nrd0(time_data)
  }
  
  for(i in seq_along(quarters)) {
    q <- quarters[i]
    
    # Calculate time range for the current quarter
    time_range <- c((q-1)*3, q*3)  # Assuming each quarter is 3 months
    
    # Perform KDE
    kde <- density(ppp_obj, sigma = bandwidth_space)
    
    # Perform ST-KDE
    stkde <- density.stidf(stidf, sigma_spatial = bandwidth_space, sigma_temporal = bandwidth_time, 
                           time = time_range, dimyx = 128, divt = 1)
    
    # Convert KDE and ST-KDE to rasters
    kde_raster <- raster(kde)
    stkde_raster <- raster(stkde$v)
    
    # Ensure both rasters have the same extent and resolution
    stkde_raster <- resample(stkde_raster, kde_raster)
    
    # Create the map
    map <- tm_shape(st_as_sf(ppp_obj)) +
      tm_dots(col = "black", size = 0.1, alpha = 0.5) +
      tm_shape(kde_raster) +
      tm_raster(alpha = 0.5, palette = "viridis", title = "KDE") +
      tm_shape(stkde_raster) +
      tm_raster(alpha = 0.5, palette = "magma", title = "ST-KDE") +
      tm_basemap("OpenStreetMap") +
      tm_layout(
        main.title = paste("Q", q, "(", floor((q-1)/4 + 2021), "Q", (q-1) %% 4 + 1, ")"),
        main.title.size = 1.2,
        legend.outside = TRUE
      )
    
    map_list[[i]] <- map
  }
  
  # Arrange the three maps in a single plot
  tmap_arrange(map_list, ncol = 3)
}
```

```{r}
# plot_kde_stkde_quarters(armed_q_owin, time_data, 1)  # For quarters 1-3
```

```{r}
# plot_kde_stkde_quarters(armed_q_owin, time_data, 4)  # For quarters 1-3
```

